<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MAC录制鼠标事件脚本</title>
      <link href="/2020/04/03/macjscrpt/"/>
      <url>/2020/04/03/macjscrpt/</url>
      
        <content type="html"><![CDATA[<h4 id="录制鼠标事件脚本"><a href="#录制鼠标事件脚本" class="headerlink" title="录制鼠标事件脚本"></a>录制鼠标事件脚本</h4><p><img src="/2020/04/03/macjscrpt/test007.gif" alt="test007"></p><p>用到自己封装好的工具  <a href="https://ifeiyv.cn/tags/代码模拟键盘/" target="_blank" rel="noopener">MAC代码模拟鼠标和键盘事件</a></p><blockquote><p>  <strong>var</strong> timeStamp:CLongLong = -1  //保存上次时间戳</p><p>   <strong>var</strong> isStart:Bool = <strong>false</strong>  //保存是否开始录制脚本</p><p>  <strong>var</strong> events:[CGEvent] = <a href>CGEvent</a> //保存所有鼠标事件</p><p>  <strong>var</strong> times:[Int] = <a href>Int</a> //保存鼠标事件事件间隔（完美时间还原脚本）</p></blockquote><h5 id="1-录制脚本"><a href="#1-录制脚本" class="headerlink" title="1.录制脚本"></a>1.录制脚本</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">       </span><br><span class="line">        monitor =  <span class="type">NSEvent</span>.addGlobalMonitorForEvents(matching:[.mouseMoved,.leftMouseDown,.leftMouseUp,.leftMouseDragged,.rightMouseDown,.rightMouseUp,.rightMouseDragged,.scrollWheel]) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>](event) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>?.label.cell?.title = <span class="string">"x=\(String(format: "</span>%.0f<span class="string">", event.locationInWindow.x))\ny=\(String(format: "</span>%.0f<span class="string">", ScreenHeight - event.locationInWindow.y))"</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">self</span>!.isStart)&#123;<span class="comment">//是否开始录制脚本</span></span><br><span class="line">                <span class="keyword">self</span>!.events.append(event.cgEvent!)</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">self</span>!.events.<span class="built_in">count</span> &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">self</span>!.times.append(<span class="type">Int</span>(<span class="type">Date</span>().milliStamp - <span class="keyword">self</span>!.timeStamp))</span><br><span class="line">                    <span class="keyword">self</span>!.timeStamp = <span class="type">Date</span>().milliStamp</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">self</span>!.times.append(<span class="number">10</span>)</span><br><span class="line">                    <span class="keyword">self</span>!.timeStamp = <span class="type">Date</span>().milliStamp</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-播放脚本"><a href="#2-播放脚本" class="headerlink" title="2.播放脚本"></a>2.播放脚本</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span>  <span class="title">playEvent</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">      <span class="keyword">for</span> event <span class="keyword">in</span> events &#123;</span><br><span class="line">          <span class="keyword">if</span>(index &gt; times.<span class="built_in">count</span> - <span class="number">1</span>)&#123;</span><br><span class="line">             <span class="type">Thread</span>.sleep(forTimeInterval: <span class="type">TimeInterval</span>(<span class="number">0.01</span>))</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             <span class="type">Thread</span>.sleep(forTimeInterval: <span class="type">TimeInterval</span>( <span class="type">Double</span>(times[index]) / <span class="number">1000.0</span>))</span><br><span class="line">          &#125;</span><br><span class="line">      index += <span class="number">1</span>;</span><br><span class="line">      event.post(tap: .cghidEventTap)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本录制 </tag>
            
            <tag> 鼠标事件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter输入框键盘弹起被遮挡问题</title>
      <link href="/2020/04/03/flutter%E8%BE%93%E5%85%A5%E6%A1%86%E9%94%AE%E7%9B%98%E5%BC%B9%E8%B5%B7%E9%81%AE%E6%8C%A1%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/03/flutter%E8%BE%93%E5%85%A5%E6%A1%86%E9%94%AE%E7%9B%98%E5%BC%B9%E8%B5%B7%E9%81%AE%E6%8C%A1%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="解决键盘弹起遮挡问题"><a href="#解决键盘弹起遮挡问题" class="headerlink" title="解决键盘弹起遮挡问题"></a>解决键盘弹起遮挡问题</h4><ul><li>Scaffold的resizeToAvoidBottomPadding属性（v1.1.9之后已废弃）</li><li>resizeToAvoidBottomInset：为true键盘弹起输入框会自动上移，为false不移动，如果输入框靠下，有可能被遮挡住。默认为true</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&#x2F; This flag is deprecated, please use [resizeToAvoidBottomInset]</span><br><span class="line">&#x2F;&#x2F;&#x2F; instead.</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F; Originally the name referred [MediaQueryData.padding]. Now it refers</span><br><span class="line">&#x2F;&#x2F;&#x2F; [MediaQueryData.viewInsets], so using [resizeToAvoidBottomInset]</span><br><span class="line">&#x2F;&#x2F;&#x2F; should be clearer to readers.</span><br><span class="line">@Deprecated(</span><br><span class="line">  &#39;Use resizeToAvoidBottomInset to specify if the body should resize when the keyboard appears. &#39;</span><br><span class="line">  &#39;This feature was deprecated after v1.1.9.&#39;</span><br><span class="line">)</span><br><span class="line">final bool resizeToAvoidBottomPadding;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; If true the [body] and the scaffold&#39;s floating widgets should size</span><br><span class="line">&#x2F;&#x2F;&#x2F; themselves to avoid the onscreen keyboard whose height is defined by the</span><br><span class="line">&#x2F;&#x2F;&#x2F; ambient [MediaQuery]&#39;s [MediaQueryData.viewInsets] &#96;bottom&#96; property.</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F; For example, if there is an onscreen keyboard displayed above the</span><br><span class="line">&#x2F;&#x2F;&#x2F; scaffold, the body can be resized to avoid overlapping the keyboard, which</span><br><span class="line">&#x2F;&#x2F;&#x2F; prevents widgets inside the body from being obscured by the keyboard.</span><br><span class="line">&#x2F;&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;&#x2F; Defaults to true.</span><br><span class="line">final bool resizeToAvoidBottomInset;</span><br></pre></td></tr></table></figure><ul><li>如果以上配置报错（键盘弹起，布局溢出）界面布局可以用滚动容器承载。eg:把当前界面放到SingleChildScrollView上</li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> 键盘遮挡 </tag>
            
            <tag> TextField </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter创建项目命令</title>
      <link href="/2020/04/02/Flutter%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/02/Flutter%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="创建flutter项目命令"><a href="#创建flutter项目命令" class="headerlink" title="创建flutter项目命令"></a>创建flutter项目命令</h4><blockquote><p>进入到要创建项目的位置，在当前目录下创建项目名称为mydemo的项目</p></blockquote><ul><li><p>基本默认创建  flutter create  mydemo</p></li><li><p>创建一个 iOS 基于 Swift  ，Android基于Java的flutter项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create  --ios-language swift --android-language kotlin mydemo</span><br></pre></td></tr></table></figure></li><li><p>创建一个 iOS 基于 Swift  ，Android基于kotlin的flutter项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create  --ios-language swift --android-language kotlin mydemo</span><br></pre></td></tr></table></figure></li><li><p>创建一个 iOS 基于 OC  ，Android基于kotlin的flutter项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create  --ios-language objc --android-language kotlin mydemo</span><br></pre></td></tr></table></figure></li><li><p>创建一个 iOS 基于 OC  ，Android基于java的flutter项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create  --ios-language objc --android-language java mydemo</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC 模拟鼠标和键盘事件</title>
      <link href="/2020/03/30/SimulationMouseKeyboard/"/>
      <url>/2020/03/30/SimulationMouseKeyboard/</url>
      
        <content type="html"><![CDATA[<h4 id="代码模拟鼠标和键盘事件"><a href="#代码模拟鼠标和键盘事件" class="headerlink" title="代码模拟鼠标和键盘事件"></a>代码模拟鼠标和键盘事件</h4><blockquote><p>网上搜索了一下，基本上都是很早的代码。原理虽然一样，但是代码已经进行多次改版了，特别是现在的Swift</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  FyMKUtils.swift</span><br><span class="line">&#x2F;&#x2F;  SimulationMouseKeyboard</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by l on 2020&#x2F;3&#x2F;30.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2020 ifeiyv. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">class FyMKUtils: NSObject &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:移动鼠标到坐标位置</span><br><span class="line">    open class func mouseMove(point:CGPoint,button:CGMouseButton &#x3D; .left)&#123;</span><br><span class="line">        postMouseEvent(button: button, type: .mouseMoved, point: point);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:左键单击</span><br><span class="line">    open class func leftClick(point: CGPoint)</span><br><span class="line">    &#123;</span><br><span class="line">        click(point: point, button: .left)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;MARK:左键双击</span><br><span class="line">    open class func leftDoubleClick(point: CGPoint)</span><br><span class="line">    &#123;</span><br><span class="line">        doubleClick(point: point, button: .left)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:左键拖拽</span><br><span class="line">    &#x2F;&#x2F;&#x2F;point : 初始位置坐标</span><br><span class="line">    &#x2F;&#x2F;&#x2F;toPoint : 拖拽到的目的位置坐标</span><br><span class="line">    open class func leftMouseDragged(point:CGPoint,toPoint:CGPoint)&#123;</span><br><span class="line">        mouseDragged(point:point,toPoint:toPoint,button:.left)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:右键单击</span><br><span class="line">    open class func rightClick(point: CGPoint)</span><br><span class="line">    &#123;</span><br><span class="line">        click(point: point, button: .right)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:右键双击</span><br><span class="line">    open class func rightDoubleClick(point: CGPoint)</span><br><span class="line">    &#123;</span><br><span class="line">        doubleClick(point: point, button: .right)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:右键拖拽</span><br><span class="line">    &#x2F;&#x2F;&#x2F;point : 初始位置坐标</span><br><span class="line">    &#x2F;&#x2F;&#x2F;toPoint : 拖拽到的目的位置坐标</span><br><span class="line">    open class func rightMouseDragged(point:CGPoint,toPoint:CGPoint)&#123;</span><br><span class="line">        mouseDragged(point:point,toPoint:toPoint,button:.right)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:鼠标从一个坐标移动到另一个坐标</span><br><span class="line">    open class func mouseMove(point:CGPoint, toPoint:CGPoint)&#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;拖到的目的位置x大于原始位置的X坐标</span><br><span class="line">        let toMaxX:Bool &#x3D; toPoint.x - point.x &gt; 0</span><br><span class="line">        &#x2F;&#x2F;拖到的目的位置y大于原始位置的Y坐标</span><br><span class="line">        let toMaxY:Bool &#x3D; toPoint.y - point.y &gt; 0</span><br><span class="line">        </span><br><span class="line">        var tempPointY &#x3D; point.y</span><br><span class="line">        var tempPointX &#x3D; point.x</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        let blockOperation &#x3D; BlockOperation()</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;1.拖拽目的坐标的Y坐标</span><br><span class="line">        blockOperation.addExecutionBlock &#123;</span><br><span class="line">            while  toMaxY ? (toPoint.y &gt; tempPointY) : (toPoint.y &lt; tempPointY)&#123;</span><br><span class="line">                toMaxY ?  (tempPointY +&#x3D; 1) : (tempPointY -&#x3D; 1)</span><br><span class="line">                postMouseEvent(button: .left, type: .mouseMoved, point: CGPoint(x: tempPointX, y: tempPointY),clickCount: 1);</span><br><span class="line">                Thread.sleep(forTimeInterval: 0.001)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;2.拖拽目的坐标的X坐标</span><br><span class="line">        blockOperation.addExecutionBlock &#123;</span><br><span class="line">            while toMaxX ? (toPoint.x &gt; tempPointX) : (toPoint.x &lt; tempPointX) &#123;</span><br><span class="line">                toMaxX ? (tempPointX +&#x3D; 1) : (tempPointX -&#x3D; 1)</span><br><span class="line">                postMouseEvent(button: .left, type: .mouseMoved, point: CGPoint(x: tempPointX, y: tempPointY),clickCount: 1);</span><br><span class="line">                Thread.sleep(forTimeInterval: 0.001)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;开始执行Operation</span><br><span class="line">        blockOperation.start()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:拖拽鼠标事件</span><br><span class="line">    open class func mouseDragged(point:CGPoint,toPoint:CGPoint,button:CGMouseButton)&#123;</span><br><span class="line">        &#x2F;&#x2F;拖到的目的位置x大于原始位置的X坐标</span><br><span class="line">        let toMaxX:Bool &#x3D; toPoint.x - point.x &gt; 0</span><br><span class="line">        &#x2F;&#x2F;拖到的目的位置y大于原始位置的Y坐标</span><br><span class="line">        let toMaxY:Bool &#x3D; toPoint.y - point.y &gt; 0</span><br><span class="line">        </span><br><span class="line">        var tempPointY &#x3D; point.y</span><br><span class="line">        var tempPointX &#x3D; point.x</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;1.按下鼠标</span><br><span class="line">        postMouseEvent(button: button, type: button &#x3D;&#x3D; .left  ? .leftMouseDown : .rightMouseDown, point: point,clickCount: 1);</span><br><span class="line">        </span><br><span class="line">        let blockOperation &#x3D; BlockOperation()</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;2.拖拽目的坐标的Y坐标</span><br><span class="line">        blockOperation.addExecutionBlock &#123;</span><br><span class="line">            while  toMaxY ? (toPoint.y &gt; tempPointY) : (toPoint.y &lt; tempPointY)&#123;</span><br><span class="line">                toMaxY ?  (tempPointY +&#x3D; 1) : (tempPointY -&#x3D; 1)</span><br><span class="line">                postMouseEvent(button: button, type: button &#x3D;&#x3D; .left  ? .leftMouseDragged : .rightMouseDragged, point: CGPoint(x: tempPointX, y: tempPointY),clickCount: 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;3.拖拽目的坐标的X坐标</span><br><span class="line">        blockOperation.addExecutionBlock &#123;</span><br><span class="line">            while toMaxX ? (toPoint.x &gt; tempPointX) : (toPoint.x &lt; tempPointX) &#123;</span><br><span class="line">                toMaxX ? (tempPointX +&#x3D; 1) : (tempPointX -&#x3D; 1)</span><br><span class="line">                postMouseEvent(button: button, type: button &#x3D;&#x3D; .left  ? .leftMouseDragged : .rightMouseDragged, point: CGPoint(x: tempPointX, y: tempPointY),clickCount: 1);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;4.松开鼠标</span><br><span class="line">        blockOperation.completionBlock &#x3D; &#123;</span><br><span class="line">            print(&quot;hhhhh&quot;)</span><br><span class="line">            postMouseEvent(button: button, type: button &#x3D;&#x3D; .left  ? .leftMouseUp : .rightMouseUp, point: toPoint,clickCount: 1);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;开始执行Operation</span><br><span class="line">        blockOperation.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:鼠标单击</span><br><span class="line">    open class func click(point: CGPoint,button:CGMouseButton,clickCount:Int64 &#x3D; 1)&#123;</span><br><span class="line">        &#x2F;&#x2F;1.按下鼠标左键（移动到坐标位置后，可以加适当延时再按鼠标左键）</span><br><span class="line">        postMouseEvent(button: button, type: button &#x3D;&#x3D; .left  ? .leftMouseDown : .rightMouseDown, point: point,clickCount: clickCount);</span><br><span class="line">        &#x2F;&#x2F;2.松开鼠标左键</span><br><span class="line">        postMouseEvent(button: button, type: button &#x3D;&#x3D; .left  ? .leftMouseUp : .rightMouseUp, point: point,clickCount: clickCount);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;MARK:鼠标双击</span><br><span class="line">    open class func doubleClick(point: CGPoint,button:CGMouseButton)&#123;</span><br><span class="line">        click(point: point, button: button,clickCount:1)</span><br><span class="line">        click(point: point, button: button,clickCount:2)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;鼠标事件</span><br><span class="line">    private class func postMouseEvent(button:CGMouseButton, type:CGEventType, point: CGPoint,clickCount:Int64 &#x3D; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        let event &#x3D; createMouseEvent(button: button, type: type, point: point,clickCount:clickCount)</span><br><span class="line">        event.post(tap: CGEventTapLocation.cghidEventTap)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;创建鼠标事件</span><br><span class="line">    open class func createMouseEvent(button:CGMouseButton, type:CGEventType, point: CGPoint,clickCount:Int64 &#x3D; 1) -&gt;  CGEvent</span><br><span class="line">    &#123;</span><br><span class="line">        let event : CGEvent  &#x3D; CGEvent(mouseEventSource: CGEventSource.init(stateID: CGEventSourceStateID.privateState), mouseType: type, mouseCursorPosition: point, mouseButton: button)!</span><br><span class="line">        event.setIntegerValueField(CGEventField.mouseEventClickState, value: clickCount)</span><br><span class="line">        return event</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#x2F;鼠标滚轮事件目前仅支持OSX 10.13版本以上使用</span><br><span class="line">    &#x2F;&#x2F;&#x2F;postion 横向或者纵向滚动的距离，</span><br><span class="line">    &#x2F;&#x2F;&#x2F;纵向   postion为正数 向下滚动，为负数 向上滚动，横向   postion为正数 向右滚动，为负数 向左滚动</span><br><span class="line">    &#x2F;&#x2F;&#x2F;FyMKUtils.postScrollWheelEvent(position: -10000,scrollOrientation: .horizontal)&#x2F;&#x2F;向左滚动10000 个像素点</span><br><span class="line">    &#x2F;&#x2F;&#x2F;FyMKUtils.postScrollWheelEvent(position: 10000,scrollOrientation: .horizontal)&#x2F;&#x2F;向右滚动10000 个像素点</span><br><span class="line">    &#x2F;&#x2F;&#x2F;FyMKUtils.postScrollWheelEvent(position: -10000,scrollOrientation: .vertical)&#x2F;&#x2F;向上滚动10000 个像素点</span><br><span class="line">    &#x2F;&#x2F;&#x2F;FyMKUtils.postScrollWheelEvent(position: 10000,scrollOrientation: .vertical)&#x2F;&#x2F;向下滚动10000 个像素点</span><br><span class="line">    &#x2F;&#x2F;&#x2F;scrollOrientation  横向或者纵向</span><br><span class="line">    &#x2F;&#x2F;&#x2F;units: 滚动距离单位   .pixel 像素 .line行。默认像素</span><br><span class="line">    @available(OSX 10.13, *)</span><br><span class="line">    open class func postScrollWheelEvent(position:Int32 ,scrollOrientation:ScrollOrientation &#x3D; .vertical,units:CGScrollEventUnit &#x3D; .pixel)&#123;</span><br><span class="line">        &#x2F;&#x2F;翻转偏移值</span><br><span class="line">        let tempPosition &#x3D; -position</span><br><span class="line">        let event  &#x3D; CGEvent(scrollWheelEvent2Source:nil, units: units, wheelCount: 2, wheel1: scrollOrientation &#x3D;&#x3D; .vertical ? tempPosition : 0, wheel2: scrollOrientation &#x3D;&#x3D; .horizontal ? tempPosition : 0,wheel3: 0)</span><br><span class="line">        event?.post(tap: .cghidEventTap)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:-------------------------------</span><br><span class="line">    &#x2F;&#x2F;MARK:键盘类操作</span><br><span class="line">    </span><br><span class="line">    &#x2F;*</span><br><span class="line">    public struct CGEventFlags : OptionSet &#123;</span><br><span class="line"></span><br><span class="line">        public init(rawValue: UInt64) &#x2F;* Flags for events *&#x2F;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        &#x2F;* Device-independent modifier key bits. *&#x2F;</span><br><span class="line">     </span><br><span class="line">        &#x2F;&#x2F;大小写锁定键处于开启状态(亮灯状态)</span><br><span class="line">        public static var maskAlphaShift: CGEventFlags &#123; get &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;Shift 键按下</span><br><span class="line">        public static var maskShift: CGEventFlags &#123; get &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;Control 键按下</span><br><span class="line">        public static var maskControl: CGEventFlags &#123; get &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;Alt(Option) 键按下</span><br><span class="line">        public static var maskAlternate: CGEventFlags &#123; get &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;Command 键按下</span><br><span class="line">        public static var maskCommand: CGEventFlags &#123; get &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        &#x2F;* Special key identifiers. *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;Help 键按下</span><br><span class="line">        public static var maskHelp: CGEventFlags &#123; get &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;Fn 键按下</span><br><span class="line">        public static var maskSecondaryFn: CGEventFlags &#123; get &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        &#x2F;* Identifies key events from numeric keypad area on extended keyboards. *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;数字键 按下</span><br><span class="line">        public static var maskNumericPad: CGEventFlags &#123; get &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        &#x2F;* Indicates if mouse&#x2F;pen movement events are not being coalesced *&#x2F;</span><br><span class="line">        &#x2F;&#x2F;没有鼠标和苹果笔 按下</span><br><span class="line">        public static var maskNonCoalesced: CGEventFlags &#123; get &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *&#x2F;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#x2F; 键盘类操作</span><br><span class="line">    &#x2F;&#x2F;&#x2F; - Parameters:</span><br><span class="line">    &#x2F;&#x2F;&#x2F;   - keyCode: 键盘事件中使用的虚拟键码,CGKeyCode 要使用系统定义好的，需要导入  import Carbon     eg  A:  kVK_ANSI_A</span><br><span class="line">    &#x2F;&#x2F;&#x2F;   - keyDown: keyDown true按下 false 抬起  成对存在</span><br><span class="line">    &#x2F;&#x2F;&#x2F;   - flags: CGEventFlags  ---- 用作组合键</span><br><span class="line">    &#x2F;&#x2F;&#x2F; - ForExample:</span><br><span class="line">    &#x2F;&#x2F;&#x2F;   - K: FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: true, flags: .maskNonCoalesced) &lt;br&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F;     FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: false, flags: .maskNonCoalesced) &lt;br&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F;   - Command + KC: FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: true, flags: .maskCommand) &lt;br&gt;FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: false, flags: .maskCommand)</span><br><span class="line">    &#x2F;&#x2F;&#x2F;   - Command + Shift + K: &lt;br&gt; FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: true, flags: [.maskCommand,.maskShift]) &lt;br&gt; FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: false, flags: [.maskCommand,.maskShift])</span><br><span class="line">    open class func postKeyboardEvent(keyCode:CGKeyCode,keyDown:Bool,flags:CGEventFlags)&#123;</span><br><span class="line">        let event &#x3D; CGEvent.init(keyboardEventSource: CGEventSource.init(stateID: CGEventSourceStateID.privateState), virtualKey: keyCode, keyDown: keyDown)</span><br><span class="line">        event?.flags &#x3D; flags</span><br><span class="line">        event?.post(tap: .cghidEventTap)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;MARK:鼠标滚动方向</span><br><span class="line">enum ScrollOrientation &#123;</span><br><span class="line">    case horizontal</span><br><span class="line">    case vertical</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> MAC </tag>
            
            <tag> 代码模拟鼠标点击 </tag>
            
            <tag> 代码模拟键盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 文件已损坏或者未知开发者解决办法</title>
      <link href="/2020/03/17/Mac%20%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%E6%88%96%E8%80%85%E6%9C%AA%E7%9F%A5%E5%BC%80%E5%8F%91%E8%80%85%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2020/03/17/Mac%20%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%E6%88%96%E8%80%85%E6%9C%AA%E7%9F%A5%E5%BC%80%E5%8F%91%E8%80%85%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h5 id="sudo-spctl-–master-disable-所有来源权限"><a href="#sudo-spctl-–master-disable-所有来源权限" class="headerlink" title="sudo spctl –master-disable (所有来源权限)"></a>sudo spctl –master-disable (所有来源权限)</h5><h5 id="各位注意，这是10-15以上系统的完美解决方法"><a href="#各位注意，这是10-15以上系统的完美解决方法" class="headerlink" title="各位注意，这是10.15以上系统的完美解决方法"></a>各位注意，这是10.15以上系统的完美解决方法</h5><h5 id="打开终端（Terminal），输入以下命令后回车，如需要，请输入密码"><a href="#打开终端（Terminal），输入以下命令后回车，如需要，请输入密码" class="headerlink" title="打开终端（Terminal），输入以下命令后回车，如需要，请输入密码"></a>打开终端（Terminal），输入以下命令后回车，如需要，请输入密码</h5><h5 id="sudo-xattr-r-d-com-apple-quarantine"><a href="#sudo-xattr-r-d-com-apple-quarantine" class="headerlink" title="sudo xattr -r -d com.apple.quarantine "></a>sudo xattr -r -d com.apple.quarantine <path></h5><blockquote><p>注：<path>为应用程序路径，直接从文件夹目录拖拽即可自动填写<path></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件已损坏解决办法 </tag>
            
            <tag> 未知开发者解决办法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结合RxSwift、Moya、和HandyJSON封装网络请求模板</title>
      <link href="/2020/03/16/%E7%BB%93%E5%90%88RxSwift%E3%80%81Moya%E3%80%81%E5%92%8CHandyJSON%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/03/16/%E7%BB%93%E5%90%88RxSwift%E3%80%81Moya%E3%80%81%E5%92%8CHandyJSON%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="FyNetWork"><a href="#FyNetWork" class="headerlink" title="FyNetWork"></a>FyNetWork</h1><blockquote><p>结合RxSwift、Moya、和HandyJSON封装网络请求模板</p></blockquote><p>【该模板已经上传Github】-&gt; <a href="https://github.com/i-feiyv/FyNetWork" target="_blank" rel="noopener">前往Github</a> 获取代码</p><h2 id="文件功能"><a href="#文件功能" class="headerlink" title="文件功能"></a>文件功能</h2><h3 id="Podfile"><a href="#Podfile" class="headerlink" title="Podfile"></a>Podfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;可以根据不同版本，调整库的版本（不同版本可能需要库的版本不同）</span><br><span class="line">pod &#39;Moya&#x2F;RxSwift&#39;, &#39;~&gt; 12.0.1&#39;</span><br><span class="line">pod &#39;HandyJSON&#39;, &#39;~&gt; 5.0.1&#39;</span><br></pre></td></tr></table></figure><h3 id="FyUrls-swift"><a href="#FyUrls-swift" class="headerlink" title="FyUrls.swift"></a>FyUrls.swift</h3><p>主要放一些请求Url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">struct FyUrls &#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 服务器环境 true: 正服 false: 测服</span><br><span class="line">    </span><br><span class="line">    #if DEBUG</span><br><span class="line">    &#x2F;&#x2F;测试环境</span><br><span class="line">    static let service: Bool &#x3D; false</span><br><span class="line">    #else</span><br><span class="line">    &#x2F;&#x2F;正式环境</span><br><span class="line">    static let service: Bool &#x3D; true</span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">    static var domain: String &#123;</span><br><span class="line">        &#x2F;&#x2F; &quot;正服地址&quot; : &quot;测服地址&quot; (这里是网上搜到的开放接口，没有测试地址，两个都写正式地址)</span><br><span class="line">        return FyUrls.service ? &quot;https:&#x2F;&#x2F;v1.alapi.cn&#x2F;&quot; : &quot;https:&#x2F;&#x2F;v1.alapi.cn&#x2F;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;这里写拼接到域名上的Url</span><br><span class="line">    static var searchMusic: String &#123;</span><br><span class="line">        return &quot;api&#x2F;music&#x2F;search&quot;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;.......</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="FyApi"><a href="#FyApi" class="headerlink" title="FyApi"></a>FyApi</h3><p>主要放基于Moya的网络请求配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  FyNetworkApi.swift</span><br><span class="line">&#x2F;&#x2F;  FyNetWork</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by l on 2020&#x2F;3&#x2F;16.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2020 ifeiyv. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">import Moya</span><br><span class="line"></span><br><span class="line">enum FyApi &#123;</span><br><span class="line">    case search(keyword:String)</span><br><span class="line">    &#x2F;&#x2F;....</span><br><span class="line">    case other</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extension FyApi:TargetType&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;域名配置</span><br><span class="line">    var baseURL: URL &#123;</span><br><span class="line">        return URL(string: FyUrls.domain)!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;接口路径</span><br><span class="line">    var path: String &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        case .search:</span><br><span class="line">            return FyUrls.searchMusic</span><br><span class="line">        default:</span><br><span class="line">            return &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;请求的方式 可以根据接口切换请求方式 get、post或者其他</span><br><span class="line">    var method: Moya.Method &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        </span><br><span class="line">        case .search:</span><br><span class="line">            return .get</span><br><span class="line">        default:</span><br><span class="line">            return .post</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;做单元测试使用的数据</span><br><span class="line">    var sampleData: Data &#123;</span><br><span class="line">        return &quot;&#123;&#125;&quot;.data(using: String.Encoding.utf8)!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;所有要执行的接口任务，参数的配置在这里设置</span><br><span class="line">    var task: Task &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        case .search(let keyword):</span><br><span class="line">            let params &#x3D; FyParams.init(params: [&quot;keyword&quot; : keyword])</span><br><span class="line">            return .requestParameters(parameters: params.allParams, encoding: URLEncoding.default)</span><br><span class="line">        default:</span><br><span class="line">            return .requestPlain</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;默认请求头配置 </span><br><span class="line">    &#x2F;&#x2F;也可以在FyRequest.swift的 requestTimeoutClosure中进行动态配置</span><br><span class="line">    var headers: [String : String]? &#123;</span><br><span class="line">        switch self &#123;</span><br><span class="line">        default:</span><br><span class="line">            return [&quot;Content-type&quot;: &quot;application&#x2F;json&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FyRequest-swift"><a href="#FyRequest-swift" class="headerlink" title="FyRequest.swift"></a>FyRequest.swift</h3><p>主要放Api接口请求方法具体实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  FyRequest.swift</span><br><span class="line">&#x2F;&#x2F;  FyNetWork</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by l on 2020&#x2F;3&#x2F;16.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2020 ifeiyv. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">import UIKit</span><br><span class="line">import Moya</span><br><span class="line">import RxSwift</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let requestTimeoutClosure &#x3D; &#123; (endpoint: Endpoint, done: @escaping MoyaProvider&lt;FyApi&gt;.RequestResultClosure) in</span><br><span class="line">    do &#123;</span><br><span class="line">        var request &#x3D; try endpoint.urlRequest()</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;根据不同接口判断携带不同的请求头 &#x2F;&#x2F;这个也可以根据接口判断，切换超时时长</span><br><span class="line">        if(request.url?.absoluteString.contains(FyUrls.searchMusic.lowercased()) ?? false)&#123;</span><br><span class="line">            request.timeoutInterval &#x3D; 30</span><br><span class="line">            request.addValue(&quot;zhangsan&quot;, forHTTPHeaderField: &quot;user&quot;)</span><br><span class="line">            request.addValue(&quot;ahsfksjfhskdfhsjdkf&quot;, forHTTPHeaderField: &quot;cookie&quot;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            &#x2F;&#x2F;.....</span><br><span class="line">            request.timeoutInterval &#x3D; 10</span><br><span class="line">        &#125;</span><br><span class="line">        done(.success(request))</span><br><span class="line">    &#125; catch &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class FyRequest: NSObject &#123;</span><br><span class="line">    static let request &#x3D; FyRequest()</span><br><span class="line">    </span><br><span class="line">    var provider &#x3D; MoyaProvider&lt;FyApi&gt; (requestClosure: requestTimeoutClosure,plugins: [NetworkLoggerPlugin(verbose: true)])</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;    var provider &#x3D; MoyaProvider&lt;FyApi&gt; (</span><br><span class="line">    &#x2F;&#x2F;        plugins: [NetworkLoggerPlugin(verbose: false)]</span><br><span class="line">    &#x2F;&#x2F;    )</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;接口具体请求实现</span><br><span class="line">    public func searchSongs(keyword:String) -&gt;  Single&lt;Result&lt;Songs&gt;&gt;&#123;</span><br><span class="line">        return  provider.rx.request(.search(keyword: keyword))</span><br><span class="line">            .filterSuccessfulStatusCodes() &#x2F;&#x2F;删选请求成功状态数据</span><br><span class="line">            .mapModel()                    &#x2F;&#x2F;数据模型化</span><br><span class="line">            .flatMap &#123; (result: FyResponse&lt;Songs&gt;) in</span><br><span class="line">                if result.isSuccess&#123;</span><br><span class="line">                    return  Single.just(Result.regular(result.data ?? Songs()))</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    return Single.just(Result&lt;Songs&gt;.failing(RxMoyaError.reason(result.message ?? &quot;&quot;)))</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        .catchError(&#123; error in</span><br><span class="line">            return Single.just(Result.failing(RxMoyaError.reason(ErrorTips.netWorkError.rawValue)))</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FyResponse-swift"><a href="#FyResponse-swift" class="headerlink" title="FyResponse.swift"></a>FyResponse.swift</h3><p>主要是请求响应解析方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  FyResponse.swift</span><br><span class="line">&#x2F;&#x2F;  FyNetWork</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by l on 2020&#x2F;3&#x2F;16.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2020 ifeiyv. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">import UIKit</span><br><span class="line">import Moya</span><br><span class="line">import RxSwift</span><br><span class="line">import HandyJSON</span><br><span class="line"></span><br><span class="line">extension Array: HandyJSON &#123;&#125;</span><br><span class="line">extension String: HandyJSON &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;采用泛型解析数据</span><br><span class="line">struct FyResponse&lt;T:HandyJSON&gt;:HandyJSON&#123;</span><br><span class="line">    var code:Int &#x3D; 0</span><br><span class="line">    var message:String?</span><br><span class="line">    var data: T?</span><br><span class="line">    </span><br><span class="line">    var isSuccess: Bool &#123;</span><br><span class="line">         return code &#x3D;&#x3D; 200</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extension Response &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;响应数据转model</span><br><span class="line">    func mapModel&lt;T&gt;() throws -&gt; FyResponse&lt;T&gt; &#123;</span><br><span class="line">        do &#123;</span><br><span class="line">            if let jsonString &#x3D; String(data: data, encoding: String.Encoding.utf8)&#123;</span><br><span class="line">                if let obj &#x3D; JSONDeserializer&lt;FyResponse&lt;T&gt;&gt;.deserializeFrom(json: jsonString) &#123;</span><br><span class="line">                    return obj</span><br><span class="line">                &#125;</span><br><span class="line">                throw RxMoyaError.modelMapping(self)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw RxMoyaError.modelMapping(self)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch &#123;</span><br><span class="line">            throw RxMoyaError.modelMapping(self)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extension PrimitiveSequence where TraitType &#x3D;&#x3D; SingleTrait, ElementType &#x3D;&#x3D; Response &#123;</span><br><span class="line">    func mapModel&lt;T: HandyJSON&gt;() -&gt; Single&lt;FyResponse&lt;T&gt;&gt; &#123;</span><br><span class="line">        return flatMap &#123; (response) -&gt; Single&lt;FyResponse&lt;T&gt;&gt; in</span><br><span class="line">            return Single.just(try response.mapModel())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FyNetError-swift"><a href="#FyNetError-swift" class="headerlink" title="FyNetError.swift"></a>FyNetError.swift</h3><p>请求错误处理</p><h3 id="FySongResponse-swift"><a href="#FySongResponse-swift" class="headerlink" title="FySongResponse.swift"></a>FySongResponse.swift</h3><p>请求歌曲列表model例子</p><h3 id="FyViewModel-swift"><a href="#FyViewModel-swift" class="headerlink" title="FyViewModel.swift"></a>FyViewModel.swift</h3><p>网络请求库的运用例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  FyViewModel.swift</span><br><span class="line">&#x2F;&#x2F;  FyNetWork</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by l on 2020&#x2F;3&#x2F;16.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2020 ifeiyv. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">import UIKit</span><br><span class="line">import RxSwift</span><br><span class="line"></span><br><span class="line">class FyViewModel: NSObject &#123;</span><br><span class="line">    var dispose &#x3D; DisposeBag()</span><br><span class="line">    </span><br><span class="line">    public typealias NetworkResultClosure &#x3D; (_ names:String) -&gt; Void</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    func fetchMusicListData(keyword:String,networkResultClosure: @escaping NetworkResultClosure)&#123;</span><br><span class="line">        _ &#x3D;  FyRequest.request.searchSongs(keyword: keyword).subscribe(onSuccess: &#123; (result) in</span><br><span class="line">            switch result&#123;</span><br><span class="line">            case.regular(let songsInfo):</span><br><span class="line">                var name:String &#x3D; &quot;&quot;</span><br><span class="line">                for song in songsInfo.songs&#123;</span><br><span class="line">                    name &#x3D; name + &quot;\n&quot; + song.name</span><br><span class="line">                &#125;</span><br><span class="line">               networkResultClosure(name)</span><br><span class="line">            case .failing( _):</span><br><span class="line">                break</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;) &#123; (error) in</span><br><span class="line">            </span><br><span class="line">        &#125;.disposed(by: dispose)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ViewController.swift&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line"> func loadData()&#123; &#x2F;&#x2F;接口调用方式</span><br><span class="line">        viewModel?.fetchMusicListData(keyword:&quot;思如雪&quot;,networkResultClosure: &#123;[weak self] (names) in</span><br><span class="line">            DispatchQueue.main.async &#123;</span><br><span class="line">                self?.tips?.text &#x3D; names</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="FyParams-swift"><a href="#FyParams-swift" class="headerlink" title="FyParams.swift"></a>FyParams.swift</h3><p>主要用来配置请求参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  FyParams.swift</span><br><span class="line">&#x2F;&#x2F;  Runner</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by l on 2020&#x2F;3&#x2F;16.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2020 The Chromium Authors. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class FyBaseParams: NSObject &#123;</span><br><span class="line"></span><br><span class="line">    var channel : String  &#123;</span><br><span class="line">        return &quot;com.lpf.FyNetWork&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    var vno : Int  &#123;</span><br><span class="line">        return 100</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#x2F; .........................</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;这里面存放一些通用参数（也就是每个接口都要携带的参数）</span><br><span class="line">    var baseParams:[String:Any]?&#123;</span><br><span class="line">        var tempParams:[String:Any] &#x3D; [String:Any]()</span><br><span class="line">        tempParams[&quot;channel&quot;] &#x3D; channel</span><br><span class="line">        tempParams[&quot;vno&quot;] &#x3D; vno</span><br><span class="line">        return tempParams</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;这里存放所有请求需要的参数</span><br><span class="line">    var allParams:[String:Any]!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;根据接口需要的参数需求不同，进行适当的修改</span><br><span class="line">class FyParams: FyBaseParams &#123;</span><br><span class="line">    </span><br><span class="line">    init(params:[String:Any]? &#x3D; [String:Any]()) &#123;</span><br><span class="line">        super.init()</span><br><span class="line">        var tempParams &#x3D; [String:Any]()</span><br><span class="line">        for param in baseParams ?? [String:Any]()&#123;</span><br><span class="line">            tempParams[param.key] &#x3D; param.value</span><br><span class="line">        &#125;</span><br><span class="line">        for param in params ?? [String:Any]()&#123;</span><br><span class="line">            tempParams[param.key] &#x3D; param.value</span><br><span class="line">        &#125;</span><br><span class="line">        allParams &#x3D; tempParams ?? [String:Any]()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxSwift </tag>
            
            <tag> Moya </tag>
            
            <tag> HandyJSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 13 DarkMode适配</title>
      <link href="/2020/03/13/iOS%2013%20DarkMode%E9%80%82%E9%85%8D/"/>
      <url>/2020/03/13/iOS%2013%20DarkMode%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h4 id="封装颜色管理类"><a href="#封装颜色管理类" class="headerlink" title="封装颜色管理类"></a>封装颜色管理类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  FyColor.swift</span><br><span class="line">&#x2F;&#x2F;  FyColor</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by l on 2020&#x2F;3&#x2F;13.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2020 ifeiyv. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class FyColors&#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#x2F;深色模式适配  手动控制适配模式 启用 关闭(如非必要，可移除相关代码)</span><br><span class="line">    static let isOpenDarkModel:Bool  &#x3D; true</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: eg文字颜色</span><br><span class="line">    &#x2F;&#x2F;文字颜色  如果有多种文字颜色可以设置多个 eg: labelTextColor</span><br><span class="line">    public class var labelTextColor: UIColor &#123;</span><br><span class="line">        return darkModeColor(dark:UIColor.white,light:UIColor.black)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;文字颜色  如果有多种文字颜色可以设置多个 eg:  buttonTextColor</span><br><span class="line">    public class var buttonTextColor: UIColor &#123;</span><br><span class="line">        return darkModeColor(dark:UIColor.white,light:UIColor.black)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;文字颜色  如果有多种文字颜色可以设置多个 eg:  fieldTextColor</span><br><span class="line">    public class var fieldTextColor: UIColor &#123;</span><br><span class="line">        return darkModeColor(dark:UIColor.white,light:UIColor.black)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: eg背景颜色</span><br><span class="line">    &#x2F;&#x2F;背景颜色  如果有多种文字颜色可以设置多个 eg: labelBgColor</span><br><span class="line">    public class var labelBgColor: UIColor &#123;</span><br><span class="line">        return darkModeColor(dark:UIColor.black,light:UIColor.white)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;背景颜色  如果有多种文字颜色可以设置多个 eg:  buttonBgColor</span><br><span class="line">    public class var buttonBgColor: UIColor &#123;</span><br><span class="line">        return darkModeColor(dark:UIColor.black,light:UIColor.white)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;背景颜色  如果有多种背景颜色可以设置多个 eg:  viewBgColor</span><br><span class="line">    public class var viewBgColor: UIColor &#123;</span><br><span class="line">        return darkModeColor(dark:UIColor.black,light:UIColor.white)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;.........................................</span><br><span class="line">    &#x2F;&#x2F;根据需求增加相对应的颜色即可</span><br><span class="line">    &#x2F;&#x2F;darkModeColor(dark:UIColor.white,light:UIColor.black)</span><br><span class="line">    &#x2F;&#x2F;实际开发中不可能只有 UIColor.white，UIColor.black 两种颜色。</span><br><span class="line">    &#x2F;&#x2F;根据产品需求增加和修改对应的颜色</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;检测当前是否是深色模式</span><br><span class="line">    class func isDarkStyle() -&gt; Bool&#123;</span><br><span class="line">        if(!isOpenDarkModel)&#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">        if #available(iOS 13.0, *)&#123;</span><br><span class="line">            let currentMode &#x3D; UITraitCollection.current.userInterfaceStyle</span><br><span class="line">            if(currentMode &#x3D;&#x3D; .dark)&#123;</span><br><span class="line">                return  true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 适配 动态颜色</span><br><span class="line">    class func darkModeColor(dark:UIColor,light:UIColor) -&gt;UIColor&#123;</span><br><span class="line">        if(!isOpenDarkModel)&#123;</span><br><span class="line">            return light</span><br><span class="line">        &#125;</span><br><span class="line">        if #available(iOS 13.0, *)&#123;</span><br><span class="line">            return UIColor&#123;(trainCollection) -&gt; UIColor in</span><br><span class="line">                if trainCollection.userInterfaceStyle &#x3D;&#x3D; .dark&#123;</span><br><span class="line">                    return dark</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    return light</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return light</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用方式：-深色模式切换时，系统会重新渲染颜色，自动在设置好的两种颜色中进行切换"><a href="#使用方式：-深色模式切换时，系统会重新渲染颜色，自动在设置好的两种颜色中进行切换" class="headerlink" title="使用方式：(深色模式切换时，系统会重新渲染颜色，自动在设置好的两种颜色中进行切换)"></a>使用方式：(深色模式切换时，系统会重新渲染颜色，自动在设置好的两种颜色中进行切换)</h5> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">label.textColor &#x3D; FyColors.labelTextColor</span><br><span class="line">   </span><br><span class="line">label.backgroundColor &#x3D; FyColors.labelBgColor</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F;或者在此方法监听深色模式进行手动切换</span><br><span class="line">override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) &#123;</span><br><span class="line">    super.traitCollectionDidChange(previousTraitCollection)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> DarkMode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AndroidStudio生成签名信息报错</title>
      <link href="/2020/02/05/AndroidStudio%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D%E4%BF%A1%E6%81%AF%E6%8A%A5%E9%94%99/"/>
      <url>/2020/02/05/AndroidStudio%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D%E4%BF%A1%E6%81%AF%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h4 id="AndroidStudio生成签名信息报错"><a href="#AndroidStudio生成签名信息报错" class="headerlink" title="AndroidStudio生成签名信息报错"></a>AndroidStudio生成签名信息报错</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Key was created with errors:</span><br><span class="line">Warning:</span><br><span class="line">JKS 密钥库使用专用格式。建议使用 </span><br><span class="line">&quot;keytool -importkeystore -srckeystore</span><br><span class="line">(存放路径)\AndroidSigh.jks -destkeystore</span><br><span class="line">(存放路径)\AndroidSigh.jks -deststoretype pkcs12&quot;</span><br><span class="line">迁移到行业标准格式 PKCS12。</span><br></pre></td></tr></table></figure><blockquote><p>解决方案在终端中输入以下命令：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias (alias名称) -keypass (alias密码) -keyalg RSA -keysize 2048 -validity 36500 -keystore (存放路径)\(保存jks文件名称).jks -storepass (keyStore密码)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;然后根据提示信息填写即可（上面命令中的括号要删掉）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> jks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift判断字符串中是否含有中文</title>
      <link href="/2020/01/15/Swift%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E4%B8%AD%E6%96%87/"/>
      <url>/2020/01/15/Swift%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E4%B8%AD%E6%96%87/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var str &#x3D; &quot;l我o是v中e文123456789&quot;</span><br><span class="line"></span><br><span class="line">func judgeStringIncludeChineseWord(string: String) -&gt; Bool &#123;</span><br><span class="line">    </span><br><span class="line">    for (_, value) in string.characters.enumerated() &#123;</span><br><span class="line"></span><br><span class="line">        if (&quot;\u&#123;4E00&#125;&quot; &lt;&#x3D; value  &amp;&amp; value &lt;&#x3D; &quot;\u&#123;9FA5&#125;&quot;) &#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let result &#x3D; judgeStringIncludeChineseWord(string: str)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 分享邀请码图片合成</title>
      <link href="/2019/12/15/Swift%20%E5%88%86%E4%BA%AB%E9%82%80%E8%AF%B7%E7%A0%81%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90/"/>
      <url>/2019/12/15/Swift%20%E5%88%86%E4%BA%AB%E9%82%80%E8%AF%B7%E7%A0%81%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    class func creteImage(bgImage: UIImage, iconImage: UIImage,iconFrame:CGRect,qrCodeImage:UIImage,codeFrame:CGRect,inviteCodeImg:UIImage,frame:CGRect) -&gt; UIImage</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 1.开启图片上下文</span><br><span class="line">&#x2F;&#x2F;        UIGraphicsBeginImageContext(bgImage.size)</span><br><span class="line">        UIGraphicsBeginImageContextWithOptions(bgImage.size,false,UIScreen.main.scale)</span><br><span class="line">        &#x2F;&#x2F; 2.绘制背景图片</span><br><span class="line">        bgImage.draw(in: CGRect(origin: CGPoint.zero, size: bgImage.size))</span><br><span class="line">        &#x2F;&#x2F; 3.绘制头像</span><br><span class="line">        iconImage.draw(in: iconFrame)</span><br><span class="line">        </span><br><span class="line">        qrCodeImage.draw(in: codeFrame)</span><br><span class="line">        </span><br><span class="line">        inviteCodeImg.draw(in: frame)</span><br><span class="line">        &#x2F;&#x2F; 4.取出绘制号的图片</span><br><span class="line">        let newImage &#x3D; UIGraphicsGetImageFromCurrentImageContext()</span><br><span class="line">        &#x2F;&#x2F; 5.关闭上下文</span><br><span class="line">        UIGraphicsEndImageContext()</span><br><span class="line">        &#x2F;&#x2F; 6.返回合成号的图片</span><br><span class="line">        return newImage!</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F;MARK: -传进去字符串,生成二维码图片</span><br><span class="line">class func setupQRCodeImage(_ text: String) -&gt; UIImage &#123;</span><br><span class="line">     &#x2F;&#x2F;创建滤镜</span><br><span class="line">     let filter &#x3D; CIFilter(name: &quot;CIQRCodeGenerator&quot;)</span><br><span class="line">     filter?.setDefaults()</span><br><span class="line">     &#x2F;&#x2F;将url加入二维码</span><br><span class="line">     filter?.setValue(text.data(using: String.Encoding.utf8), forKey: &quot;inputMessage&quot;)</span><br><span class="line">     &#x2F;&#x2F;取出生成的二维码（不清晰）</span><br><span class="line">     if let outputImage &#x3D; filter?.outputImage &#123;</span><br><span class="line">         &#x2F;&#x2F;生成清晰度更好的二维码</span><br><span class="line">         let qrCodeImage &#x3D; Util.setupHighDefinitionUIImage(outputImage, size: 140)</span><br><span class="line">         return qrCodeImage</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     return UIImage()</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F;MARK: - 生成高清的UIImage</span><br><span class="line">class func setupHighDefinitionUIImage(_ image: CIImage, size: CGFloat) -&gt; UIImage &#123;</span><br><span class="line">     let integral: CGRect &#x3D; image.extent.integral</span><br><span class="line">     let proportion: CGFloat &#x3D; min(size&#x2F;integral.width, size&#x2F;integral.height)</span><br><span class="line">     </span><br><span class="line">     let width &#x3D; integral.width * proportion</span><br><span class="line">     let height &#x3D; integral.height * proportion</span><br><span class="line">     let colorSpace: CGColorSpace &#x3D; CGColorSpaceCreateDeviceGray()</span><br><span class="line">     let bitmapRef &#x3D; CGContext(data: nil, width: Int(width), height: Int(height), bitsPerComponent: 8, bytesPerRow: 0, space: colorSpace, bitmapInfo: 0)!</span><br><span class="line">     </span><br><span class="line">     let context &#x3D; CIContext(options: nil)</span><br><span class="line">     let bitmapImage: CGImage &#x3D; context.createCGImage(image, from: integral)!</span><br><span class="line">     </span><br><span class="line">     bitmapRef.interpolationQuality &#x3D; CGInterpolationQuality.none</span><br><span class="line">     bitmapRef.scaleBy(x: proportion, y: proportion);</span><br><span class="line">     bitmapRef.draw(bitmapImage, in: integral);</span><br><span class="line">     let image: CGImage &#x3D; bitmapRef.makeImage()!</span><br><span class="line">     return UIImage(cgImage: image)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    class func getImageFromView(view:UIView) -&gt;UIImage&#123;</span><br><span class="line">&#x2F;&#x2F;        UIGraphicsBeginImageContext(view.bounds.size)</span><br><span class="line">        UIGraphicsBeginImageContextWithOptions(view.bounds.size,false,UIScreen.main.scale)</span><br><span class="line">        view.layer.render(in: UIGraphicsGetCurrentContext()!)</span><br><span class="line">        </span><br><span class="line">        let image &#x3D; UIGraphicsGetImageFromCurrentImageContext()</span><br><span class="line">        </span><br><span class="line">        UIGraphicsEndImageContext()</span><br><span class="line">        </span><br><span class="line">        return image!</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片合成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直播系列四、报错Bug修复记录</title>
      <link href="/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E5%9B%9B%E3%80%81%E6%8A%A5%E9%94%99Bug%E4%BF%AE%E5%A4%8D%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E5%9B%9B%E3%80%81%E6%8A%A5%E9%94%99Bug%E4%BF%AE%E5%A4%8D%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<ol><li>./build-ffmpeg.sh</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xcrun -sdk iphoneos clang is unable to create an executable file.</span><br><span class="line">C compiler test failed.</span><br><span class="line"></span><br><span class="line">If you think configure made a mistake, make sure you are using the latest</span><br><span class="line">version from Git. If the latest version fails, report the problem to the</span><br><span class="line">ffmpeg-user@ffmpeg.org mailing list or IRC #ffmpeg on irc.freenode.net.</span><br><span class="line">Include the log file &quot;config.log&quot; produced by configure as this will help</span><br><span class="line">solve the problem.</span><br></pre></td></tr></table></figure><p>解决方法：</p><pre><code>sudo xcode-select --switch /Applications/Xcode.app</code></pre><ol start="2"><li>armv7</li></ol><p><a href="https://www.jianshu.com/p/2669370bee23" target="_blank" rel="noopener">https://www.jianshu.com/p/2669370bee23</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;libavutil&#x2F;arm&#x2F;asm.S:50:9: error: unknown directive</span><br><span class="line">       .arch armv7-a</span><br><span class="line">       ^</span><br></pre></td></tr></table></figure><p>删除<code>armv7compile-ffmpeg.sh</code>文件中 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FF_ALL_ARCHS_IOS8_SDK&#x3D;&quot;armv7 arm64 i386 x86_64&quot;</span><br><span class="line"></span><br><span class="line">改为 FF_ALL_ARCHS_IOS8_SDK&#x3D;&quot;arm64 i386 x86_64&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直播系列三、IJKPlayer拉流</title>
      <link href="/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E4%B8%89%E3%80%81IJKPlayer%E6%8B%89%E6%B5%81/"/>
      <url>/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E4%B8%89%E3%80%81IJKPlayer%E6%8B%89%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/65fb80dff4d6" target="_blank" rel="noopener">https://www.jianshu.com/p/65fb80dff4d6</a></p><p>合并真机和模拟器的framework</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -create 真机framework路径 模拟器framework路径 -output 合并的文件路径</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class playerViewController: UIViewController &#123;</span><br><span class="line"></span><br><span class="line">    var iPlayer:IJKFFMoviePlayerController? </span><br><span class="line">    </span><br><span class="line">    override func viewDidLoad() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        </span><br><span class="line">        let options:IJKFFOptions &#x3D; IJKFFOptions.byDefault()</span><br><span class="line">        let url:URL &#x3D; URL.init(string: &quot;rtmp:&#x2F;&#x2F;live.hkstv.hk.lxdns.com&#x2F;live&#x2F;hks&quot;)!</span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">        self.iPlayer &#x3D; IJKFFMoviePlayerController.init(contentURL: url, with: options)</span><br><span class="line">        var arm1 &#x3D; UIViewAutoresizing.init(rawValue: 0)</span><br><span class="line">        arm1.insert(UIViewAutoresizing.flexibleWidth)</span><br><span class="line">        arm1.insert(UIViewAutoresizing.flexibleHeight) </span><br><span class="line">        self.iPlayer?.view.autoresizingMask &#x3D; arm1</span><br><span class="line">        self.iPlayer?.view.backgroundColor &#x3D; UIColor.white</span><br><span class="line">        self.iPlayer?.view.frame &#x3D; CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.size.width, height: 300)</span><br><span class="line">        self.iPlayer?.scalingMode &#x3D; .aspectFit</span><br><span class="line">        self.iPlayer?.shouldAutoplay &#x3D; true</span><br><span class="line">        self.view.autoresizesSubviews &#x3D; true</span><br><span class="line">        self.view.addSubview((self.iPlayer?.view)!)</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; Do any additional setup after loading the view, typically from a nib.</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    override func didReceiveMemoryWarning() &#123;</span><br><span class="line">        super.didReceiveMemoryWarning()</span><br><span class="line">        &#x2F;&#x2F; Dispose of any resources that can be recreated.</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    override func viewWillAppear(_ animated: Bool) &#123;</span><br><span class="line">        super.viewWillAppear(animated)</span><br><span class="line">        self.iPlayer?.prepareToPlay() &#x2F;&#x2F;准备</span><br><span class="line">        self.iPlayer?.play() &#x2F;&#x2F;播放</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    override func viewWillDisappear(_ animated: Bool) &#123;</span><br><span class="line">        super.viewWillDisappear(animated)</span><br><span class="line">        self.iPlayer?.pause()&#x2F;&#x2F;暂停</span><br><span class="line">&#x2F;&#x2F;        self.iPlayer?.shutdown() &#x2F;&#x2F;销毁</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直播系列二、LFLiveKit推流</title>
      <link href="/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E4%BA%8C%E3%80%81LFLiveKit%E6%8E%A8%E6%B5%81/"/>
      <url>/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E4%BA%8C%E3%80%81LFLiveKit%E6%8E%A8%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LFLiveKit：框架支持RTMP，由Adobe公司开发。github地址<a href="https://github.com/LaiFengiOS/LFLiveKit" target="_blank" rel="noopener">https://github.com/LaiFengiOS/LFLiveKit</a></p></blockquote><p>LFLiveKit库里已经集成GPUImage框架用于美颜功能，GPUImage基于OpenGl开发，纯OC语言框架，封装好了各种滤镜同时也可以编写自定义的滤镜，其本身内置了多达125种常见的滤镜效果。</p><p>LFLiveKit库通过pod导入项目</p><pre><code>pod &apos;LFLiveKit&apos;</code></pre><p>配置上传地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let stream &#x3D; LFLiveStreamInfo()</span><br><span class="line">stream.url &#x3D; &quot;rtmp:&#x2F;&#x2F;192.168.***.***:1935&#x2F;rtmplive&#x2F;room&quot;</span><br><span class="line">session.startLive(stream)</span><br></pre></td></tr></table></figure><p>demo </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  ViewController.swift</span><br><span class="line">//  IfeiyvLiveVideo</span><br><span class="line">//</span><br><span class="line">//  Created by l on 2019/7/1.</span><br><span class="line">//  Copyright © 2019 ifeiyv. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class ViewController: UIViewController, LFLiveSessionDelegate &#123;</span><br><span class="line">    </span><br><span class="line">    override func <span class="function"><span class="title">viewDidLoad</span></span>() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line">        </span><br><span class="line">        session.delegate = self</span><br><span class="line">        session.preView = self.view</span><br><span class="line">        </span><br><span class="line">        self.requestAccessForVideo()</span><br><span class="line">        self.requestAccessForAudio()</span><br><span class="line">        self.view.backgroundColor = UIColor.clear</span><br><span class="line">        self.view.addSubview(containerView)</span><br><span class="line">        containerView.addSubview(stateLabel)</span><br><span class="line">        containerView.addSubview(closeButton)</span><br><span class="line">        containerView.addSubview(beautyButton)</span><br><span class="line">        containerView.addSubview(cameraButton)</span><br><span class="line">        containerView.addSubview(startLiveButton)</span><br><span class="line">        </span><br><span class="line">        cameraButton.addTarget(self, action: <span class="comment">#selector(didTappedCameraButton(_:)), for:.touchUpInside)</span></span><br><span class="line">        beautyButton.addTarget(self, action: <span class="comment">#selector(didTappedBeautyButton(_:)), for: .touchUpInside)</span></span><br><span class="line">        startLiveButton.addTarget(self, action: <span class="comment">#selector(didTappedStartLiveButton(_:)), for: .touchUpInside)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func <span class="function"><span class="title">didReceiveMemoryWarning</span></span>() &#123;</span><br><span class="line">        super.didReceiveMemoryWarning()</span><br><span class="line">        // Dispose of any resources that can be recreated.</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //MARK: AccessAuth</span><br><span class="line">    </span><br><span class="line">    func requestAccessForVideo() -&gt; Void &#123;</span><br><span class="line">        <span class="built_in">let</span> status = AVCaptureDevice.authorizationStatus(<span class="keyword">for</span>: AVMediaType.video);</span><br><span class="line">        switch status  &#123;</span><br><span class="line">        // 许可对话没有出现，发起授权许可</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.notDetermined:</span><br><span class="line">            AVCaptureDevice.requestAccess(<span class="keyword">for</span>: AVMediaType.video, completionHandler: &#123; (granted) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span>(granted)&#123;</span><br><span class="line">                    DispatchQueue.main.async &#123;</span><br><span class="line">                        self.session.running = <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        // 已经开启授权，可继续</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.authorized:</span><br><span class="line">            session.running = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        // 用户明确地拒绝授权，或者相机设备无法访问</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.denied: <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.restricted:<span class="built_in">break</span>;</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func requestAccessForAudio() -&gt; Void &#123;</span><br><span class="line">        <span class="built_in">let</span> status = AVCaptureDevice.authorizationStatus(<span class="keyword">for</span>:AVMediaType.audio)</span><br><span class="line">        switch status  &#123;</span><br><span class="line">        // 许可对话没有出现，发起授权许可</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.notDetermined:</span><br><span class="line">            AVCaptureDevice.requestAccess(<span class="keyword">for</span>: AVMediaType.audio, completionHandler: &#123; (granted) <span class="keyword">in</span></span><br><span class="line">                </span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        // 已经开启授权，可继续</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.authorized:</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        // 用户明确地拒绝授权，或者相机设备无法访问</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.denied: <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.restricted:<span class="built_in">break</span>;</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //MARK: - Callbacks</span><br><span class="line">    </span><br><span class="line">    // 回调</span><br><span class="line">    func liveSession(_ session: LFLiveSession?, debugInfo: LFLiveDebug?) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"debugInfo: \(debugInfo?.currentBandwidth)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func liveSession(_ session: LFLiveSession?, errorCode: LFLiveSocketErrorCode) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"errorCode: \(errorCode.rawValue)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func liveSession(_ session: LFLiveSession?, liveStateDidChange state: LFLiveState) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"liveStateDidChange: \(state.rawValue)"</span>)</span><br><span class="line">        switch state &#123;</span><br><span class="line">        <span class="keyword">case</span> LFLiveState.ready:</span><br><span class="line">            stateLabel.text = <span class="string">"未连接"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LFLiveState.pending:</span><br><span class="line">            stateLabel.text = <span class="string">"连接中"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LFLiveState.start:</span><br><span class="line">            stateLabel.text = <span class="string">"已连接"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LFLiveState.error:</span><br><span class="line">            stateLabel.text = <span class="string">"连接错误"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LFLiveState.stop:</span><br><span class="line">            stateLabel.text = <span class="string">"未连接"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //MARK: - Events</span><br><span class="line">    </span><br><span class="line">    // 开始直播</span><br><span class="line">    @objc func didTappedStartLiveButton(_ button: UIButton) -&gt; Void &#123;</span><br><span class="line">        startLiveButton.isSelected = !startLiveButton.isSelected;</span><br><span class="line">        <span class="keyword">if</span> (startLiveButton.isSelected) &#123;</span><br><span class="line">            startLiveButton.setTitle(<span class="string">"结束直播"</span>, <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">            <span class="built_in">let</span> stream = LFLiveStreamInfo()</span><br><span class="line">            stream.url = <span class="string">"rtmp://192.168.1.148:1935/rtmplive/room"</span></span><br><span class="line">            session.startLive(stream)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startLiveButton.setTitle(<span class="string">"开始直播"</span>, <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">            session.stopLive()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 美颜</span><br><span class="line">    @objc func didTappedBeautyButton(_ button: UIButton) -&gt; Void &#123;</span><br><span class="line">        session.beautyFace = !session.beautyFace;</span><br><span class="line">        beautyButton.isSelected = !session.beautyFace</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 摄像头</span><br><span class="line">    @objc func didTappedCameraButton(_ button: UIButton) -&gt; Void &#123;</span><br><span class="line">        <span class="built_in">let</span> devicePositon = session.captureDevicePosition;</span><br><span class="line">        session.captureDevicePosition = (devicePositon == AVCaptureDevice.Position.back) ? AVCaptureDevice.Position.front : AVCaptureDevice.Position.back;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 关闭</span><br><span class="line">    func didTappedCloseButton(_ button: UIButton) -&gt; Void  &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //MARK: - Getters and Setters</span><br><span class="line">    </span><br><span class="line">    //  默认分辨率368 ＊ 640  音频：44.1 iphone6以上48  双声道  方向竖屏</span><br><span class="line">    var session: LFLiveSession = &#123;</span><br><span class="line">        <span class="built_in">let</span> audioConfiguration = LFLiveAudioConfiguration.defaultConfiguration(<span class="keyword">for</span>: LFLiveAudioQuality.high)</span><br><span class="line">        <span class="built_in">let</span> videoConfiguration = LFLiveVideoConfiguration.defaultConfiguration(<span class="keyword">for</span>: LFLiveVideoQuality.low3)</span><br><span class="line">        <span class="built_in">let</span> session = LFLiveSession(audioConfiguration: audioConfiguration, videoConfiguration: videoConfiguration)</span><br><span class="line">        <span class="built_in">return</span> session!</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 视图</span><br><span class="line">    var containerView: UIView = &#123;</span><br><span class="line">        <span class="built_in">let</span> containerView = UIView(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height))</span><br><span class="line">        containerView.backgroundColor = UIColor.clear</span><br><span class="line">        containerView.autoresizingMask = [UIView.AutoresizingMask.flexibleHeight, UIView.AutoresizingMask.flexibleHeight]</span><br><span class="line">        <span class="built_in">return</span> containerView</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 状态Label</span><br><span class="line">    var stateLabel: UILabel = &#123;</span><br><span class="line">        <span class="built_in">let</span> stateLabel = UILabel(frame: CGRect(x: 20, y: 20, width: 80, height: 40))</span><br><span class="line">        stateLabel.text = <span class="string">"未连接"</span></span><br><span class="line">        stateLabel.textColor = UIColor.white</span><br><span class="line">        stateLabel.font = UIFont.systemFont(ofSize: 14)</span><br><span class="line">        <span class="built_in">return</span> stateLabel</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 关闭按钮</span><br><span class="line">    var closeButton: UIButton = &#123;</span><br><span class="line">        <span class="built_in">let</span> closeButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 10 - 44, y: 20, width: 44, height: 44))</span><br><span class="line">        closeButton.setImage(UIImage(named: <span class="string">"close_preview"</span>), <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">        <span class="built_in">return</span> closeButton</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 摄像头</span><br><span class="line">    var cameraButton: UIButton = &#123;</span><br><span class="line">        <span class="built_in">let</span> cameraButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 54 * 2, y: 20, width: 44, height: 44))</span><br><span class="line">        cameraButton.setImage(UIImage(named: <span class="string">"camra_preview"</span>), <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">        <span class="built_in">return</span> cameraButton</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 摄像头</span><br><span class="line">    var beautyButton: UIButton = &#123;</span><br><span class="line">        <span class="built_in">let</span> beautyButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 54 * 3, y: 20, width: 44, height: 44))</span><br><span class="line">        beautyButton.setImage(UIImage(named: <span class="string">"camra_beauty"</span>), <span class="keyword">for</span>: UIControl.State.selected)</span><br><span class="line">        beautyButton.setImage(UIImage(named: <span class="string">"camra_beauty_close"</span>), <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">        <span class="built_in">return</span> beautyButton</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 开始直播按钮</span><br><span class="line">    var startLiveButton: UIButton = &#123;</span><br><span class="line">        <span class="built_in">let</span> startLiveButton = UIButton(frame: CGRect(x: 30, y: UIScreen.main.bounds.height - 50, width: UIScreen.main.bounds.width - 10 - 44, height: 44))</span><br><span class="line">        startLiveButton.layer.cornerRadius = 22</span><br><span class="line">        startLiveButton.setTitleColor(UIColor.black, <span class="keyword">for</span>:UIControl.State())</span><br><span class="line">        startLiveButton.setTitle(<span class="string">"开始直播"</span>, <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">        startLiveButton.titleLabel!.font = UIFont.systemFont(ofSize: 14)</span><br><span class="line">        startLiveButton.backgroundColor = UIColor(red: 50/255.0, green: 32/255.0, blue: 245/255.0, alpha: 1)//colorLiteralRed: 50, green: 32, blue: 245, alpha: 1</span><br><span class="line">        <span class="built_in">return</span> startLiveButton</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">//  ViewController.swift</span><br><span class="line">//  IfeiyvLiveVideo</span><br><span class="line">//</span><br><span class="line">//  Created by l on 2019/7/1.</span><br><span class="line">//  Copyright © 2019 ifeiyv. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">class ViewController: UIViewController, LFLiveSessionDelegate &#123;</span><br><span class="line">    </span><br><span class="line">    override func <span class="function"><span class="title">viewDidLoad</span></span>() &#123;</span><br><span class="line">        super.viewDidLoad()</span><br><span class="line">        // Do any additional setup after loading the view, typically from a nib.</span><br><span class="line">        </span><br><span class="line">        session.delegate = self</span><br><span class="line">        session.preView = self.view</span><br><span class="line">        </span><br><span class="line">        self.requestAccessForVideo()</span><br><span class="line">        self.requestAccessForAudio()</span><br><span class="line">        self.view.backgroundColor = UIColor.clear</span><br><span class="line">        self.view.addSubview(containerView)</span><br><span class="line">        containerView.addSubview(stateLabel)</span><br><span class="line">        containerView.addSubview(closeButton)</span><br><span class="line">        containerView.addSubview(beautyButton)</span><br><span class="line">        containerView.addSubview(cameraButton)</span><br><span class="line">        containerView.addSubview(startLiveButton)</span><br><span class="line">        </span><br><span class="line">        cameraButton.addTarget(self, action: <span class="comment">#selector(didTappedCameraButton(_:)), for:.touchUpInside)</span></span><br><span class="line">        beautyButton.addTarget(self, action: <span class="comment">#selector(didTappedBeautyButton(_:)), for: .touchUpInside)</span></span><br><span class="line">        startLiveButton.addTarget(self, action: <span class="comment">#selector(didTappedStartLiveButton(_:)), for: .touchUpInside)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func <span class="function"><span class="title">didReceiveMemoryWarning</span></span>() &#123;</span><br><span class="line">        super.didReceiveMemoryWarning()</span><br><span class="line">        // Dispose of any resources that can be recreated.</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //MARK: AccessAuth</span><br><span class="line">    </span><br><span class="line">    func requestAccessForVideo() -&gt; Void &#123;</span><br><span class="line">        <span class="built_in">let</span> status = AVCaptureDevice.authorizationStatus(<span class="keyword">for</span>: AVMediaType.video);</span><br><span class="line">        switch status  &#123;</span><br><span class="line">        // 许可对话没有出现，发起授权许可</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.notDetermined:</span><br><span class="line">            AVCaptureDevice.requestAccess(<span class="keyword">for</span>: AVMediaType.video, completionHandler: &#123; (granted) <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">if</span>(granted)&#123;</span><br><span class="line">                    DispatchQueue.main.async &#123;</span><br><span class="line">                        self.session.running = <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        // 已经开启授权，可继续</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.authorized:</span><br><span class="line">            session.running = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        // 用户明确地拒绝授权，或者相机设备无法访问</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.denied: <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.restricted:<span class="built_in">break</span>;</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func requestAccessForAudio() -&gt; Void &#123;</span><br><span class="line">        <span class="built_in">let</span> status = AVCaptureDevice.authorizationStatus(<span class="keyword">for</span>:AVMediaType.audio)</span><br><span class="line">        switch status  &#123;</span><br><span class="line">        // 许可对话没有出现，发起授权许可</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.notDetermined:</span><br><span class="line">            AVCaptureDevice.requestAccess(<span class="keyword">for</span>: AVMediaType.audio, completionHandler: &#123; (granted) <span class="keyword">in</span></span><br><span class="line">                </span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        // 已经开启授权，可继续</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.authorized:</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        // 用户明确地拒绝授权，或者相机设备无法访问</span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.denied: <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">case</span> AVAuthorizationStatus.restricted:<span class="built_in">break</span>;</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //MARK: - Callbacks</span><br><span class="line">    </span><br><span class="line">    // 回调</span><br><span class="line">    func liveSession(_ session: LFLiveSession?, debugInfo: LFLiveDebug?) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"debugInfo: \(debugInfo?.currentBandwidth)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func liveSession(_ session: LFLiveSession?, errorCode: LFLiveSocketErrorCode) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"errorCode: \(errorCode.rawValue)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func liveSession(_ session: LFLiveSession?, liveStateDidChange state: LFLiveState) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"liveStateDidChange: \(state.rawValue)"</span>)</span><br><span class="line">        switch state &#123;</span><br><span class="line">        <span class="keyword">case</span> LFLiveState.ready:</span><br><span class="line">            stateLabel.text = <span class="string">"未连接"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LFLiveState.pending:</span><br><span class="line">            stateLabel.text = <span class="string">"连接中"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LFLiveState.start:</span><br><span class="line">            stateLabel.text = <span class="string">"已连接"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LFLiveState.error:</span><br><span class="line">            stateLabel.text = <span class="string">"连接错误"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LFLiveState.stop:</span><br><span class="line">            stateLabel.text = <span class="string">"未连接"</span></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        default:</span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //MARK: - Events</span><br><span class="line">    </span><br><span class="line">    // 开始直播</span><br><span class="line">    @objc func didTappedStartLiveButton(_ button: UIButton) -&gt; Void &#123;</span><br><span class="line">        startLiveButton.isSelected = !startLiveButton.isSelected;</span><br><span class="line">        <span class="keyword">if</span> (startLiveButton.isSelected) &#123;</span><br><span class="line">            startLiveButton.setTitle(<span class="string">"结束直播"</span>, <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">            <span class="built_in">let</span> stream = LFLiveStreamInfo()</span><br><span class="line">            stream.url = <span class="string">"rtmp://192.168.1.148:1935/rtmplive/room"</span></span><br><span class="line">            session.startLive(stream)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startLiveButton.setTitle(<span class="string">"开始直播"</span>, <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">            session.stopLive()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 美颜</span><br><span class="line">    @objc func didTappedBeautyButton(_ button: UIButton) -&gt; Void &#123;</span><br><span class="line">        session.beautyFace = !session.beautyFace;</span><br><span class="line">        beautyButton.isSelected = !session.beautyFace</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 摄像头</span><br><span class="line">    @objc func didTappedCameraButton(_ button: UIButton) -&gt; Void &#123;</span><br><span class="line">        <span class="built_in">let</span> devicePositon = session.captureDevicePosition;</span><br><span class="line">        session.captureDevicePosition = (devicePositon == AVCaptureDevice.Position.back) ? AVCaptureDevice.Position.front : AVCaptureDevice.Position.back;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 关闭</span><br><span class="line">    func didTappedCloseButton(_ button: UIButton) -&gt; Void  &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //MARK: - Getters and Setters</span><br><span class="line">    </span><br><span class="line">    //  默认分辨率368 ＊ 640  音频：44.1 iphone6以上48  双声道  方向竖屏</span><br><span class="line">    var session: LFLiveSession = &#123;</span><br><span class="line">        <span class="built_in">let</span> audioConfiguration = LFLiveAudioConfiguration.defaultConfiguration(<span class="keyword">for</span>: LFLiveAudioQuality.high)</span><br><span class="line">        <span class="built_in">let</span> videoConfiguration = LFLiveVideoConfiguration.defaultConfiguration(<span class="keyword">for</span>: LFLiveVideoQuality.low3)</span><br><span class="line">        <span class="built_in">let</span> session = LFLiveSession(audioConfiguration: audioConfiguration, videoConfiguration: videoConfiguration)</span><br><span class="line">        <span class="built_in">return</span> session!</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 视图</span><br><span class="line">    var containerView: UIView = &#123;</span><br><span class="line">        <span class="built_in">let</span> containerView = UIView(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height))</span><br><span class="line">        containerView.backgroundColor = UIColor.clear</span><br><span class="line">        containerView.autoresizingMask = [UIView.AutoresizingMask.flexibleHeight, UIView.AutoresizingMask.flexibleHeight]</span><br><span class="line">        <span class="built_in">return</span> containerView</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 状态Label</span><br><span class="line">    var stateLabel: UILabel = &#123;</span><br><span class="line">        <span class="built_in">let</span> stateLabel = UILabel(frame: CGRect(x: 20, y: 20, width: 80, height: 40))</span><br><span class="line">        stateLabel.text = <span class="string">"未连接"</span></span><br><span class="line">        stateLabel.textColor = UIColor.white</span><br><span class="line">        stateLabel.font = UIFont.systemFont(ofSize: 14)</span><br><span class="line">        <span class="built_in">return</span> stateLabel</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 关闭按钮</span><br><span class="line">    var closeButton: UIButton = &#123;</span><br><span class="line">        <span class="built_in">let</span> closeButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 10 - 44, y: 20, width: 44, height: 44))</span><br><span class="line">        closeButton.setImage(UIImage(named: <span class="string">"close_preview"</span>), <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">        <span class="built_in">return</span> closeButton</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 摄像头</span><br><span class="line">    var cameraButton: UIButton = &#123;</span><br><span class="line">        <span class="built_in">let</span> cameraButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 54 * 2, y: 20, width: 44, height: 44))</span><br><span class="line">        cameraButton.setImage(UIImage(named: <span class="string">"camra_preview"</span>), <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">        <span class="built_in">return</span> cameraButton</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 摄像头</span><br><span class="line">    var beautyButton: UIButton = &#123;</span><br><span class="line">        <span class="built_in">let</span> beautyButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 54 * 3, y: 20, width: 44, height: 44))</span><br><span class="line">        beautyButton.setImage(UIImage(named: <span class="string">"camra_beauty"</span>), <span class="keyword">for</span>: UIControl.State.selected)</span><br><span class="line">        beautyButton.setImage(UIImage(named: <span class="string">"camra_beauty_close"</span>), <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">        <span class="built_in">return</span> beautyButton</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    // 开始直播按钮</span><br><span class="line">    var startLiveButton: UIButton = &#123;</span><br><span class="line">        <span class="built_in">let</span> startLiveButton = UIButton(frame: CGRect(x: 30, y: UIScreen.main.bounds.height - 50, width: UIScreen.main.bounds.width - 10 - 44, height: 44))</span><br><span class="line">        startLiveButton.layer.cornerRadius = 22</span><br><span class="line">        startLiveButton.setTitleColor(UIColor.black, <span class="keyword">for</span>:UIControl.State())</span><br><span class="line">        startLiveButton.setTitle(<span class="string">"开始直播"</span>, <span class="keyword">for</span>: UIControl.State())</span><br><span class="line">        startLiveButton.titleLabel!.font = UIFont.systemFont(ofSize: 14)</span><br><span class="line">        startLiveButton.backgroundColor = UIColor(red: 50/255.0, green: 32/255.0, blue: 245/255.0, alpha: 1)//colorLiteralRed: 50, green: 32, blue: 245, alpha: 1</span><br><span class="line">        <span class="built_in">return</span> startLiveButton</span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直播系列一、创建本地rtmp服务器</title>
      <link href="/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0rtmp%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0rtmp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="在网上搜索参考了大量文章，解决了N多Bug-终于实现了直播功能"><a href="#在网上搜索参考了大量文章，解决了N多Bug-终于实现了直播功能" class="headerlink" title="在网上搜索参考了大量文章，解决了N多Bug,终于实现了直播功能"></a>在网上搜索参考了大量文章，解决了N多Bug,终于实现了直播功能</h4><blockquote><p>nginx是非常优秀的开源服务器，用它来做hls或者rtmp流媒体服务器是非常不错的选择</p></blockquote><h4 id="1、安装Homebrow"><a href="#1、安装Homebrow" class="headerlink" title="1、安装Homebrow"></a>1、安装Homebrow</h4><p>（1）执行克隆命令,github的项目(<a href="https://github.com/denji/homebrew-nginx" target="_blank" rel="noopener">https://github.com/denji/homebrew-nginx</a>)</p><pre><code>brew tap denji/nginx</code></pre><blockquote><p>注意<code>brew tap homebrew/nginx</code>报下面的错误,<code>homebrew/nginx</code>已经弃用. 报错：<code>Error: homebrew/nginx was deprecated. This tap is now empty as all its formulae were migrated</code>.</p></blockquote><p>（2）执行安装命令:</p><pre><code>brew install nginx-full --with-rtmp-module  </code></pre><p>（3）至此nginx和rtmp模块就安装好了，下面开始来配置nginx的rtmp模块<br> 接下来看一下nginx安装在什么地方:</p><pre><code>brew info nginx-full  </code></pre><p><em>打印信息</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">The default port has been set in &#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx&#x2F;nginx.conf to 8080 so that</span><br><span class="line">nginx can run without sudo.</span><br><span class="line"></span><br><span class="line">nginx will load all files in &#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx&#x2F;servers&#x2F;.</span><br><span class="line"></span><br><span class="line">- Tips -</span><br><span class="line">Run port 80:</span><br><span class="line"> $ sudo chown root:wheel &#x2F;usr&#x2F;local&#x2F;opt&#x2F;nginx-full&#x2F;bin&#x2F;nginx</span><br><span class="line"> $ sudo chmod u+s &#x2F;usr&#x2F;local&#x2F;opt&#x2F;nginx-full&#x2F;bin&#x2F;nginx</span><br><span class="line">Reload config:</span><br><span class="line"> $ nginx -s reload</span><br><span class="line">Reopen Logfile:</span><br><span class="line"> $ nginx -s reopen</span><br><span class="line">Stop process:</span><br><span class="line"> $ nginx -s stop</span><br><span class="line">Waiting on exit process</span><br><span class="line"> $ nginx -s quit</span><br><span class="line"></span><br><span class="line">To have launchd start denji&#x2F;nginx&#x2F;nginx-full now and restart at login:</span><br><span class="line">  brew services start denji&#x2F;nginx&#x2F;nginx-full</span><br><span class="line">Or, if you don&#39;t want&#x2F;need a background service you can just run:</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure><p>nginx安装所在位置:</p><pre><code>/usr/local/opt/nginx-full/bin/nginx</code></pre><p>nginx配置文件所在位置:</p><pre><code>/usr/local/etc/nginx/nginx.conf</code></pre><p>（4）启动nginx,执行命令:</p><pre><code>sudo  nginx</code></pre><h4 id="2、测试nginx："><a href="#2、测试nginx：" class="headerlink" title="2、测试nginx："></a>2、测试nginx：</h4><pre><code>在浏览器中打开如下地址：http://localhost:8080入过</code></pre><p>如果出现<code>Welcome to nginx!</code>,说明安装成功.</p><p>如果终端上提示：</p><pre><code>nginx: [emerg] bind() to 0.0.0.0:8080 failed (48: Address already in use)  </code></pre><p>则表示8080端口被占用了, 查看端口PID</p><pre><code>lsof -i tcp:8080  </code></pre><p>kill掉占用8080端口的PID</p><pre><code>kill 9603（这里替换成占用8080端口的PID）  </code></pre><h4 id="3、重新加载nginx的配置文件"><a href="#3、重新加载nginx的配置文件" class="headerlink" title="3、重新加载nginx的配置文件"></a>3、重新加载nginx的配置文件</h4><p>（1）修改nginx.conf这个配置文件，配置rtmp<br> 复制nginx配置文件所在位置:</p><pre><code>vi /usr/local/etc/nginx/nginx.conf  </code></pre><p>（2）执行上面命令会直接编辑,或者直接前往当前文件用记事本打开.<br> 滚动到最后面(最后一个}后面即可，不能在{}里面)，添加一下代码，进行配置，最后记得保存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rtmp &#123;  </span><br><span class="line">  server &#123;  </span><br><span class="line">      listen 1935;  </span><br><span class="line">    #直播流配置  </span><br><span class="line">      application rtmplive &#123;  </span><br><span class="line">          live on;  </span><br><span class="line">          #为 rtmp 引擎设置最大连接数。默认为 off  </span><br><span class="line">          max_connections 1024;  </span><br><span class="line">       &#125;  </span><br><span class="line">      application hls&#123;  </span><br><span class="line">          live on;  </span><br><span class="line">          hls on;  </span><br><span class="line">          hls_path &#x2F;usr&#x2F;local&#x2F;var&#x2F;www&#x2F;hls;  </span><br><span class="line">          hls_fragment 1s;  </span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）编辑完成之后,执行一下重新加载配置文件命令:</p><pre><code>sudo nginx -s reload</code></pre><blockquote><p>需要输入开机密码 sudo不加的话会报错： <code>nginx: [alert] could not open error log file: open() &quot;/usr/local/var/log/nginx/error.log&quot; failed (13: Permission denied)</code>该命令执行后会出来一个弹框询问是否允许 nginx 加入到网络中，选择允许即可。</p></blockquote><p>（4）重启nginx：</p><pre><code>sudo /usr/local/opt/nginx-full/bin/nginx -s reload  </code></pre><p>PS：如果你之前不是按照我上面的方法按照的 nginx，在执行 sudo nginx -s reload 时报了如下错，建议你卸载 nginx后按照我上面的步骤重新安装nginx。<br> nginx: [emerg] unknown directive “rtmp” in /usr/local/etc/nginx/nginx.conf:119</p><p><strong>nginx常用方法:</strong></p><blockquote><p>出现权限不足的错误提示时，命令前加上 sudo</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">重新加载配置文件:  nginx -s reload</span><br><span class="line">重新加载日志:     nginx -s reopen </span><br><span class="line">停止 nginx:      nginx -s stop  </span><br><span class="line">有序退出 nginx:   nginx -s quit</span><br></pre></td></tr></table></figure><h4 id="4、安装ffmepg工具"><a href="#4、安装ffmepg工具" class="headerlink" title="4、安装ffmepg工具"></a>4、安装ffmepg工具</h4><pre><code>brew install ffmpeg</code></pre><h4 id="5、本地推流"><a href="#5、本地推流" class="headerlink" title="5、本地推流"></a>5、本地推流</h4><p>(1)、搭建本地视频直播，比如电脑上面有很多电影，我们可以通过推流的形式实现实时直播：</p><p>A：在电脑上播放推流内容<br> 安装一个支持rtmp协议的视频播放器，Mac下可以用VLC<br> 下载<a href="http://soft.macx.cn/3164.htm" target="_blank" rel="noopener">VLC</a></p><p> 本地下载一个视频文件路径为 /Users/iOS002/Desktop/loginmovie.mp4</p><p> 执行以下命令:</p><pre><code>ffmpeg -re -i /Users/iOS002/Desktop/loginmovie.mp4  -vcodec libx264 -acodec aac -strict -2 -f flv rtmp://localhost:1935/rtmplive/room</code></pre><p>用vlc 然后打开 VLC 中 的 file – Open Network, 直接输入代码中的 url:</p><pre><code>rtmp://localhost:1935/rtmplive/room</code></pre><p>即可以通过VLC来播放终端中实时推过来的 RTMP流。</p><p>B：通过手机观看电脑的推流</p><p> 通过集成 ijkplayer 把地址换成推流的地址即可观看</p><p> 播放端用的针对RTMP优化过的ijkplayer，ijkplayer是基于FFmpeg的跨平台播放器，这个开源项目已经被多个 App 使用，其中映客、美拍和斗鱼使用了 ijkplayer。</p><p>(2)、桌面录制或者分享</p><pre><code>ffmpeg -f avfoundation -i &quot;1&quot; -vcodec libx264 -preset ultrafast -acodec libfaac -f flv rtmp://localhost:1935/rtmplive/room </code></pre><p>(3)、桌面+麦克风</p><pre><code>ffmpeg -f avfoundation -i &quot;1:0&quot; -vcodec libx264 -preset ultrafast -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp://localhost:1935/rtmplive/room</code></pre><p>(4)、桌面+麦克风，并且还要摄像头拍摄到自己</p><pre><code>ffmpeg -f avfoundation -framerate 30 -i &quot;1:0&quot; \-f avfoundation -framerate 30 -video_size 640x480 -i &quot;0&quot; \-c:v libx264 -preset ultrafast \-filter_complex &apos;overlay=main_w-overlay_w-10:main_h-overlay_h-10&apos; -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp://localhost:2016/rtmplive/room  </code></pre><h4 id="6、手机推流"><a href="#6、手机推流" class="headerlink" title="6、手机推流"></a>6、手机推流</h4><p>可以用  LFLiveKit 集成到工程进行推流，LFLiveKit已经帮我们实现了视频采集、后台录制、美颜功能、支持h264、AAC编码，动态改变速率，RTMP传输等，我们开发的时候就很简单了只需把localhost:8080换成自己电脑的ip地址即可:</p><pre><code>rtmp://10.0.0.17:1935/rtmplive/room</code></pre><p>注意通过网络查看电脑的局域网 IP替换掉 localhost 即可。</p><p>A：通过VLC观看手机的推流</p><p> 打开手机直播后，然后在电脑上打开VLC（同上），就能实现手机推流，在电脑上拉流播放了！！(注：手机需要和电脑连接同一网络！)</p><p>B：通过手机观看手机的推流（这也就是市面上的那些直播App的最终实现形式了）</p><p> 通过集成 ijkplayer 把地址换成推流的地址即可观看。</p><p>PS：一个很隐蔽的报错：</p><p>如果你发现你的推流地址和拉流地址在电脑上都是好好的，但是通过手机实现的时候就是报错，那么估计就是因为Mac防火墙的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR: PILI_RTMP_Connect0, failed to connect socket. 60 (Operation timed out)</span><br><span class="line">ERROR: WriteN, PILI_RTMP send error 9, Bad file descriptor, (140 bytes)</span><br><span class="line">ERROR: PILI_RTMP_Connect0, failed to connect socket. 60 (Operation timed out)</span><br><span class="line">ERROR: WriteN, PILI_RTMP send error 9, Bad file descriptor, (140 bytes)</span><br></pre></td></tr></table></figure><p>关闭 Mac 的防火墙即可解决问题。</p><pre><code>偏好设置-&gt;安全性与隐私-&gt;防火墙</code></pre>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 直播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shared_preferences数据存储</title>
      <link href="/2019/10/19/shared_preferences%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
      <url>/2019/10/19/shared_preferences%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="shared-preferences库"><a href="#shared-preferences库" class="headerlink" title="shared_preferences库"></a>shared_preferences库</h3><blockquote><p>shared_preferences库同时支持Android和ios平台,存键值对信息，进行数据本地持久化存储。</p></blockquote><h4 id="引用方法"><a href="#引用方法" class="headerlink" title="引用方法"></a>引用方法</h4><ol><li><p>在pubspec.yaml文件中添加依赖</p><p> <code>shared_preferences: ^0.5.3+4</code><a href="https://pub.dev/packages/shared_preferences" target="_blank" rel="noopener">-&gt;查看最新版本</a></p></li><li><p>执行$ flutter packages get命令 下载插件</p></li><li><p>在使用的文件中导入：</p><p> <code>import &#39;package:shared_preferences/shared_preferences.dart&#39;;</code></p></li></ol><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences sharedPreferences &#x3D; await SharedPreferences.getInstance();</span><br><span class="line"></span><br><span class="line">sharedPreferences.setString(&quot;name&quot;, &quot;hehe&quot;);</span><br><span class="line">sharedPreferences.setInt(&quot;age&quot;, 18);</span><br><span class="line">sharedPreferences.setDouble(&quot;height&quot;, 1.72);</span><br><span class="line">sharedPreferences.setBool(&quot;sex&quot;, true);&#x2F;&#x2F;true 表示男 false表示女</span><br><span class="line">sharedPreferences.setStringList(&quot;like&quot;, [&quot;MV&quot;,&quot;Music&quot;,&quot;Pic&quot;]);</span><br><span class="line"></span><br><span class="line">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;get****(&quot;key&quot;)取出存储的数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">print(&quot;姓名:&quot;+ sharedPreferences.getString(&quot;name&quot;));</span><br><span class="line">print(&quot;年龄:&quot; + sharedPreferences.getInt(&quot;age&quot;).toString());</span><br><span class="line">print(&quot;身高:&quot;+ sharedPreferences.getDouble(&quot;height&quot;).toString());</span><br><span class="line">print(&quot;性别:&quot;+ ((sharedPreferences.getBool(&quot;sex&quot;) &#x3D;&#x3D; true) ? &quot;男&quot;:&quot;女&quot;));</span><br><span class="line">print(&quot;爱好:&quot;+ sharedPreferences.getStringList(&quot;like&quot;).toString());</span><br><span class="line"></span><br><span class="line">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;getKeys()取出存储的所有key值&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">print(sharedPreferences.getKeys());</span><br><span class="line"></span><br><span class="line">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;set***(&quot;key&quot;)给已经存在的key重新赋值&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">print(&quot;姓名:&quot;+ sharedPreferences.getString(&quot;name&quot;));</span><br><span class="line">sharedPreferences.setString(&quot;name&quot;, &quot;feiyv&quot;);</span><br><span class="line">print(&quot;姓名:&quot;+ sharedPreferences.getString(&quot;name&quot;));</span><br><span class="line"></span><br><span class="line">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;containsKey(&quot;key&quot;)判断存储的是否有某个Key值&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">print(&quot;name是否存在：&quot; + sharedPreferences.containsKey(&quot;name&quot;));</span><br><span class="line">print(&quot;rename是否存在：&quot; + sharedPreferences.containsKey(&quot;rename&quot;));</span><br><span class="line"></span><br><span class="line">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;remove(&quot;key&quot;)删除单个Key数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">print(&quot;年龄:&quot; + sharedPreferences.getInt(&quot;age&quot;).toString());</span><br><span class="line">sharedPreferences.remove(&quot;age&quot;);</span><br><span class="line">print(&quot;年龄:&quot; + sharedPreferences.getInt(&quot;age&quot;).toString());</span><br><span class="line"></span><br><span class="line">print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;clear清除所有数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">sharedPreferences.clear();</span><br><span class="line">print(&quot;sharedPreferences.clear();&quot;);</span><br><span class="line">print(&quot;name是否存在：&quot; + sharedPreferences.containsKey(&quot;name&quot;).toString());</span><br><span class="line">print(&quot;所有的key值：&quot;+ sharedPreferences.getKeys().toString());</span><br></pre></td></tr></table></figure><h4 id="打印数据："><a href="#打印数据：" class="headerlink" title="打印数据："></a>打印数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flutter: &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;get****(&quot;key&quot;)取出存储的数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">flutter: 姓名:hehe</span><br><span class="line">flutter: 年龄:18</span><br><span class="line">flutter: 身高:1.72</span><br><span class="line">flutter: 性别:男</span><br><span class="line">flutter: 爱好:[MV, Music, Pic]</span><br><span class="line"></span><br><span class="line">flutter: &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;getKeys()取出存储的所有key值&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">flutter: &#123;name, age, height, sex, like&#125;</span><br><span class="line"></span><br><span class="line">flutter: &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;set****(&quot;key&quot;)给已经存在的key重新赋值&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">flutter: 姓名:hehe</span><br><span class="line">flutter: 姓名:feiyv</span><br><span class="line"></span><br><span class="line">flutter: &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;containsKey(&quot;key&quot;)判断存储的是否有某个Key值&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">flutter: name是否存在：true</span><br><span class="line">flutter: rename是否存在：false</span><br><span class="line"></span><br><span class="line">flutter: &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;remove(&quot;key&quot;)删除单个Key数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">flutter: 年龄:18</span><br><span class="line">flutter: 年龄:null</span><br><span class="line"></span><br><span class="line">flutter: &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;clear清除所有数据&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">flutter: sharedPreferences.clear();</span><br><span class="line">flutter: name是否存在：false</span><br><span class="line">flutter: 所有的key值：&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shared_preferences </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>path_provider获取系统目录</title>
      <link href="/2019/10/13/path_provider%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/"/>
      <url>/2019/10/13/path_provider%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="PathProvider-插件"><a href="#PathProvider-插件" class="headerlink" title="PathProvider 插件"></a>PathProvider 插件</h3><blockquote><p>PathProvider 访问设备文件系统上的常用位置。</p></blockquote><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><ol><li><p>在pubspec.yaml文件中添加 PathProvider 插件</p><p><code>path_provider: ^*.*.*</code><a href="https://pub.dartlang.org/packages/path_provider" target="_blank" rel="noopener">查看最新版本</a></p></li><li><p>在文件中导入：</p><p><code>import &#39;package:path_provider/path_provider.dart&#39;;</code></p></li></ol><ol><li><p><code>DocumentsDirectory</code></p><blockquote><p> 文档目录，用于存储只有自己可以访问的文件。只有当应用程序被卸载时，系统才会清除该目录。在<code>iOS</code>上，这对应于<code>NSDocumentDirectory</code>。在<code>Android</code>上，这是<code>AppData</code>目录。 </p></blockquote><p> <code>String docDir = (await getApplicationDocumentsDirectory()).path;</code></p></li><li><p><code>TemporaryDirectory</code></p><blockquote><p>系统可随时清除的临时目录（缓存）。在<code>iOS</code>上，这对应于<code>NSTemporaryDirectory()</code> 返回的值。在<code>Android</code>上，这是<code>getCacheDir()</code>返回的目录。</p></blockquote><p> <code>String tempDir = (await getTemporaryDirectory()).path;</code></p></li><li><p><code>SupportDirectory</code></p><blockquote><p>在iOS上，它使用<code>NSApplicationSupportDirectory</code> 来获取目录。在Android上，这是<code>getFilesDir</code>返回的目录。</p></blockquote><p> <code>String supportDir = (await getApplicationSupportDirectory()).path;</code></p></li><li><p><code>ExternalStorageDirectory</code></p><blockquote><p>获取存储卡路径,仅在<code>Android</code>上中有效，<code>iOS</code>系统无此方法，可以通过<code>Platform.isIOS</code>来判断当前系统是否是<code>iOS</code>系统</p></blockquote><p> <code>String extStorageDir = (await getExternalStorageDirectory()).path;</code></p></li></ol><p><a href="https://github.com/flutter/plugins/tree/master/packages/path_provider" target="_blank" rel="noopener">PathProvider-&gt;GitHub</a></p><p><a href="https://pub.dartlang.org/packages/path_provider" target="_blank" rel="noopener">PathProvider-&gt;Pub</a></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> path_provider </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发之Text Widget</title>
      <link href="/2019/08/21/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BText%20Widget/"/>
      <url>/2019/08/21/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BText%20Widget/</url>
      
        <content type="html"><![CDATA[<h3 id="Text-Widget"><a href="#Text-Widget" class="headerlink" title="Text Widget"></a>Text Widget</h3><blockquote><p>“文本”小组件显示单个样式的文本字符串。字符串可能会跨越多行，也可能全部显示在同一行上，具体取决于布局约束。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">   &#x2F;&#x2F;显示的文本</span><br><span class="line">  &#39;Hello, $_name! How are you?&#39;,</span><br><span class="line">  &#x2F;&#x2F;对齐的方式</span><br><span class="line">  textAlign: TextAlign.center,</span><br><span class="line">  </span><br><span class="line">  overflow: TextOverflow.ellipsis,</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;文本样式</span><br><span class="line">  style: TextStyle(fontWeight: FontWeight.bold),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>下面使用Text.rich构造函数，Text小部件可以显示具有不同样式TextSpans的段落。下面的示例显示每个单词具有不同样式的“Hello beautiful world”。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const Text.rich(</span><br><span class="line">  TextSpan(</span><br><span class="line">    text: &#39;Hello&#39;, &#x2F;&#x2F; default text style</span><br><span class="line">    children: &lt;TextSpan&gt;[</span><br><span class="line">      TextSpan(text: &#39; beautiful &#39;, style: TextStyle(fontStyle: FontStyle.italic)),</span><br><span class="line">      TextSpan(text: &#39;world&#39;, style: TextStyle(fontWeight: FontWeight.bold)),</span><br><span class="line">    ],</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h4><p>要使Text对触摸事件做出反应，请使用GestureDetector.onTap处理程序将其包装在GestureDetector小部件中。</p><p>在材料设计应用程序中，请考虑使用FlatButton，或者如果不合适，至少使用InkWell而不是GestureDetector。</p><p>要使文本的各个部分具有交互性，请使用RichText并将TapGestureRecognizer指定为文本相关部分的TextSpan.recognizer。</p><blockquote><p><a href="https://api.flutter.dev/flutter/widgets/RichText-class.html" target="_blank" rel="noopener">RichText</a>，它可以让您更好地控制文本样式。<br><a href="https://api.flutter.dev/flutter/widgets/DefaultTextStyle-class.html" target="_blank" rel="noopener">DefaultTextStyle</a>，用于设置Text小部件的默认样式。</p></blockquote><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">Text(String data, &#123; </span><br><span class="line">           Key key, </span><br><span class="line">           TextStyle style, </span><br><span class="line">           StrutStyle strutStyle,</span><br><span class="line">           TextAlign textAlign,</span><br><span class="line">           TextDirection textDirection,</span><br><span class="line">           Locale locale, </span><br><span class="line">           bool softWrap, </span><br><span class="line">           TextOverflow overflow, </span><br><span class="line">           double textScaleFactor, </span><br><span class="line">           int maxLines, </span><br><span class="line">           String semanticsLabel </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Text.rich(TextSpan textSpan, &#123; </span><br><span class="line">                   Key key, </span><br><span class="line">                   TextStyle style,</span><br><span class="line">                   StrutStyle strutStyle,</span><br><span class="line">                   TextAlign textAlign,</span><br><span class="line">                   TextDirection textDirection, </span><br><span class="line">                   Locale locale, </span><br><span class="line">                   bool softWrap, </span><br><span class="line">                   TextOverflow overflow, </span><br><span class="line">                   double textScaleFactor, </span><br><span class="line">                   int maxLines, </span><br><span class="line">                   String semanticsLabel </span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li><p>data → String   </p><ul><li><em>要显示的文字</em></li></ul></li><li><p>locale → Locale</p><ul><li><em>用于在可以以不同方式呈现相同Unicode字符时选择字体，具体取决于区域设置</em></li><li><em>很少需要设置此属性。默认情况下，其值继承自包含Localizations.localeOf（context）的应用程序</em></li><li><em>有关更多信息，请参见<a href="https://api.flutter.dev/flutter/widgets/Text/locale.html" target="_blank" rel="noopener">RenderParagraph.locale</a>。</em></li></ul></li><li><p>maxLines→int</p><ul><li><em>文本要跨越的可选最大行数，必要时包装。如果文本超过给定的行数，则会根据溢出将其截断</em></li></ul></li><li><p>overflow→TextOverflow</p><ul><li><em>如何处理视觉溢出</em></li><li>TextOverflow枚举<ul><li>clip→const TextOverflow<br>剪切溢出的文本以修复其容器。<br>const TextOverflow（0）</li><li>ellipsis→const TextOverflow<br>将溢出的文本淡化为透明。<br>const TextOverflow（1）</li><li>ellipsis→const TextOverflow<br>使用省略号表示文本已溢出。<br>const TextOverflow（2）</li><li>visible→const TextOverflow<br>在其容器外部渲染溢出的文本。<br>const TextOverflow（3）</li><li>values→const List <TextOverflow><br>此枚举中值的常量列表，按其声明顺序排列。<br>const List <TextOverflow></li></ul></li></ul></li><li><p>semanticsLabel→String</p><ul><li><em>此文本的替代语义标签</em></li><li><em>如果存在, 这个小部件的语义将包含此值, 而不是实际的文本。这将覆盖任何直接应用于 TextSpans 的语义标签</em></li><li><em>这对于用全文值替换缩写或短文很有用: <code>Text(r&#39;$$&#39;, semanticsLabel: &#39;Double dollars&#39;)</code></em></li></ul></li><li><p>softWrap→bool</p><ul><li><em>文本是否应该在软换行符处中断</em></li><li><em>如果是false, 文本中的字形将被定位为无限的水平空间</em></li></ul></li><li><p>strutStyle→StrutStyle</p><ul><li><p><em>要使用的strut风格。 Strut样式定义了strut，它设置了最小垂直布局度量</em></p></li><li><p><em>允许省略或提供 null 将禁用strut. 为 StrutStyle 的任何属性提供 null 将导致使用默认值</em></p></li><li><p><em>强烈建议至少指定一个字体. 有关详细信息, 请参见 <a href="https://api.flutter.dev/flutter/painting/StrutStyle-class.html" target="_blank" rel="noopener">StrutStyle</a>。</em></p></li><li><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   const Text(</span><br><span class="line">        &#39;Hello, world!\nSecond line!&#39;,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">        fontSize: 10,</span><br><span class="line">        fontFamily: &#39;Raleway&#39;,</span><br><span class="line">    ),</span><br><span class="line">  strutStyle: StrutStyle(</span><br><span class="line">        fontFamily: &#39;Roboto&#39;,</span><br><span class="line">        fontSize: 30,</span><br><span class="line">        height: 1.5,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li></ul></li><li><p>style→TextStyle</p><ul><li><em>如果为非null，则为此文本使用的样式</em></li><li><em>如果样式的 “继承” 属性为 true, 则该样式将与最接近的封闭默认文本样式合并</em></li><li><em>否则, 该样式将替换最接近的封闭的默认文本样式</em></li></ul></li><li><p>textAlign→TextAlign</p><ul><li><em>文本应如何水平对齐</em></li><li><em>TextAlign 枚举</em><ul><li>left → const TextAlign 文本左对齐 const TextAlign(0)</li><li>right → const TextAlign 文本右对齐 const TextAlign(1)</li><li>center→ const TextAlign 文本中心对齐 const TextAlign(2)</li><li>justify → const TextAlign 拉伸以柔和的换行符结束的文本行, 以填充容器的宽度. 以硬线符结束的线条与起始边缘对齐。const TextAlign(3)</li><li>start → const TextAlign  文本开始处对齐 从左到右即为左边，从右到左即为右边 const TextAlign(4)</li><li>end → const TextAlign 文本结束处对齐 从左到右即为右边，从右到左即为左边 const TextAlign(5)</li><li>values → const List<TextAlign> 此枚举中值的常量列表，按其声明顺序排列。</li></ul></li></ul></li><li><p>textDirection→TextDirection</p><ul><li><em>文本的方向性</em></li><li><em>这也就解释为什么出现TextAlign.start和TextAlign.end等textAlign值</em></li><li><em>eg: 例如，如果数据是英语短语后跟希伯来语短语，则在TextDirection.ltr上下文中，英语短语将位于左侧，希伯来语短语位于其右侧，而在TextDirection.rtl上下文中，英语短语将 在右边，左边是希伯来语。</em></li></ul></li><li><p>textScaleFactor→double</p><ul><li><em>每个逻辑像素的字体像素数</em></li><li><em>例如，如果文本比例因子为1.5，则文本将比指定的字体大小大50％</em></li><li><em>作为textScaleFactor赋予构造函数的值。 如果为null，将使用从环境MediaQuery获取的MediaQueryData.textScaleFactor，如果范围内没有MediaQuery，则使用1.0。</em></li></ul></li><li><p>textSpan→TextSpan</p><ul><li><em>要显示为TextSpan的文本</em></li></ul></li><li><p>hashCode→int</p><ul><li><em>此对象的哈希码</em></li></ul></li><li><p>key→Key</p><ul><li><em>控制一个小部件如何替换树中的另一个小部件</em></li></ul></li><li><p>runtimeType→Type</p><ul><li><em>表示对象的运行时类型</em></li></ul></li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><p>build（BuildContext context）→Widget</p><ul><li><em>描述此窗口小部件表示的用户界面部分</em></li></ul></li><li><p>debugFillProperties（DiagnosticPropertiesBuilder properties）→void</p><ul><li><em>添加与节点关联的其他属性</em></li></ul></li><li><p>createElement（）→StatelessElement</p><ul><li><em>创建StatelessElement以管理此窗口小部件在树中的位置。 […]</em></li></ul></li><li><p>debugDescribeChildren（）→ List<DiagnosticsNode></p><ul><li><em>返回描述此节点的子节点的DiagnosticsNode对象列表。 […]</em></li></ul></li><li><p>noSuchMethod（Invocation invocation）→dynamic</p><ul><li><em>访问不存在的方法或属性时调用。 […]</em></li></ul></li><li><p>toDiagnosticsNode（{String name，DiagnosticsTreeStyle style}）→DiagnosticsNode</p><ul><li><em>返回调试工具和DiagnosticsNode.toStringDeep使用的对象的调试表示形式。 […]</em></li></ul></li><li><p>toString（{DiagnosticLevel minLevel：DiagnosticLevel.debug}）→字符串</p><ul><li><em>返回此对象的字符串表示形式</em></li></ul></li><li><p>toStringDeep（{String prefixLineOne：’’，String prefixOtherLines，DiagnosticLevel minLevel：DiagnosticLevel.debug}）→String</p><ul><li><em>返回此节点及其后代的字符串表示形式。 […]</em></li></ul></li><li><p>toStringShallow（{String joiner：’，’，DiagnosticLevel minLevel：DiagnosticLevel.debug}）→String</p><ul><li><em>返回对象的单行详细描述。 […]</em></li></ul></li><li><p>toStringShort（）→String</p><ul><li><em>这个小部件的简短文字描述</em></li></ul></li></ul><h3 id="Operators运算符"><a href="#Operators运算符" class="headerlink" title="Operators运算符"></a>Operators运算符</h3><ul><li>operator ==(dynamic other) → bool<ul><li><em>等值运算符。 […]</em></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter Text </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发之Scaffold Widget</title>
      <link href="/2019/08/20/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BScaffold%20Widget/"/>
      <url>/2019/08/20/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BScaffold%20Widget/</url>
      
        <content type="html"><![CDATA[<h3 id="Scaffold"><a href="#Scaffold" class="headerlink" title="Scaffold"></a>Scaffold</h3><blockquote><p>实现基本材料设计视觉布局结构</p></blockquote><h4 id="构造函数-Constructors"><a href="#构造函数-Constructors" class="headerlink" title="构造函数(Constructors)"></a>构造函数(Constructors)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(&#123;</span><br><span class="line">    Key key, </span><br><span class="line">    PreferredSizeWidget appBar, </span><br><span class="line">    Widget body,</span><br><span class="line">    Widget floatingActionButton, </span><br><span class="line">    FloatingActionButtonLocation floatingActionButtonLocation, FloatingActionButtonAnimator floatingActionButtonAnimator, </span><br><span class="line">    List&lt;Widget&gt; persistentFooterButtons, </span><br><span class="line">    Widget drawer, </span><br><span class="line">    Widget endDrawer, </span><br><span class="line">    Widget bottomNavigationBar, </span><br><span class="line">    Widget bottomSheet, </span><br><span class="line">    Color backgroundColor, </span><br><span class="line">    bool resizeToAvoidBottomPadding, </span><br><span class="line">    bool resizeToAvoidBottomInset, </span><br><span class="line">    bool primary: true, </span><br><span class="line">    DragStartBehavior drawerDragStartBehavior: DragStartBehavior.start,</span><br><span class="line">    bool extendBody: false </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="属性（Properties）"><a href="#属性（Properties）" class="headerlink" title="属性（Properties）"></a>属性（Properties）</h4><ul><li><p>appBar → PreferredSizeWidget</p><blockquote><p>顶部导航栏</p></blockquote></li><li><p>backgroundColor → Color</p><blockquote><p>背景色</p></blockquote></li><li><p>body → Widget</p><blockquote><p>Scaffold的主要内容</p></blockquote></li><li><p>bottomNavigationBar → Widget</p><blockquote><p>底部导航栏</p></blockquote></li><li><p>bottomSheet → Widget</p><blockquote><p>The persistent bottom sheet to display. […]</p></blockquote></li><li><p>drawer → Widget</p><blockquote><p>显示在容器侧面的面板，通常隐藏在移动设备上。从左到右（TextDirection.ltr）或从右到左（TextDirection.rtl）滑入</p></blockquote></li><li><p>drawerDragStartBehavior → DragStartBehavior</p><blockquote><p>确定处理拖动开始行为的方式</p></blockquote></li><li><p>endDrawer → Widget</p><blockquote><p>显示在身体侧面的面板，通常隐藏在移动设备上。从右到左（TextDirection.ltr）或从左到右（TextDirection.rtl）滑动</p></blockquote></li><li><p>extendBody → bool</p><blockquote><p>如果为true，并且指定了bottomNavigationBar或persistentFooterButtons，则body将延伸到Scaffold的底部，而不是仅延伸到bottomNavigationBar或persistentFooterButtons的顶部</p></blockquote></li><li><p>floatingActionButton → Widget</p><blockquote><p>显示在容器上方的按钮，位于右下角</p></blockquote></li><li><p>floatingActionButtonAnimator → FloatingActionButtonAnimator</p><blockquote><p>Animator将floatingActionButton移动到新的floatingActionButtonLocation</p></blockquote></li><li><p>floatingActionButtonLocation → FloatingActionButtonLocation</p><blockquote><p>负责确定floatingActionButton的去向</p></blockquote></li><li><p>persistentFooterButtons → List<Widget></p><blockquote><p>一组显示在脚手架底部的按钮</p></blockquote></li><li><p>primary → bool</p><blockquote><p>此脚手架是否显示在屏幕顶部</p></blockquote></li><li><p>resizeToAvoidBottomInset → bool</p><blockquote><p>如果为true，则body和scaffold的浮动小部件应自行调整大小，以避免屏幕键盘的高度由环境MediaQuery的MediaQueryData.viewInsets底部属性定义</p></blockquote></li><li><p>resizeToAvoidBottomPadding → bool</p><blockquote><p>不推荐使用此标志，请改用resizeToAvoidBottomInset,<br>@Deprecated（’使用resizeToAvoidBottomInset指定键盘出现时是否应调整主体大小’）</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter Scaffold </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发之Row Widget</title>
      <link href="/2019/08/18/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BRow%20Widget/"/>
      <url>/2019/08/18/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BRow%20Widget/</url>
      
        <content type="html"><![CDATA[<h3 id="Row"><a href="#Row" class="headerlink" title="Row"></a>Row</h3><blockquote><p>一个在水平数组中显示它的子级的小部件</p></blockquote><p>要使子级扩展以填充可用的水平空间, 请将子级包裹在一个展开的小部件中。</p><p><em>想使用竖直布局的，请前往-&gt;<a href=""> Column</a></em></p><p>如果你只有一个子级, 那就考虑用 “对齐” 或 “中心” 来定位子级。</p><blockquote><p>本示例将可用空间划分为三个 (水平), 并将文本置于前两个单元格中的中心, 并将 Flutter 图标置于第三个单元格的中心: </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Row(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Text(&#39;Deliver features faster&#39;, textAlign: TextAlign.center),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      child: Text(&#39;Craft beautiful UIs&#39;, textAlign: TextAlign.center),</span><br><span class="line">    ),</span><br><span class="line">    Expanded(</span><br><span class="line">      child: FittedBox(</span><br><span class="line">        fit: BoxFit.contain, &#x2F;&#x2F; otherwise the logo will be tiny</span><br><span class="line">        child: const FlutterLogo(),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>效果图：</strong><br><br><img src="%22%22" alt="Row"></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter Row </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发之RaisedButton Widget</title>
      <link href="/2019/08/17/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BRaisedButton%20Widget/"/>
      <url>/2019/08/17/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BRaisedButton%20Widget/</url>
      
        <content type="html"><![CDATA[<h3 id="RaisedButton"><a href="#RaisedButton" class="headerlink" title="RaisedButton"></a>RaisedButton</h3><blockquote><p>一个凸起的按钮</p></blockquote><p>如果<code>onPressed</code>（即为按钮点击事件）回调为<code>null</code>，则该按钮将被禁用，默认情况下将类似于<code>disabledColor</code>中的平面按钮。如果您尝试更改按钮的颜色并且没有任何效果，请检查您是否正在传递非<code>null</code> <code>onPressed</code>处理程序。</p><p>如果您想为点击提供墨水飞溅效果,但不想使用按钮,请考虑直接使用<a href="https://api.flutter.dev/flutter/material/InkWell-class.html" target="_blank" rel="noopener">inkwell</a>。</p><p>凸起按钮的最小尺寸为88.0×36.0，可以用<code>ButtonTheme</code>覆盖。</p><p><strong>此示例演示如何呈现禁用的RaisedButton，启用的RaisedButton以及最后一个具有渐变背景的RaisedButton:</strong></p><p><img src="https://flutter.github.io/assets-for-api-docs/assets/material/raised_button.png" alt="Img"></p><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  return Center(</span><br><span class="line">    child: Column(</span><br><span class="line">      mainAxisSize: MainAxisSize.min,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        const RaisedButton(</span><br><span class="line">          onPressed: null,</span><br><span class="line">          child: Text(</span><br><span class="line">            &#39;Disabled Button&#39;,</span><br><span class="line">            style: TextStyle(fontSize: 20)</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        const SizedBox(height: 30),</span><br><span class="line">        RaisedButton(</span><br><span class="line">          onPressed: () &#123;&#125;,</span><br><span class="line">          child: const Text(</span><br><span class="line">            &#39;Enabled Button&#39;,</span><br><span class="line">            style: TextStyle(fontSize: 20)</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        const SizedBox(height: 30),</span><br><span class="line">        RaisedButton(</span><br><span class="line">          onPressed: () &#123;&#125;,</span><br><span class="line">          textColor: Colors.white,</span><br><span class="line">          padding: const EdgeInsets.all(0.0),</span><br><span class="line">          child: Container(</span><br><span class="line">            decoration: const BoxDecoration(</span><br><span class="line">              gradient: LinearGradient(</span><br><span class="line">                colors: &lt;Color&gt;[</span><br><span class="line">                  Color(0xFF0D47A1),</span><br><span class="line">                  Color(0xFF1976D2),</span><br><span class="line">                  Color(0xFF42A5F5),</span><br><span class="line">                ],</span><br><span class="line">              ),</span><br><span class="line">            ),</span><br><span class="line">            padding: const EdgeInsets.all(10.0),</span><br><span class="line">            child: const Text(</span><br><span class="line">              &#39;Gradient Button&#39;,</span><br><span class="line">              style: TextStyle(fontSize: 20)</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造函数（Constructors）"><a href="#构造函数（Constructors）" class="headerlink" title="构造函数（Constructors）"></a>构造函数（Constructors）</h4><blockquote><p>创建一个填充按钮</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">RaisedButton(&#123;</span><br><span class="line">   Key key, </span><br><span class="line">   @required VoidCallback onPressed,</span><br><span class="line">   ValueChanged&lt;bool&gt; onHighlightChanged,</span><br><span class="line">   ButtonTextTheme textTheme, </span><br><span class="line">   Color textColor, </span><br><span class="line">   Color disabledTextColor, </span><br><span class="line">   Color color, </span><br><span class="line">   Color disabledColor, </span><br><span class="line">   Color highlightColor, </span><br><span class="line">   Color splashColor, </span><br><span class="line">   Brightness colorBrightness, </span><br><span class="line">   double elevation, </span><br><span class="line">   double highlightElevation, </span><br><span class="line">   double disabledElevation, </span><br><span class="line">   EdgeInsetsGeometry padding, </span><br><span class="line">   ShapeBorder shape, </span><br><span class="line">   Clip clipBehavior: Clip.none, MaterialTapTargetSize materialTapTargetSize, Duration animationDuration, </span><br><span class="line">   Widget child </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>从一对小部件创建一个填充按钮，用作按钮的图标和标签</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">RaisedButton.icon(&#123;</span><br><span class="line">   Key key, </span><br><span class="line">   @required VoidCallback onPressed,</span><br><span class="line">   ValueChanged&lt;bool&gt; onHighlightChanged,</span><br><span class="line">   ButtonTextTheme textTheme, </span><br><span class="line">   Color textColor, </span><br><span class="line">   Color disabledTextColor, </span><br><span class="line">   Color color, </span><br><span class="line">   Color disabledColor, </span><br><span class="line">   Color highlightColor, </span><br><span class="line">   Color splashColor, </span><br><span class="line">   Brightness colorBrightness, </span><br><span class="line">   double elevation, </span><br><span class="line">   double highlightElevation, </span><br><span class="line">   double disabledElevation, </span><br><span class="line">   ShapeBorder shape, </span><br><span class="line">   Clip clipBehavior, </span><br><span class="line">   MaterialTapTargetSize materialTapTargetSize,</span><br><span class="line">   Duration animationDuration, </span><br><span class="line">   @required Widget icon, </span><br><span class="line">   @required Widget label </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="属性（Properties）"><a href="#属性（Properties）" class="headerlink" title="属性（Properties）"></a>属性（Properties）</h4><ul><li><p><code>animationDuration → Duration</code></p><blockquote><p>动画的持续时间</p></blockquote></li><li><p><code>child → Widget</code></p><blockquote><p>按钮的标签部件</p></blockquote></li><li><p><code>clipBehavior → Clip</code></p><blockquote><p>根据此选项，内容将被剪裁（或不剪辑）</p></blockquote></li><li><p><code>color → Color</code></p><blockquote><p>按钮的填充颜色，由其材料显示，同时处于默认（未按下，已启用）状态</p></blockquote></li><li><p><code>colorBrightness → Brightness</code></p><blockquote><p>用于设置按钮的主题亮度</p></blockquote></li><li><p><code>disabledColor → Color</code></p><blockquote><p>禁用按钮时按钮的填充颜色</p></blockquote></li><li><p><code>disabledElevation → double</code></p><blockquote><p>按钮相对于其父级的高度</p></blockquote></li><li><p><code>disabledTextColor → Color</code></p><blockquote><p>禁用按钮时用于此按钮文本的颜色</p></blockquote></li><li><p><code>elevation → double</code></p><blockquote><p>放置此按钮相对于其父按钮的Z坐标</p></blockquote></li><li><p><code>enabled → bool</code></p><blockquote><p>设置启用还是禁用按钮</p></blockquote></li><li><p><code>hashCode → int</code></p><blockquote><p>此对象的哈希码(只读)</p></blockquote></li><li><p><code>height → double</code></p><blockquote><p>按钮的垂直范围(即高度)</p></blockquote></li><li><p><code>highlightColor → Color</code></p><blockquote><p>按钮的InkWell的高亮颜色</p></blockquote></li><li><p><code>highlightElevation → double</code></p><blockquote><p>启用并按下按钮时按钮相对于其父级的高度</p></blockquote></li><li><p><code>key → Key</code></p><blockquote><p>控制一个小部件如何替换树中的另一个小部件</p></blockquote></li><li><p><code>materialTapTargetSize → MaterialTapTargetSize</code></p><blockquote><p>配置点击目标的最小尺寸</p></blockquote></li><li><p><code>minWidth → double</code></p><blockquote><p>按钮占据的最小水平范围(最小宽度)</p></blockquote></li><li><p><code>onHighlightChanged → ValueChanged&lt;bool&gt;</code></p><blockquote><p>由底层InkWell小部件的<code>InkWell.onHighlightChanged</code>回调调用</p></blockquote></li><li><p><code>onPressed → VoidCallback</code></p><blockquote><p>点击或以其他方式激活按钮时调用的回调</p></blockquote></li><li><p><code>padding → EdgeInsetsGeometry</code></p><blockquote><p>buttons子级的内部填充</p></blockquote></li><li><p><code>runtimeType → Type</code></p><blockquote><p>表示对象的运行时类型(只读)</p></blockquote></li><li><p><code>shape → ShapeBorder</code></p><blockquote><p>按钮的阴影效果设置</p></blockquote></li><li><p><code>splashColor → Color</code></p><blockquote><p>按钮墨水的泼溅颜色</p></blockquote></li><li><p><code>textColor → Color</code></p><blockquote><p>按钮的文本颜色</p></blockquote></li><li><p><code>textTheme → ButtonTextTheme</code></p><blockquote><p>定义按钮的基色，以及按钮的最小尺寸，内部填充和形状的默认值</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter RaisedButton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发之Image Widget</title>
      <link href="/2019/08/16/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BImage%20Widget/"/>
      <url>/2019/08/16/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BImage%20Widget/</url>
      
        <content type="html"><![CDATA[<h3 id="Image-Widget"><a href="#Image-Widget" class="headerlink" title="Image Widget"></a>Image Widget</h3><blockquote><p>显示图像的小部件,支持以下图像格式: JPEG、PNG、GIF、动画 GIF、WebP、动画 WebP、BMP 和 WBMP</p></blockquote><p><strong>为图像可以指定的各种方式提供了几个构造函数:</strong></p><ul><li>new Image, 通过 ImageProvider获取图像</li><li>new Image.asset, 使用key值从资源包获取图像</li><li>new Image.network, 通过URL网络请求获取图像</li><li>new Image.file, 从文件中获取图像.</li><li>new Image.memory, 从 Uint8List中 获取图像.</li></ul><h4 id="构造方法（Constructors）"><a href="#构造方法（Constructors）" class="headerlink" title="构造方法（Constructors）"></a>构造方法（Constructors）</h4><blockquote><p>Image 创建一个显示图像的小部件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Image(&#123;</span><br><span class="line">    Key key, </span><br><span class="line">    @required ImageProvider image, </span><br><span class="line">    String semanticLabel, </span><br><span class="line">    bool excludeFromSemantics: false, </span><br><span class="line">    double width, double height, </span><br><span class="line">    Color color, </span><br><span class="line">    BlendMode colorBlendMode, </span><br><span class="line">    BoxFit fit, </span><br><span class="line">    AlignmentGeometry alignment: Alignment.center, ImageRepeat repeat: ImageRepeat.noRepeat, </span><br><span class="line">    Rect centerSlice, </span><br><span class="line">    bool matchTextDirection: false, </span><br><span class="line">    bool gaplessPlayback: false, </span><br><span class="line">    FilterQuality filterQuality: FilterQuality.low </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>创建一个小部件,显示从资源包里获得的 ImageStream,图像的键是由名称参数给出的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Image.asset(String name, &#123; </span><br><span class="line">    Key key, </span><br><span class="line">    AssetBundle bundle, </span><br><span class="line">    String semanticLabel, </span><br><span class="line">    bool excludeFromSemantics: false, </span><br><span class="line">    double scale, </span><br><span class="line">    double width, </span><br><span class="line">    double height, </span><br><span class="line">    Color color, </span><br><span class="line">    BlendMode colorBlendMode, </span><br><span class="line">    BoxFit fit, </span><br><span class="line">    AlignmentGeometry alignment: Alignment.center, ImageRepeat repeat: ImageRepeat.noRepeat, </span><br><span class="line">    Rect centerSlice, </span><br><span class="line">    bool matchTextDirection: false, </span><br><span class="line">    bool gaplessPlayback: false, </span><br><span class="line">    String package, </span><br><span class="line">    FilterQuality filterQuality: FilterQuality.low </span><br><span class="line">        </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>创建一个小部件, 显示从文件中获得的 ImageStream</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Image.file(File file, &#123; </span><br><span class="line">    Key key, </span><br><span class="line">    double scale: 1.0, </span><br><span class="line">    String semanticLabel, </span><br><span class="line">    bool excludeFromSemantics: false, </span><br><span class="line">    double width, </span><br><span class="line">    double height, </span><br><span class="line">    Color color, </span><br><span class="line">    BlendMode colorBlendMode, </span><br><span class="line">    BoxFit fit, </span><br><span class="line">    AlignmentGeometry alignment: Alignment.center, ImageRepeat repeat: ImageRepeat.noRepeat, </span><br><span class="line">    Rect centerSlice, </span><br><span class="line">    bool matchTextDirection: false, </span><br><span class="line">    bool gaplessPlayback: false, </span><br><span class="line">    FilterQuality filterQuality: FilterQuality.low </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>创建一个小部件,显示从Uint8List中获得的ImageStream</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Image.memory(Uint8List bytes, &#123; </span><br><span class="line">    Key key, </span><br><span class="line">    double scale: 1.0, </span><br><span class="line">    String semanticLabel, </span><br><span class="line">    bool excludeFromSemantics: false, </span><br><span class="line">    double width, </span><br><span class="line">    double height, </span><br><span class="line">    Color color, </span><br><span class="line">    BlendMode colorBlendMode, </span><br><span class="line">    BoxFit fit, </span><br><span class="line">    AlignmentGeometry alignment: Alignment.center, ImageRepeat repeat: ImageRepeat.noRepeat, </span><br><span class="line">    Rect centerSlice, </span><br><span class="line">    bool matchTextDirection: false, </span><br><span class="line">    bool gaplessPlayback: false, </span><br><span class="line">    FilterQuality filterQuality: FilterQuality.low</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>创建一个小部件, 显示从网络获得的ImageStream</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Image.network(String src, &#123; </span><br><span class="line">    Key key, </span><br><span class="line">    double scale: 1.0, </span><br><span class="line">    String semanticLabel, </span><br><span class="line">    bool excludeFromSemantics: false, </span><br><span class="line">    double width, </span><br><span class="line">    double height, </span><br><span class="line">    Color color, </span><br><span class="line">    BlendMode colorBlendMode, </span><br><span class="line">    BoxFit fit, </span><br><span class="line">    AlignmentGeometry alignment: Alignment.center, ImageRepeat repeat: ImageRepeat.noRepeat, </span><br><span class="line">    Rect centerSlice, </span><br><span class="line">    bool matchTextDirection: false, </span><br><span class="line">    bool gaplessPlayback: false, </span><br><span class="line">    FilterQuality filterQuality: FilterQuality.low,</span><br><span class="line">    Map&lt;String, String&gt; headers </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="属性（Properties）"><a href="#属性（Properties）" class="headerlink" title="属性（Properties）"></a>属性（Properties）</h4><ul><li><p>alignment → AlignmentGeometry</p><ul><li><em>设置图像的对齐方式</em></li></ul></li><li><p>centerSlice → Rect</p><ul><li><em>九片图像的中心切片</em></li><li><em>中心切片内的图像区域将水平和垂直拉伸，以使图像适合其目标</em></li><li><em>中心切片上方和下方的图像区域将仅水平拉伸，中心切片左侧和右侧的图像区域将仅垂直拉伸</em> </li></ul></li><li><p>color → Color</p><ul><li><em>如果非 null, 则使用颜色混合模式将此颜色与每个图像像素混合</em></li></ul></li><li><p>colorBlendMode → BlendMode</p><ul><li><em>用于将颜色与此图像相结合</em></li></ul></li><li><p>excludeFromSemantics → bool</p><ul><li><em>是否从语义中排除此图像</em></li></ul></li><li><p>filterQuality → FilterQuality</p><ul><li><em>用于设置图像的FilterQuality</em></li></ul></li><li><p>fit → BoxFit</p><ul><li><em>图片填充的方式</em><ul><li><code>contain</code> 在目标框中尽可能大的显示完整图像<br>  <img src="https://flutter.github.io/assets-for-api-docs/assets/painting/box_fit_contain.png" alt="box_fit"></li><li><code>cover</code>   在目标框中尽可能小的覆盖整个目标框<br>  <img src="https://flutter.github.io/assets-for-api-docs/assets/painting/box_fit_cover.png" alt="box_fit">      </li><li><code>fill</code>  通过拉伸纵横比来填充整个目标框<br>  <br><img src="https://flutter.github.io/assets-for-api-docs/assets/painting/box_fit_fill.png" alt="box_fit"> </li><li><code>fitHeight</code> 在目标框中高度填充满，不论宽度是否溢出<br>  <img src="https://flutter.github.io/assets-for-api-docs/assets/painting/box_fit_fitHeight.png" alt="box_fit"> </li><li><code>fitWidth</code>  在目标框中宽度填充满，不论高度是否溢出<br>  <img src="https://flutter.github.io/assets-for-api-docs/assets/painting/box_fit_fitWidth.png" alt="box_fit"> </li><li><code>none</code> 对齐目标框内的源（默认情况下，居中）并丢弃位于框外的源的任何部分。源图像未调整大小。<br>   <img src="https://flutter.github.io/assets-for-api-docs/assets/painting/box_fit_none.png" alt="box_fit"> </li><li><code>scaleDown</code> 对齐目标框中的源 (默认情况下, 居中), 并在必要时缩小源的比例, 以确保源适合框中。<br><br><img src="https://flutter.github.io/assets-for-api-docs/assets/painting/box_fit_scaleDown.png" alt="box_fit"> </li></ul></li></ul></li></ul><ul><li><p>gaplessPlayback → bool</p><ul><li><em>当图像更换时是继续显示旧图像 (true), 还是短暂不显示任何内容 (false)</em></li></ul></li><li><p>height → double</p><ul><li><em>如果非空, 则要求图像具有此高度</em></li></ul></li><li><p>image → ImageProvider</p><ul><li><em>要显示的图像</em></li></ul></li><li><p>matchTextDirection → bool</p><ul><li><em>是否将图像绘制到文本方向的方向</em></li></ul></li><li><p>repeat → ImageRepeat</p><ul><li><em>如何绘制图像不包括的布局边界的任何部分</em><ul><li><code>noRepeat</code> 让盒子的未覆盖部分保持透明,不重复</li><li><code>repeat</code>   在 x 和 y 方向上重复图像, 直到框被填满</li><li><code>repeatX</code> 按 x 方向重复图像, 直到水平方向填充满</li><li><code>repeatY</code> 按 Y 方向重复图像, 直到垂直方向填充满</li></ul></li></ul></li><li><p>semanticLabel → String</p><ul><li><em>对图像的语义描述</em></li></ul></li><li><p>width → double</p><ul><li><em>如果非空, 则要求图像具有此宽度</em></li></ul></li><li><p>hashCode → int</p><ul><li><em>此对象的哈希代码</em></li></ul></li><li><p>key → Key</p><ul><li><em>控制一个小部件如何替换树中的另一个小部件</em></li></ul></li><li><p>runtimeType → Type</p><ul><li><em>对象的运行时类型</em></li></ul></li></ul><h4 id="方法（Methods）"><a href="#方法（Methods）" class="headerlink" title="方法（Methods）"></a>方法（Methods）</h4><blockquote><p>在树中的给定位置为这个小部件创建可变状态。</p></blockquote><ul><li>createState() → _ImageState</li></ul><blockquote><p>添加与节点管理相关联的其他属性</p></blockquote><ul><li>debugFillProperties(DiagnosticPropertiesBuilder properties) → void</li></ul><blockquote><p>创建StatelessElement以管理此窗口小部件在树中的位置</p></blockquote><ul><li>createElement() → StatelessElement</li></ul><blockquote><p>返回描述此节点的子节点的DiagnosticsNode对象列表。</p></blockquote><ul><li>debugDescribeChildren() → List<DiagnosticsNode></li></ul><blockquote><p>访问不存在的方法或属性时调用</p></blockquote><ul><li>noSuchMethod(Invocation invocation) → dynamic</li></ul><blockquote><p>返回调试工具和DiagnosticsNode.toStringDeep使用的对象的调试表示形式</p></blockquote><ul><li>toDiagnosticsNode({String name, DiagnosticsTreeStyle style }) → DiagnosticsNode</li></ul><blockquote><p>返回此对象的字符串表示形式</p></blockquote><ul><li>toString({DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String</li></ul><blockquote><p>返回此节点及其后代的字符串表示形式</p></blockquote><ul><li>toStringDeep({String prefixLineOne: ‘’, String prefixOtherLines, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String</li></ul><blockquote><p>返回对象的单行详细描述</p></blockquote><ul><li>toStringShallow({String joiner: ‘, ‘, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String</li></ul><blockquote><p>这个小部件的简短文字描述</p></blockquote><ul><li>toStringShort() → String</li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter Image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发之Container Widget</title>
      <link href="/2019/08/15/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BContainer%20Widget/"/>
      <url>/2019/08/15/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BContainer%20Widget/</url>
      
        <content type="html"><![CDATA[<h3 id="Container-Widget"><a href="#Container-Widget" class="headerlink" title="Container Widget"></a>Container Widget</h3><blockquote><p>一个方便的小部件, 结合了普通的绘画、定位和大小的小部件。</p></blockquote><p>容器首先用填充物（由装饰中存在的任何边界膨胀）包围子对象，然后对填充范围应用附加约束（如果其中一个为非空，则将宽度和高度合并为约束）。然后容器被从边缘描述的额外的空白空间包围。</p><p>在绘画过程中，容器首先应用给定的变换，然后绘制装饰填充填充范围，然后绘制子对象，最后绘制前场装饰，也填充填充填充范围。</p><p>没有子对象的容器尽量大，除非传入的约束是无限的，在这种情况下，它们尽量小。有子对象的容器会根据子对象的大小来调整大小。构造函数的width、height和constraints参数重写了这一点。</p><h4 id="布局行为介绍-Layout-behavior"><a href="#布局行为介绍-Layout-behavior" class="headerlink" title="布局行为介绍(Layout behavior)"></a>布局行为介绍(Layout behavior)</h4><blockquote><p>有关框布局模型的介绍，请参阅<a href="https://api.flutter.dev/flutter/rendering/BoxConstraints-class.html" target="_blank" rel="noopener">BoxConstraints</a>。</p></blockquote><p>由于Container结合了许多其他小部件，每个小部件都有自己的布局行为，因此Container的布局行为有点复杂。</p><p>摘要：容器尝试按顺序：遵循对齐，将自身大小调整为子对象，以符合宽度，高度和约束，以扩展以适合父对象，尽可能小。</p><p>进一步来说：</p><p>如果窗口小部件没有子节点，没有高度，没有宽度，没有约束，并且父节点提供无限制约束，则Container尝试尽可能小。</p><p>如果窗口小部件没有子节点且没有对齐，但提供了高度，宽度或约束，则在给定这些约束和父节点约束的组合的情况下，Container会尽可能小。</p><p>如果窗口小部件没有子节点，没有高度，没有宽度，没有约束，没有对齐，但是父节点提供了有界约束，那么Container会扩展以适应父节点提供的约束。</p><p>如果窗口小部件具有对齐，并且父窗口提供无限制约束，则Container会尝试围绕子窗口调整自身大小。</p><p>如果窗口小部件具有对齐，并且父窗口提供有界约束，则Container会尝试展开以适合父窗口，然后根据对齐方式将子项置于其自身内部。</p><p>否则，窗口小部件具有子级但没有高度，没有宽度，没有约束，也没有对齐，并且Container将约束从父级传递给子级并调整其大小以匹配子级。</p><p>边距和填充属性也会影响布局，如这些属性的文档中所述。 （它们的效果仅仅增加了上述规则。）装饰可以隐含地增加填充（例如，BoxDecoration中的边界有助于填充）;请参阅<a href="https://api.flutter.dev/flutter/widgets/Container/padding.html" target="_blank" rel="noopener">Decoration.padding</a>。</p><p><strong>此示例显示一个48x48琥珀色方块（放置在中心小部件内，以防父小部件对容器应采用的大小有自己的意见），并留有一个空白，使其远离相邻小部件：</strong><br><img src="https://upload-images.jianshu.io/upload_images/11100630-9aafd0dda6e7ffd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/567" alt="Container"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Center(</span><br><span class="line">  child: Container(</span><br><span class="line">    margin: const EdgeInsets.all(10.0),</span><br><span class="line">    color: Colors.amber[600],</span><br><span class="line">    width: 48.0,</span><br><span class="line">    height: 48.0,</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>这个例子展示了如何同时使用容器的许多特性。这些约束被设置为适合字体大小加上足够的垂直净空，同时水平展开以适合父级。填充用于确保内容和文本之间有空间。这个颜色使盒子变成蓝色。对齐会使子项在框中居中。最后，变换对整个装置应用轻微的旋转以完成效果:</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/11100630-8872dd960763226b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2019-05-25 下午6.39.27.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">  constraints: BoxConstraints.expand(</span><br><span class="line">    height: Theme.of(context).textTheme.display1.fontSize * 1.1 + 200.0,</span><br><span class="line">  ),</span><br><span class="line">  padding: const EdgeInsets.all(8.0),</span><br><span class="line">  color: Colors.blue[600],</span><br><span class="line">  alignment: Alignment.center,</span><br><span class="line">  child: Text(&#39;Hello World&#39;,</span><br><span class="line">    style: Theme.of(context)</span><br><span class="line">        .textTheme</span><br><span class="line">        .display1</span><br><span class="line">        .copyWith(color: Colors.white)),</span><br><span class="line">  transform: Matrix4.rotationZ(0.1),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>也可以看看：</strong></p><p><em>AnimatedContainer，一种在变化时平滑动画属性的变体。<br>边框，其中包含大量使用Container的示例。<br>墨水，在材质上绘制装饰，允许InkResponse和InkWell喷溅在它们上面绘画。<br>布局小部件的目录。</em></p><h4 id="构造方法（Constructors）"><a href="#构造方法（Constructors）" class="headerlink" title="构造方法（Constructors）"></a>构造方法（Constructors）</h4><blockquote><p>创建一个小部件, 结合了普通的绘画、定位和大小调整小部件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Container(&#123;Key key, </span><br><span class="line">    AlignmentGeometry alignment,</span><br><span class="line">    EdgeInsetsGeometry padding, </span><br><span class="line">    Color color, </span><br><span class="line">    Decoration decoration, </span><br><span class="line">    Decoration foregroundDecoration, </span><br><span class="line">    double width, </span><br><span class="line">    double height, </span><br><span class="line">    BoxConstraints constraints, EdgeInsetsGeometry margin, </span><br><span class="line">    Matrix4 transform, </span><br><span class="line">    Widget child </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="属性（Properties）"><a href="#属性（Properties）" class="headerlink" title="属性（Properties）"></a>属性（Properties）</h4><ul><li><p>alignment → AlignmentGeometry</p><ul><li><em>对齐内部的子级</em></li></ul></li><li><p>child → Widget</p><ul><li><em>容器内部的子级</em></li></ul></li><li><p>constraints → BoxConstraints </p><ul><li><em>要应用于子级的附加约束</em></li></ul></li><li><p>decoration → Decoration</p><ul><li><em>子级背后的装饰</em></li><li><em>可以设置边框、背景色、背景图片、圆角等属性</em></li><li><em>需要注意的是 <code>deoration</code>和 <code>color</code> 背景颜色不能共存，二者同时只能有一个</em><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">decoration: new BoxDecoration(</span><br><span class="line">               border: new Border.all(width: 2.0, color: Colors.red),</span><br><span class="line">               color: Colors.grey,</span><br><span class="line">               borderRadius: new BorderRadius.all(new Radius.circular(20.0)),</span><br><span class="line">               image: new DecorationImage(</span><br><span class="line">                 image: new NetworkImage(&#39;http:&#x2F;&#x2F;b-ssl.duitang.com&#x2F;uploads&#x2F;item&#x2F;201609&#x2F;26&#x2F;20160926203611_HXQxk.jpeg&#39;),</span><br><span class="line">                 centerSlice: new Rect.fromLTRB(270.0, 180.0, 1360.0, 730.0),</span><br><span class="line">               ),</span><br><span class="line">             ),</span><br></pre></td></tr></table></figure></li><li><img src="" alt="nodecoration">)<img src="" alt="nodecoration"></li><li><em>第一张图设置了背景色，未使用decoration；第二张图设置了decoration，未设置背景色</em></li></ul></li><li><p>foregroundDecoration → Decoration</p><ul><li><em>在子级前面的装饰</em></li><li><em>可以设置边框、背景色、背景图片、圆角等属性</em></li><li><em><code>foregroundDecoration</code>和 <code>color</code> 背景颜色可以共存，但是<code>color</code>有可能被遮挡</em></li><li><em>会遮挡child</em></li><li><img src="" alt="nodecoration"></li></ul></li><li><p>margin → EdgeInsetsGeometry</p><ul><li><em>我的理解就是外边距</em></li></ul></li><li><p>padding → EdgeInsetsGeometry</p><ul><li><em>我的理解就是内边距</em></li></ul></li><li><p>transform → Matrix4</p><ul><li><em>在绘制容器之前要应用的转换矩阵</em></li></ul></li><li><p>hashCode → int</p><ul><li><em>此对象的哈希代码</em></li></ul></li><li><p>key → Key</p><ul><li><em>控制一个小部件如何替换树中的另一个小部件</em></li></ul></li><li><p>runtimeType → Type</p><ul><li><em>对象的运行时类型</em></li></ul></li></ul><h4 id="方法（Methods）"><a href="#方法（Methods）" class="headerlink" title="方法（Methods）"></a>方法（Methods）</h4><ul><li><p>build(BuildContext context) → Widget</p><blockquote><p>描述此窗口小部件表示的用户界面部分</p></blockquote></li><li><p>debugFillProperties(DiagnosticPropertiesBuilder properties) → void</p><blockquote><p>添加与节点关联的其他属性</p></blockquote></li><li><p>createElement() → StatelessElement</p><blockquote><p>创建StatelessElement以管理此窗口小部件在树中的位置</p></blockquote></li><li><p>debugDescribeChildren() → List<DiagnosticsNode></p><blockquote><p>返回描述此节点的子节点的DiagnosticsNode对象列表。</p></blockquote></li><li><p>noSuchMethod(Invocation invocation) → dynamic</p><blockquote><p>访问不存在的方法或属性时调用</p></blockquote></li><li><p>toDiagnosticsNode({String name, DiagnosticsTreeStyle style }) → DiagnosticsNode</p><blockquote><p>返回调试工具和DiagnosticsNode.toStringDeep使用的对象的调试表示形式</p></blockquote></li><li><p>toString({DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String</p><blockquote><p>返回此对象的字符串表示形式</p></blockquote></li><li><p>toStringDeep({String prefixLineOne: ‘’, String prefixOtherLines, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String</p><blockquote><p>返回此节点及其后代的字符串表示形式</p></blockquote></li><li><p>toStringShallow({String joiner: ‘, ‘, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String</p><blockquote><p>返回对象的单行详细描述</p></blockquote></li><li><p>toStringShort() → String</p><blockquote><p>这个小部件的简短文字描述</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发之BottomNavigationBar底部导航栏</title>
      <link href="/2019/08/14/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BBottomNavigationBar%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
      <url>/2019/08/14/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BBottomNavigationBar%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="BottomNavigationBar"><a href="#BottomNavigationBar" class="headerlink" title="BottomNavigationBar"></a>BottomNavigationBar</h3><blockquote><p>显示在应用程序的底部，用于在少量视图中进行选择，通常在三到五之间。</p></blockquote><p>底部导航栏通常与<code>Scaffold</code>结合使用，它作为<code>Scaffold.bottomNavigationBar</code>参数提供。</p><p>底部导航栏的类型更改其项目的显示方式。如果未指定，则当少于四个项时它会自动设置为<code>BottomNavigationBarType.fixed</code>，否则为<code>BottomNavigationBarType.shifting</code>。</p><p><code>BottomNavigationBarType.fixed</code>，当少于四个项目时的默认值。如果选中的项目为非null，则使用<code>selectedItemColor</code>渲染所选项目，否则使用主题的<code>ThemeData.primaryColor</code>。如果<code>backgroundColor</code>为<code>null</code>，则导航栏的背景颜色默认为<code>Material</code>背景颜色<code>ThemeData.canvasColor</code>（基本上是不透明的白色）。</p><p><code>BottomNavigationBarType.shifting</code>，当有四个或更多项时的默认值。如果<code>selectedItemColor</code>为<code>null</code>，则所有项目都以白色呈现。导航栏的背景颜色与所选项目的<code>BottomNavigationBarItem.backgroundColor</code>相同。在这种情况下，假设每个项目将具有不同的背景颜色，并且背景颜色将与白色形成鲜明对比。</p><p><strong>此示例显示BottomNavigationBar，因为它在Scaffold小部件中使用。 BottomNavigationBar有三个BottomNavigationBarItem小部件，currentIndex设置为索引0.所选项目为琥珀色。 _onItemTapped函数更改所选项的索引，并在Scaffold的中心显示相应的消息:</strong></p><p><img src="https://flutter.github.io/assets-for-api-docs/assets/material/bottom_navigation_bar.png" alt="IMG"> </p><p><strong>源码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">int _selectedIndex &#x3D; 0;</span><br><span class="line">static const TextStyle optionStyle &#x3D; TextStyle(fontSize: 30, fontWeight: FontWeight.bold);</span><br><span class="line">static const List&lt;Widget&gt; _widgetOptions &#x3D; &lt;Widget&gt;[</span><br><span class="line">  Text(</span><br><span class="line">    &#39;Index 0: Home&#39;,</span><br><span class="line">    style: optionStyle,</span><br><span class="line">  ),</span><br><span class="line">  Text(</span><br><span class="line">     &#39;Index 1: Business&#39;,</span><br><span class="line">     style: optionStyle,</span><br><span class="line">  ),</span><br><span class="line">  Text(</span><br><span class="line">     &#39;Index 2: School&#39;,</span><br><span class="line">     style: optionStyle,</span><br><span class="line">  ),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">void _onItemTapped(int index) &#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _selectedIndex &#x3D; index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@override</span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  return Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: const Text(&#39;BottomNavigationBar Sample&#39;),</span><br><span class="line">    ),</span><br><span class="line">    body: Center(</span><br><span class="line">      child: _widgetOptions.elementAt(_selectedIndex),</span><br><span class="line">    ),</span><br><span class="line">    bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">      items: const &lt;BottomNavigationBarItem&gt;[</span><br><span class="line">        BottomNavigationBarItem(</span><br><span class="line">          icon: Icon(Icons.home),</span><br><span class="line">          title: Text(&#39;Home&#39;),</span><br><span class="line">        ),</span><br><span class="line">        BottomNavigationBarItem(</span><br><span class="line">          icon: Icon(Icons.business),</span><br><span class="line">          title: Text(&#39;Business&#39;),</span><br><span class="line">        ),</span><br><span class="line">        BottomNavigationBarItem(</span><br><span class="line">          icon: Icon(Icons.school),</span><br><span class="line">          title: Text(&#39;School&#39;),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">      currentIndex: _selectedIndex,</span><br><span class="line">      selectedItemColor: Colors.amber[800],</span><br><span class="line">      onTap: _onItemTapped,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造方法（Constructors）"><a href="#构造方法（Constructors）" class="headerlink" title="构造方法（Constructors）"></a>构造方法（Constructors）</h4><blockquote><p>创建一个底部导航栏，通常用作Scaffold的Scaffold.bottomNavigationBar参数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BottomNavigationBar(&#123;</span><br><span class="line">    Key key, </span><br><span class="line">    @required List&lt;BottomNavigationBarItem&gt; items, </span><br><span class="line">    ValueChanged&lt;int&gt; onTap, </span><br><span class="line">    int currentIndex: 0, </span><br><span class="line">    double elevation: 8.0, </span><br><span class="line">    BottomNavigationBarType type, </span><br><span class="line">    Color fixedColor, </span><br><span class="line">    Color backgroundColor, </span><br><span class="line">    double iconSize: 24.0, </span><br><span class="line">    Color selectedItemColor, </span><br><span class="line">    Color unselectedItemColor, </span><br><span class="line">    double selectedFontSize: 14.0, </span><br><span class="line">    double unselectedFontSize: 12.0, </span><br><span class="line">    bool showSelectedLabels: true, </span><br><span class="line">    bool showUnselectedLabels </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="属性（Properties）"><a href="#属性（Properties）" class="headerlink" title="属性（Properties）"></a>属性（Properties）</h4><ul><li><p><code>backgroundColor → Color</code></p><blockquote><p>背景颜色</p></blockquote></li><li><p><code>currentIndex → int</code></p><blockquote><p>当前活动<code>BottomNavigationBarItem</code>的项目索引(一般就是当前选中的那个项目索引)</p></blockquote></li><li><p><code>elevation → double</code></p><blockquote><p>此底部导航栏的Z坐标</p></blockquote></li><li><p><code>fixedColor → Color</code></p><blockquote><p>选中项目颜色的值（只读）</p></blockquote></li><li><p><code>iconSize → double</code></p><blockquote><p>所有<code>BottomNavigationBarItem</code>图标的大小</p></blockquote></li><li><p><code>items → List&lt;BottomNavigationBarItem&gt;</code></p><blockquote><p>定义在底部导航栏中排列的按钮项的外观</p></blockquote></li><li><p><code>onTap → ValueChanged&lt;int&gt;</code></p><blockquote><p>点击其中一个项目时响应事件</p></blockquote></li><li><p><code>selectedFontSize → double</code></p><blockquote><p>选中时<code>BottomNavigationBarItem</code>标签的字体大小</p></blockquote></li><li><p><code>selectedItemColor → Color</code></p><blockquote><p>选中时<code>BottomNavigationBarItem.icon</code>和<code>BottomNavigationBarItem.label</code>的颜色</p></blockquote></li><li><p><code>showSelectedLabels → bool</code></p><blockquote><p>是否为未选择的<code>BottomNavigationBarItems</code>显示标签</p></blockquote></li><li><p><code>showUnselectedLabels → bool</code></p><blockquote><p>是否为选定的<code>BottomNavigationBarItem</code>显示标签</p></blockquote></li><li><p><code>type → BottomNavigationBarType</code></p><blockquote><p>定义<code>BottomNavigationBar</code>的布局和行为</p></blockquote></li><li><p><code>unselectedFontSize → double</code></p><blockquote><p>未选中<code>BottomNavigationBarItem</code>标签的字体大小</p></blockquote></li><li><p><code>unselectedItemColor → Color</code></p><blockquote><p>未选中的<code>BottomNavigationBarItem.icon</code>和<code>BottomNavigationBarItem.labels</code>的颜色</p></blockquote></li><li><p><code>hashCode → int</code></p><blockquote><p>对象的哈希值（只读）</p></blockquote></li><li><p><code>key → Key</code></p><blockquote><p>控制一个小部件如何替换树中的另一个小部件</p></blockquote></li><li><p><code>runtimeType → Type</code></p><blockquote><p>表示对象的运行时类型(只读)</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter BottomNavigationBar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发之AppBar Widget</title>
      <link href="/2019/08/13/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BAppBar%20Widget/"/>
      <url>/2019/08/13/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BAppBar%20Widget/</url>
      
        <content type="html"><![CDATA[<h3 id="AppBar"><a href="#AppBar" class="headerlink" title="AppBar"></a>AppBar</h3><p>应用栏通常用于Scaffold.appBar属性，该属性将应用栏放置在屏幕顶部的固定高度小部件中。对于可滚动的应用栏，请参阅<a href="https://api.flutter.dev/flutter/material/SliverAppBar-class.html" target="_blank" rel="noopener">SliverAppBar</a>，它将一个AppBar嵌入到一个条子中，以便在CustomScrollView中使用。</p><p>AppBar在底部（如果有）上方显示工具栏小部件，前导，标题和操作。底部通常用于TabBar。如果指定了flexibleSpace窗口小部件，则它将堆叠在工具栏和底部窗口小部件后面。下图显示了当编写语言从左到右（例如英语）时，每个插槽在工具栏中的显示位置：<br><img src="https://flutter.github.io/assets-for-api-docs/assets/material/app_bar.png" alt="image"></p><p>如果省略了前导小部件，但AppBar位于带有抽屉的脚手架中，则会插入一个按钮以打开抽屉。否则，如果最近的导航器具有任何先前的路径，则会插入BackButton。可以通过将automatedImplyLeading设置为false来关闭此行为。在这种情况下，空的前导小部件将导致中间/标题小部件拉伸开始。</p><h4 id="构造方法（Constructors）"><a href="#构造方法（Constructors）" class="headerlink" title="构造方法（Constructors）"></a>构造方法（Constructors）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">AppBar(&#123;</span><br><span class="line">    Key key, </span><br><span class="line">    Widget leading, </span><br><span class="line">    bool automaticallyImplyLeading: true, </span><br><span class="line">    Widget title, </span><br><span class="line">    List&lt;Widget&gt; actions, </span><br><span class="line">    Widget flexibleSpace, </span><br><span class="line">    PreferredSizeWidget bottom, </span><br><span class="line">    double elevation, </span><br><span class="line">    ShapeBorder shape, </span><br><span class="line">    Color backgroundColor, </span><br><span class="line">    Brightness brightness, </span><br><span class="line">    IconThemeData iconTheme, </span><br><span class="line">    IconThemeData actionsIconTheme, </span><br><span class="line">    TextTheme textTheme, </span><br><span class="line">    bool primary: true, </span><br><span class="line">    bool centerTitle, double titleSpacing: NavigationToolbar.kMiddleSpacing, </span><br><span class="line">    double toolbarOpacity: 1.0, </span><br><span class="line">    double bottomOpacity: 1.0 </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">AppBar(</span><br><span class="line">  title: Text(&#39;My Fancy Dress&#39;),</span><br><span class="line">  actions: &lt;Widget&gt;[</span><br><span class="line">    IconButton(</span><br><span class="line">      icon: Icon(Icons.playlist_play),</span><br><span class="line">      tooltip: &#39;Air it&#39;,</span><br><span class="line">      onPressed: _airDress,</span><br><span class="line">    ),</span><br><span class="line">    IconButton(</span><br><span class="line">      icon: Icon(Icons.playlist_add),</span><br><span class="line">      tooltip: &#39;Restitch it&#39;,</span><br><span class="line">      onPressed: _restitchDress,</span><br><span class="line">    ),</span><br><span class="line">    IconButton(</span><br><span class="line">      icon: Icon(Icons.playlist_add_check),</span><br><span class="line">      tooltip: &#39;Repair it&#39;,</span><br><span class="line">      onPressed: _repairDress,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="属性（Properties）"><a href="#属性（Properties）" class="headerlink" title="属性（Properties）"></a>属性（Properties）</h4><ul><li><p>actions → List<Widget></p><blockquote><p>要在标题小部件后显示的小部件</p></blockquote></li><li><p>actionsIconTheme → IconThemeData</p><blockquote><p>用于应用栏操作中显示的图标的颜色，不透明度和大小。仅当操作的主题不同于应用栏的主要小部件中显示的图标时，才应使用此选项</p></blockquote></li><li><p>automaticallyImplyLeading → bool</p><blockquote><p>Controls whether we should try to imply the leading widget if null. […]</p></blockquote></li><li><p>backgroundColor → Color</p><blockquote><p>用于应用栏材质的颜色。通常这应该与亮度，iconTheme，textTheme一起设置。</p></blockquote></li><li><p>bottom → PreferredSizeWidget</p><blockquote><p>此小组件显示在应用栏的底部</p></blockquote></li><li><p>bottomOpacity → double</p><blockquote><p>应用栏底部的不透明程度(0.0 - 1.0)</p></blockquote></li><li><p>brightness → Brightness</p><blockquote><p>应用栏材质的亮度。通常，这与backgroundColor，iconTheme，textTheme一起设置</p></blockquote></li><li><p>centerTitle → bool</p><blockquote><p>标题是否居中</p></blockquote></li><li><p>elevation → double</p><blockquote><p>放置此应用程序栏相对于其父应用程序栏的Z坐标</p></blockquote></li><li><p>flexibleSpace → Widget</p><blockquote><p>此小组件堆叠在工具栏和选项卡栏后面。它的高度与应用栏的整体高度相同</p></blockquote></li><li><p>iconTheme → IconThemeData</p><blockquote><p>用于应用栏图标的颜色，不透明度和大小。通常，这与backgroundColor，brightness，textTheme一起设置</p></blockquote></li><li><p>leading → Widget</p><blockquote><p>要在标题之前显示的小部件</p></blockquote></li><li><p>preferredSize → Size</p><blockquote><p>高度为kToolbarHeight和底部窗口小部件首选高度之和的大小</p></blockquote></li><li><p>primary → bool</p><blockquote><p>此应用栏是否显示在屏幕顶部</p></blockquote></li><li><p>shape → ShapeBorder</p><blockquote><p>形状和阴影</p></blockquote></li><li><p>textTheme → TextTheme</p><blockquote><p>应用栏中用于文本的排版样式。通常，这与亮度backgroundColor，iconTheme一起设置</p></blockquote></li><li><p>title → Widget</p><blockquote><p>appbar中显示的主要小部件</p></blockquote></li><li><p>titleSpacing → double</p><blockquote><p>横轴上标题内容周围的间距。即使没有前导内容或操作，也会应用此间距。如果希望title占用所有可用空间，请将此值设置为0.0</p></blockquote></li><li><p>toolbarOpacity → double</p><blockquote><p>应用栏的工具栏部分透明度(0.0-1.0)</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter AppBar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter开发之基础 Widgets</title>
      <link href="/2019/08/12/Flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E5%9F%BA%E7%A1%80%20Widgets/"/>
      <url>/2019/08/12/Flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E5%9F%BA%E7%A1%80%20Widgets/</url>
      
        <content type="html"><![CDATA[<h3 id="基础-Widgets"><a href="#基础-Widgets" class="headerlink" title="基础 Widgets"></a>基础 Widgets</h3><ol><li><p><a href="https://docs.flutter.io/flutter/widgets/Container-class.html" target="_blank" rel="noopener">Container</a></p><blockquote><p>一个拥有绘制、定位、调整大小的 widget。</p></blockquote></li><li><p><a href="https://docs.flutter.io/flutter/widgets/Row-class.html" target="_blank" rel="noopener">Row</a></p><blockquote><p>在水平方向上排列子widget的列表。</p></blockquote></li><li><p><a href="https://docs.flutter.io/flutter/widgets/Column-class.html" target="_blank" rel="noopener">Column</a></p><blockquote><p>在垂直方向上排列子widget的列表。</p></blockquote></li><li><p><a href="https://docs.flutter.io/flutter/widgets/Image-class.html" target="_blank" rel="noopener">Image</a></p><blockquote><p>一个显示图片的widget。</p></blockquote></li><li><p><a href="https://docs.flutter.io/flutter/widgets/Text-class.html" target="_blank" rel="noopener">Text</a></p><blockquote><p>单一格式的文本。</p></blockquote></li><li><p><a href="https://docs.flutter.io/flutter/widgets/Icon-class.html" target="_blank" rel="noopener">Icon</a></p><blockquote><p>图标。</p></blockquote></li><li><p><a href="https://docs.flutter.io/flutter/material/RaisedButton-class.html" target="_blank" rel="noopener">RaisedButton</a></p><blockquote><p>Material Design中的button，一个凸起的材质矩形按钮</p></blockquote></li><li><p><a href="https://docs.flutter.io/flutter/material/Scaffold-class.html" target="_blank" rel="noopener">Scaffold</a></p><blockquote><p>Material Design布局结构的基本实现。此类提供了用于显示drawer、snackbar和底部sheet的API。</p></blockquote></li><li><p><a href="https://docs.flutter.io/flutter/material/AppBar-class.html" target="_blank" rel="noopener">AppBar</a></p><blockquote><p>一个Material Design应用程序栏，由工具栏和其他可能的widget（如TabBar和FlexibleSpaceBar）组成。</p></blockquote></li><li><p><a href="https://docs.flutter.io/flutter/material/FlutterLogo-class.html" target="_blank" rel="noopener">FlutterLogo</a></p><blockquote><p>Flutter logo,以widget形式,这个widget遵从IconTheme。</p></blockquote></li><li><p><a href="https://docs.flutter.io/flutter/widgets/Placeholder-class.html" target="_blank" rel="noopener">Placeholder</a></p><blockquote><p>一个绘制了一个盒子的的widget，代表日后有widget将会被添加到该盒子中</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter Widgets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter-go运行报错（FIRAnalyticsConfiguration）</title>
      <link href="/2019/07/19/Flutter-go%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%EF%BC%88FIRAnalyticsConfiguration%EF%BC%89/"/>
      <url>/2019/07/19/Flutter-go%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%EF%BC%88FIRAnalyticsConfiguration%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="flutter-go-项目下载后，运行报如下错误："><a href="#flutter-go-项目下载后，运行报如下错误：" class="headerlink" title="flutter go 项目下载后，运行报如下错误："></a>flutter go 项目下载后，运行报如下错误：</h3><figure class="highlight plain"><figcaption><span>flutter run</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Launching lib&#x2F;main.dart on iPhone Xʀ in debug mode...</span><br><span class="line">Running Xcode build...                                                  </span><br><span class="line">                                                   </span><br><span class="line">Xcode build done.                                            3.3s</span><br><span class="line">Failed to build iOS app</span><br><span class="line">Error output from Xcode build:</span><br><span class="line">↳</span><br><span class="line">    ** BUILD FAILED **</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Xcode&#39;s output:</span><br><span class="line">↳</span><br><span class="line">    &#x3D;&#x3D;&#x3D; BUILD TARGET firebase_analytics OF PROJECT Pods WITH CONFIGURATION Debug &#x3D;&#x3D;&#x3D;</span><br><span class="line">    &#x2F;Users&#x2F;l&#x2F;Documents&#x2F;flutter&#x2F;.pub-cache&#x2F;hosted&#x2F;pub.dartlang.org&#x2F;firebase_analytics-2.1.1+2&#x2F;ios&#x2F;Classes&#x2F;FirebaseAnalyticsPlu</span><br><span class="line">    gin.m:60:7: error: use of undeclared identifier &#39;FIRAnalyticsConfiguration&#39;</span><br><span class="line">        [[FIRAnalyticsConfiguration sharedInstance] setAnalyticsCollectionEnabled:[enabled boolValue]];</span><br><span class="line">          ^</span><br><span class="line">    1 error generated.</span><br><span class="line"></span><br><span class="line">Could not build the application for the simulator.</span><br><span class="line">Error launching application on iPhone Xʀ.</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><hr><p>将根目录下<code>pubspec.yaml</code>文件中 <code>firebase_analytics: ^2.0.2+1</code> 改为 <code>firebase_analytics: ^3.0.1</code> 之后运行flutter run</p><hr><p><em>执行通过</em></p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter的坑 </tag>
            
            <tag> Flutter-go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter Flutter.h file not found</title>
      <link href="/2019/07/05/Flutter%20Flutter.h%20file%20not%20found/"/>
      <url>/2019/07/05/Flutter%20Flutter.h%20file%20not%20found/</url>
      
        <content type="html"><![CDATA[<h4 id="1-‘Flutter-Flutter-h’-file-not-found"><a href="#1-‘Flutter-Flutter-h’-file-not-found" class="headerlink" title="1. ‘Flutter/Flutter.h’ file not found"></a>1. ‘Flutter/Flutter.h’ file not found</h4><h5 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1."></a>解决方案1.</h5><p>点击这里<a href="https://github.com/flutter/flutter/tree/master/packages/flutter_tools/templates/cocoapods" target="_blank" rel="noopener">前往下载</a>对应版本文件,替换原来的文件<code>ios/Podfile</code>内容，删除<code>ios/Podfile.lock</code>,重新 <code>pod install</code> 即可</p><h5 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2."></a>解决方案2.</h5><p>执行代码：<code>flutter run -v</code> 和 <code>flutter doctor -v</code> 检测配置是否成功</p><p>可能会出现以下情况：</p><p>Mac os 10.15 无法打开“idevice_id”,因为无法验证开发者</p><p>Mac os 10.15 无法打开“ideviceinfo”,因为无法验证开发者</p><p>解决方法 打开终端（Terminal），输入以下命令后回车，如需要，请输入密码</p><p><code>sudo xattr -r -d com.apple.quarantine &lt;path&gt;</code></p><blockquote><p>注：<path>为应用程序路径，直接从文件夹目录拖拽即可自动填写<path></p></blockquote><h5 id="解决方案3"><a href="#解决方案3" class="headerlink" title="解决方案3."></a>解决方案3.</h5><p> 找到 <code>iOS/Flutter</code> 文件夹，再找到以前备份的无报错代码替换掉文件夹内容，应该就不会报错了。</p><p> 再执行下 <code>flutter build ios --release</code><br> 编译过程中会重新生成新的  <code>iOS/Flutter</code> 文件夹下内容，覆盖我们替换的文件。</p><h5 id="以上解决方案有可能需要结合使用。"><a href="#以上解决方案有可能需要结合使用。" class="headerlink" title="以上解决方案有可能需要结合使用。"></a>以上解决方案有可能需要结合使用。</h5>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter的坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 编译成Swift</title>
      <link href="/2019/06/29/Flutter%20%E7%BC%96%E8%AF%91%E6%88%90Swift/"/>
      <url>/2019/06/29/Flutter%20%E7%BC%96%E8%AF%91%E6%88%90Swift/</url>
      
        <content type="html"><![CDATA[<h3 id="flutter-create-i-swift-a-kotlin-swiftflutter"><a href="#flutter-create-i-swift-a-kotlin-swiftflutter" class="headerlink" title="flutter create -i swift -a kotlin swiftflutter"></a><code>flutter create -i swift -a kotlin swiftflutter</code></h3><h3 id="flutter-create-org-com-yourcompany-i-swift-a-kotlin-description-39-Your-App-Description-39-your-app-name"><a href="#flutter-create-org-com-yourcompany-i-swift-a-kotlin-description-39-Your-App-Description-39-your-app-name" class="headerlink" title="flutter create --org com.yourcompany -i swift -a kotlin --description &#39;Your App Description&#39; your_app_name"></a><code>flutter create --org com.yourcompany -i swift -a kotlin --description &#39;Your App Description&#39; your_app_name</code></h3><p>flutter  run -d 06157df6f3881f3e  –flavor tencent</p>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter  VSCode命令收集</title>
      <link href="/2019/06/27/Flutter%20%20VSCode%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86/"/>
      <url>/2019/06/27/Flutter%20%20VSCode%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<ul><li><p><code>open -a Simulator</code></p><blockquote><p>打开模拟器</p></blockquote></li><li><p><code>flutter run</code></p><blockquote><p>编译执行flutter程序</p></blockquote></li><li><p><code>flutter packages get</code></p><blockquote><p>获取相同版本的软件包</p></blockquote></li><li><p><code>flutter packages upgrade</code></p><blockquote><p>如果要升级到软件包的新版本，例如使用该软件包中的新功能</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>androidx</title>
      <link href="/2019/06/25/androidx/"/>
      <url>/2019/06/25/androidx/</url>
      
        <content type="html"><![CDATA[<h4 id="1-ViewModelProviders"><a href="#1-ViewModelProviders" class="headerlink" title="1. ViewModelProviders"></a>1. ViewModelProviders</h4><p>在<code>build.gradle</code> 的 <code>dependencies</code> 中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#39;androidx.lifecycle:lifecycle-extensions:2.0.0&#39;</span><br></pre></td></tr></table></figure><p>在使用的地方导入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import androidx.lifecycle.ViewModelProviders;</span><br></pre></td></tr></table></figure><p>即可使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myViewModel &#x3D; ViewModelProviders.of(this).get(MyViewModel.class);</span><br></pre></td></tr></table></figure><blockquote><p>该方法 2.1.0 已弃用 ViewModelProviders.of() ,改为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;导入 import androidx.lifecycle.ViewModelProvider;</span><br><span class="line">myViewModel &#x3D; ViewModelProvider(this).get(MyViewModel.class);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">myViewModel &#x3D; ViewModelProvider(getActivity()).get(MyViewModel.class);</span><br></pre></td></tr></table></figure><h4 id="2-DataBinding"><a href="#2-DataBinding" class="headerlink" title="2. DataBinding"></a>2. DataBinding</h4><p>在 <code>build.gradle</code> 的  defaultConfig中加入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataBinding&#123;</span><br><span class="line">    enabled true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Sync Now</code>一下，把下面代码套在布局最外层，即可使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;layout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;data&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;data&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">    &#x2F;&#x2F;这里写自己的布局</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;layout&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio运行Flutter项目run不起来</title>
      <link href="/2019/06/19/Android%20Studio%E8%BF%90%E8%A1%8CFlutter%E9%A1%B9%E7%9B%AErun%E4%B8%8D%E8%B5%B7%E6%9D%A5/"/>
      <url>/2019/06/19/Android%20Studio%E8%BF%90%E8%A1%8CFlutter%E9%A1%B9%E7%9B%AErun%E4%B8%8D%E8%B5%B7%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><ol><li>修改<code>Flutter SDK</code>中的<code>flutter.gradle</code>文件,通过 <code>flutter&gt;packages&gt;flutter_tools&gt;gradle&gt;flutter.gradle</code>(注意这是Flutter SDK安装位置不是Android Studio的)路径找到<code>flutter.gradle</code>，打开<code>flutter.gradle</code>文件，修改配置：</li></ol><p>注释掉<code>google()</code>和<code>jcenter()</code>,加入阿里的配置项</p><pre><code>maven {url &apos;https://maven.aliyun.com/repository/google&apos;}maven {url &apos;https://maven.aliyun.com/repository/jcenter&apos;}maven {url &apos;https://maven.aliyun.com/nexus/content/groups/public&apos;}</code></pre><p> 修改后：</p><pre><code>buildscript {    repositories {        //注释掉 google()和jcenter()        // google()        // jcenter()        maven {url &apos;https://maven.aliyun.com/repository/google&apos;}        maven {url &apos;https://maven.aliyun.com/repository/jcenter&apos;}        maven {url &apos;https://maven.aliyun.com/nexus/content/groups/public&apos;}    }    dependencies {        classpath &apos;com.android.tools.build:gradle:3.2.1&apos;    }}</code></pre><ol start="2"><li><p>手动下载<code>gradle</code>进行配置</p><p>找到创建的flutter项目：</p><p>通过路径<code>flutterdemo001/android/gradle/wrapper/gradle-wrapper.properties</code>找到对应文件打开后：</p></li></ol><pre><code>#Fri Jun 23 08:50:38 CEST 2017distributionBase=GRADLE_USER_HOMEdistributionPath=wrapper/distszipStoreBase=GRADLE_USER_HOMEzipStorePath=wrapper/distsdistributionUrl=https\://services.gradle.org/distributions/gradle-4.10.2-all.zip</code></pre><p>  找到<code>distributionUrl</code>对应的地址<code>https://services.gradle.org/distributions/gradle-4.10.2-all.zip</code>就是gradle的下载地址,注意文件中https后面有个<code>\</code>,复制到浏览器记得要删掉</p><p>   点击下载 <a href="https://services.gradle.org/distributions/gradle-4.10.2-all.zip" target="_blank" rel="noopener">gradle-4.10.2-all.zip</a></p><p>   点击下载<a href="http://services.gradle.org/distributions/" target="_blank" rel="noopener">其他版本gradle</a></p><p>   下载完成后，进行解压。<br>   然后打开目录：<code>Macintosh HD 》 用户 》当前登录用户名称》.gradle》wrapper》dists</code>⁩,<br>   可能有些电脑未打开隐藏文件可见，是看不到<code>.gradle</code>文件夹的,它是一个隐藏文件夹。<br>   使用快捷键<code>shift+command+.</code>来切换隐藏文件可见还是隐藏。找到dists文件夹后，把解压后的<code>gradle</code>拷贝一份放到dists文件夹下即可。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 简单链表实现</title>
      <link href="/2019/06/17/Swift%E7%AE%80%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/06/17/Swift%E7%AE%80%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="Swift-简单链表实现"><a href="#Swift-简单链表实现" class="headerlink" title="Swift 简单链表实现"></a>Swift 简单链表实现</h4><blockquote><p>链表中的元素在内存中不是顺序存储的，查找慢，插入、删除只需要对元素指针重新赋值，效率高；数组元素在内存上连续存放，可以通过下标查找元素；插入、删除需要移动大量元素，比较适用于元素很少变化的情况</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import UIKit</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;链表节点</span><br><span class="line">public class Node&#123;</span><br><span class="line">    </span><br><span class="line">    var value: T &#x2F;&#x2F;节点存储数据</span><br><span class="line">    weak var next: Node? &#x2F;&#x2F;节点链接到的下一个节点</span><br><span class="line">    </span><br><span class="line">    weak var previous: Node?&#x2F;&#x2F;节点链接到的上一个节点</span><br><span class="line">     </span><br><span class="line">    init(value: T) &#123;</span><br><span class="line">      self.value &#x3D; value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;自定义链表</span><br><span class="line">public class NodeList:CustomStringConvertible&#123;</span><br><span class="line">    &#x2F;&#x2F;链表起点节点</span><br><span class="line">    private var head:Node?</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;链表终点节点</span><br><span class="line">    private var tail:Node?</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;链表内数据是否为空</span><br><span class="line">    public var isEmpty:Bool&#123;</span><br><span class="line">        return head &#x3D;&#x3D; nil</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;返回第一个节点</span><br><span class="line">    public var first:Node?&#123;</span><br><span class="line">        return head</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;返回最后一个节点</span><br><span class="line">    public var last:Node?&#123;</span><br><span class="line">        return tail</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;添加一个链接节点数据</span><br><span class="line">    public func append(value:T)&#123;</span><br><span class="line">        let newNode &#x3D; Node(value: value)</span><br><span class="line">        if let tailNode &#x3D; tail&#123;</span><br><span class="line">            newNode.previous &#x3D; tailNode</span><br><span class="line">            tailNode.next &#x3D; newNode</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            head &#x3D; newNode</span><br><span class="line">        &#125;</span><br><span class="line">        tail &#x3D; newNode</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;删除节点</span><br><span class="line">    public func remove(node:Node) -&gt; T&#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;保存要删除节点的上一个和下一个节点</span><br><span class="line">        let prev &#x3D; node.previous</span><br><span class="line">        let next &#x3D; node.next</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;如果要删处节点的上一节点不为空</span><br><span class="line">        if let prev &#x3D; prev &#123;</span><br><span class="line">            &#x2F;&#x2F;上一个节点链接到的下一个节点，修改为要删除的下一个节点</span><br><span class="line">            prev.next &#x3D; next</span><br><span class="line">        &#125;</span><br><span class="line">            &#x2F;&#x2F;如果要删处节点的上一节点为空，说明要删除的是链表起点节点</span><br><span class="line">        else &#123;</span><br><span class="line">            &#x2F;&#x2F;把下一个节点改为起点节点</span><br><span class="line">            head &#x3D; next</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;要删出的上一个节点，链接到上一个节点</span><br><span class="line">        next?.previous &#x3D; prev</span><br><span class="line">        if next &#x3D;&#x3D; nil &#123;</span><br><span class="line">            &#x2F;&#x2F;next为nil说明要删除的是最后一个，把倒数以前倒数第二个，置为最后一个</span><br><span class="line">            tail &#x3D; prev</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        node.previous &#x3D; nil</span><br><span class="line">        node.next &#x3D; nil</span><br><span class="line">        return node.value</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;删除所有节点数据</span><br><span class="line">    public func removeAll() &#123;</span><br><span class="line">      head &#x3D; nil</span><br><span class="line">      tail &#x3D; nil</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;取对应索引的节点</span><br><span class="line">    public func nodeAt(index: Int) -&gt; Node? &#123;</span><br><span class="line">      if index &gt;&#x3D; 0 &#123;</span><br><span class="line">        var node &#x3D; head</span><br><span class="line">        var i &#x3D; index</span><br><span class="line">        while node !&#x3D; nil &#123;</span><br><span class="line">          if i &#x3D;&#x3D; 0 &#123; return node &#125;</span><br><span class="line">          i -&#x3D; 1</span><br><span class="line">          node &#x3D; node!.next</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return nil</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;输出节点数据</span><br><span class="line">    public var description: String&#123;</span><br><span class="line">        var text &#x3D; &quot;&quot;</span><br><span class="line">        var node &#x3D; head</span><br><span class="line">        while node !&#x3D; nil &#123;</span><br><span class="line">            text +&#x3D; &quot;\(node!.value)&quot;</span><br><span class="line">            </span><br><span class="line">            node &#x3D; node!.next</span><br><span class="line">            if node !&#x3D; nil &#123;</span><br><span class="line">                text +&#x3D; &quot;,&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;[&quot; + text + &quot;]&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>touch取消textfield的第一响应</title>
      <link href="/2019/06/17/touch%E5%8F%96%E6%B6%88textfield%E7%9A%84%E7%AC%AC%E4%B8%80%E5%93%8D%E5%BA%94/"/>
      <url>/2019/06/17/touch%E5%8F%96%E6%B6%88textfield%E7%9A%84%E7%AC%AC%E4%B8%80%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">override func touchesEnded(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123;</span><br><span class="line">    </span><br><span class="line">    for touch:AnyObject in touches &#123;</span><br><span class="line">        let t:UITouch &#x3D; touch as! UITouch</span><br><span class="line">        &#x2F;&#x2F;检测当前触摸的view是否是textField</span><br><span class="line">        if t.view &#x3D;&#x3D; pwdField || t.view &#x3D;&#x3D; pwdField || t.view &#x3D;&#x3D; phoneField&#123;</span><br><span class="line">            t.view?.becomeFirstResponder()</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            phoneField.resignFirstResponder()</span><br><span class="line">            pwdField.resignFirstResponder()</span><br><span class="line">            verificationField.resignFirstResponder()</span><br><span class="line">            self.resignFirstResponder()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Responsder </tag>
            
            <tag> touch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift Responsder</title>
      <link href="/2019/06/17/SwiftResponsder/"/>
      <url>/2019/06/17/SwiftResponsder/</url>
      
        <content type="html"><![CDATA[<h3 id="通过响应者链获取对应的第一个符合条件的Responsder"><a href="#通过响应者链获取对应的第一个符合条件的Responsder" class="headerlink" title="通过响应者链获取对应的第一个符合条件的Responsder"></a>通过响应者链获取对应的第一个符合条件的Responsder</h3><blockquote><p>传入响应检测的起点<code>Responsder</code>，一般用于UIView中查找响应者链中的控制器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func nextResponder(currentView:UIView)-&gt;UIViewController&#123;</span><br><span class="line">var vc:UIResponder &#x3D; currentView</span><br><span class="line">while vc.isKind(of: UIViewController.self) !&#x3D; true &#123;</span><br><span class="line">vc &#x3D; vc.next!</span><br><span class="line">&#125;</span><br><span class="line">return vc as! UIViewController</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Responsder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift中String转类名Class</title>
      <link href="/2019/06/17/Swift%E4%B8%ADString%E8%BD%AC%E7%B1%BB%E5%90%8DClass/"/>
      <url>/2019/06/17/Swift%E4%B8%ADString%E8%BD%AC%E7%B1%BB%E5%90%8DClass/</url>
      
        <content type="html"><![CDATA[<h3 id="String-gt-Class"><a href="#String-gt-Class" class="headerlink" title="String-&gt;Class"></a>String-&gt;Class</h3><blockquote><p>Swift中引入了命名空间的概念，转Class需要拼接命名空间</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;这是一个简单的通过字符串类名，转Class然后初始化后跳转的一个小例子</span><br><span class="line">@objc func OnClick()&#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;控制器字符串名称</span><br><span class="line">    let vcNameString &#x3D; &quot;OneViewController&quot;</span><br><span class="line">    &#x2F;&#x2F;获取命名空间也就是项目名称</span><br><span class="line">    let clsName &#x3D; Bundle.main.infoDictionary![&quot;CFBundleExecutable&quot;] as? String</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;拼接</span><br><span class="line">    let className&#x3D;clsName! + &quot;.&quot; + vcNameString</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;字符串转Class 需要注意的是这里的&#96;UIViewController&#96;强转必须带上&#96;.Type&#96;,否则转换不成功</span><br><span class="line">    let classT &#x3D; NSClassFromString(className)! as! UIViewController.Type</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    URLRouter.shared.pushViewController(viewController:classT.init()  , animated: true)</span><br><span class="line">&#125;&#x2F;&#x2F;成功完成跳转</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><strong><em>注意</em></strong><ol><li>Swift中引入了命名空间的概念，转Class需要拼接命名空间</li><li>这里的<code>UIViewController</code>强转必须带上<code>.Type</code>,否则转换不成功</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android报错</title>
      <link href="/2019/06/17/Android%20%E6%8A%A5%E9%94%99/"/>
      <url>/2019/06/17/Android%20%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h5 id="1-MISSING-ACCESSIBILITY-LABEL-WHERE-MINSDK-lt-17-YOU-SHOULD-PROVIDE-AN-‘ANDROID-HINT’"><a href="#1-MISSING-ACCESSIBILITY-LABEL-WHERE-MINSDK-lt-17-YOU-SHOULD-PROVIDE-AN-‘ANDROID-HINT’" class="headerlink" title="1.*MISSING ACCESSIBILITY LABEL: WHERE MINSDK &lt; 17, YOU SHOULD PROVIDE AN ‘ANDROID:HINT’ *"></a>1.*<em>MISSING ACCESSIBILITY LABEL: WHERE MINSDK &lt; 17, YOU SHOULD PROVIDE AN ‘ANDROID:HINT’ *</em></h5><blockquote><p>在布局文件（默认为main_activity.xml）添加</p></blockquote><pre><code>xmlns:tools=&quot;http://schemas.android.com/tools&quot;tools:ignore=&quot;LabelFor&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根目录下的build.gradle</title>
      <link href="/2019/06/16/%E3%80%8Ebuild.gradle%E3%80%8F/"/>
      <url>/2019/06/16/%E3%80%8Ebuild.gradle%E3%80%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="根目录下的build-gradle"><a href="#根目录下的build-gradle" class="headerlink" title="根目录下的build.gradle"></a>根目录下的build.gradle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Top-level build file where you can add configuration options common to all sub-projects&#x2F;modules.</span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;代码托管库，设置后可以在项目中引用jcenter上的开源项目</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;引用anroid插件</span><br><span class="line">    dependencies &#123;</span><br><span class="line">    </span><br><span class="line">        &#x2F;&#x2F;声明gradle插件，插件版本号</span><br><span class="line">        classpath &#39;com.android.tools.build:gradle:3.5.3&#39;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        &#x2F;&#x2F; in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="app目录下的build-gradle"><a href="#app目录下的build-gradle" class="headerlink" title="app目录下的build.gradle"></a>app目录下的build.gradle</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;声明是Android应用程序还是库模块</span><br><span class="line">&#x2F;&#x2F;com.android.appliccation 标识应用程序，可以直接运行</span><br><span class="line">&#x2F;&#x2F;com.android.library 标识这是一个库模块，依附于别的应用程序运行</span><br><span class="line"></span><br><span class="line">apply plugin: &#39;com.android.application&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;配置项目构建的各种属性</span><br><span class="line">android &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;程序在编译时会检查lint，有任何错误提示会停止build，我们可以关闭这个开关</span><br><span class="line">    lintOptions&#123;</span><br><span class="line">        &#x2F;&#x2F;即使报错也不会停止打包</span><br><span class="line">        abortOnError false</span><br><span class="line">        &#x2F;&#x2F;打包release版本的时候是否进行检测</span><br><span class="line">        checkReleaseBuilds false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;编译SDK的版本，也就是API Level</span><br><span class="line">    compileSdkVersion 28</span><br><span class="line">    &#x2F;&#x2F;build tools的版本，其中包括了打包工具aapt 、 dx</span><br><span class="line">    &#x2F;&#x2F;这个目录工具位于 sdk目录&#x2F;build-tools&#x2F; 下</span><br><span class="line">    buildToolsVersion &#39;28.0.3&#39;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;关闭Android Studio的PNG合法性检查</span><br><span class="line">    aaptOptions.cruncherEnabled &#x3D; false</span><br><span class="line">    aaptOptions.useNewCruncher &#x3D; false</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;默认配置</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        &#x2F;&#x2F;应用程序的包名</span><br><span class="line">        applicationId &quot;com.ifeiyv.android001&quot;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;最小的SDK版本，如果设置小于这个版本，或者大于maxSdkVersion将无法安装这个应用</span><br><span class="line">        minSdkVersion 19</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;目标sdk版本，充分测试过的版本（建议版本）</span><br><span class="line">        targetSdkVersion 28</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;版本号 每次更新增减</span><br><span class="line">        versionCode 1</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;版本号，用户看到的版本号</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;指定打包成Jar文件时候的文件名称</span><br><span class="line">        archivesBaseName &#x3D; &quot;demo-$versionName&quot;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;Native Development Kit</span><br><span class="line">        &#x2F;&#x2F;原生开发工具包是一组可以让您在Android应用中利用C和c++代码的工具,可用以从您自己的源代码构建,或者利用现有的预构建库.</span><br><span class="line">        ndk&#123;</span><br><span class="line">            &#x2F;&#x2F;设置（so）文件名称</span><br><span class="line">            moduleName &quot;testfeiyv&quot;</span><br><span class="line">            ldLibs &quot;log&quot;,&quot;z&quot;,&quot;m&quot;,&quot;jnigraphics&quot;,&quot;android&quot;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;显示指定支持的ABIs</span><br><span class="line">            abiFilters &quot;armeabi&quot;,&quot;x86&quot;,&quot;armeabi-v7a&quot;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;C++11</span><br><span class="line">            cFlags &quot;-sd&#x3D;c++11 -fexceptions&quot;</span><br><span class="line">            </span><br><span class="line">            stl &quot;gnustl_static&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;当方法数超过65535的时候允许打包成多个dex文件，动态加载dex</span><br><span class="line">        &#x2F;&#x2F;(方法的索引使用的是一个short值，而short最大值是65535)</span><br><span class="line">        multiDexEnabled true</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;Instrumentation单元测试</span><br><span class="line">        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    sourceSets&#123;</span><br><span class="line">        main&#123;</span><br><span class="line">            &#x2F;&#x2F;指定清单文件</span><br><span class="line">            manifest.srcFile &#39;AndroidManifest.xml&#39;</span><br><span class="line">            &#x2F;&#x2F;指定res资源目录</span><br><span class="line">            res.srcDirs &#x3D; [&#39;res&#39;]</span><br><span class="line">            &#x2F;&#x2F;asset资源文件</span><br><span class="line">            assets.srcDir  &#x3D; [&#39;assets&#39;]</span><br><span class="line">            &#x2F;&#x2F;jni代码目录</span><br><span class="line">            jni.srcDirs &#39;src&#x2F;main&#x2F;jni&#39;</span><br><span class="line">            &#x2F;&#x2F;jni库目录</span><br><span class="line">            jniLibs.srcDir &#39;src&#x2F;main&#x2F;jniLibs&#39;</span><br><span class="line">            &#x2F;&#x2F;指定Java源代码目录</span><br><span class="line">            java.srcDirs &#x3D; [&#39;src&#39;]</span><br><span class="line">            &#x2F;&#x2F;指定resource目录</span><br><span class="line">            resources.srcDirs &#x3D; [&#39;src&#39;]</span><br><span class="line">            &#x2F;&#x2F;指定aidl目录</span><br><span class="line">            aidl.srcDirs &#x3D; [&#39;src&#39;]</span><br><span class="line">            &#x2F;&#x2F;指定source目录</span><br><span class="line">            renderscript.srcDirs &#x3D; [&#39;src&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;指定debug模式的路径</span><br><span class="line">        debug.setRoot(&#39;build-types&#x2F;debug&#39;)</span><br><span class="line">        &#x2F;&#x2F;指定release模式的路径</span><br><span class="line">        release.setRoot(&#39;build-types&#x2F;release&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;mltiDex的一些相关配置，这样配置可以使编译速度更快</span><br><span class="line">    dexOptions&#123;</span><br><span class="line">        &#x2F;&#x2F;让它不要对Lib做preDexing</span><br><span class="line">        preDexLibraries &#x3D; fasle</span><br><span class="line">        &#x2F;&#x2F;开启incremental dexing,优化编译效率。这个功能Android Studio默认是关闭的</span><br><span class="line">        incremental true</span><br><span class="line">        &#x2F;&#x2F;增加java堆内存大小</span><br><span class="line">        javaMaxHeapSize &quot;4g&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;签名配置</span><br><span class="line">    signingConfigs&#123;</span><br><span class="line">        release&#123;</span><br><span class="line">            &#x2F;&#x2F;密钥文件路径</span><br><span class="line">            storeFile file(&quot;feiyv.keystore&quot;)</span><br><span class="line">            &#x2F;&#x2F;密钥文件密码</span><br><span class="line">            storePassword &quot;feiyvpwd&quot;</span><br><span class="line">            &#x2F;&#x2F;key 别名</span><br><span class="line">            keyAlias &quot;fy&quot;</span><br><span class="line">            &#x2F;&#x2F;key密码</span><br><span class="line">            keyPassword &quot;fypwd&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        debug&#123;</span><br><span class="line">           &#x2F;&#x2F;密钥文件路径</span><br><span class="line">            storeFile file(&quot;feiyv.keystore&quot;)</span><br><span class="line">            &#x2F;&#x2F;密钥文件密码</span><br><span class="line">            storePassword &quot;feiyvpwd&quot;</span><br><span class="line">            &#x2F;&#x2F;key 别名</span><br><span class="line">            keyAlias &quot;fy&quot;</span><br><span class="line">            &#x2F;&#x2F;key密码</span><br><span class="line">            keyPassword &quot;fypwd&quot; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;指定生成安装文件的配置，常有两个子包：release，debug，注：直接运行的都是debug安装文件</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        &#x2F;&#x2F;release版本的配置，即生成发布版文件的配置</span><br><span class="line">        release &#123;</span><br><span class="line">            &#x2F;&#x2F;是否支持zip</span><br><span class="line">            zipAlignEnabled true</span><br><span class="line">            &#x2F;&#x2F;移除无用的resource文件</span><br><span class="line">            shrinkResources true</span><br><span class="line">            &#x2F;&#x2F;是否对代码进行混淆，true标识混淆</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;指定混淆时使用的规则文件：</span><br><span class="line">            &#x2F;&#x2F;proguard-android.tex指所有项目通用的混淆规则，proguard-rules.pro当前项目特有的混淆规则</span><br><span class="line">            &#x2F;&#x2F;release的Proguard默认为Module下的proguard-rules.pro文件</span><br><span class="line">            proguardFiles getDefaultProguardFile(&#39;proguard-android-optimize.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;是否支持调试</span><br><span class="line">            debuggable false </span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F;ndk的一些配置</span><br><span class="line">            ndk &#123;</span><br><span class="line">                 &#x2F;&#x2F; cFlags &quot;-std&#x3D;c++11 -fexceptions -O3 -D__RELEASE__&quot; &#x2F;&#x2F; C++11</span><br><span class="line">                 &#x2F;&#x2F; platformVersion &#x3D; &quot;19&quot;</span><br><span class="line">                 moduleName &quot;hebbewifisafe&quot; &#x2F;&#x2F; 设置库(so)文件名称</span><br><span class="line">                ldLibs &quot;log&quot;, &quot;z&quot;, &quot;m&quot;, &quot;jnigraphics&quot;, &quot;android&quot;</span><br><span class="line">                 &#x2F;&#x2F; 引入库，比如要用到的__android_log_print</span><br><span class="line">                 abiFilters &quot;armeabi&quot;, &quot;x86&quot;, &quot;armeabi-v7a&quot;&#x2F;&#x2F; &quot;x86&quot;</span><br><span class="line">                 cFlags &quot;-std&#x3D;c++11 -fexceptions&quot; &#x2F;&#x2F; C++11</span><br><span class="line">                 stl &quot;gnustl_static&quot;</span><br><span class="line">             &#125;</span><br><span class="line">                &#x2F;&#x2F; 采用动态替换字符串的方式生成不同的 release.apk （3.0之后版本的修改方式）</span><br><span class="line">             applicationVariants.all &#123; variant -&gt;</span><br><span class="line">                 variant.outputs.all &#123; output -&gt;</span><br><span class="line">                     if (!variant.buildType.isDebuggable()) &#123;</span><br><span class="line">                         &#x2F;&#x2F; 获取签名的名字 variant.signingConfig.name</span><br><span class="line">                         &#x2F;&#x2F; 要被替换的源字符串</span><br><span class="line">                        def sourceFile &#x3D; &quot;app-release&quot;;</span><br><span class="line">                         &#x2F;&#x2F; 替换的字符串</span><br><span class="line">　　　　　　　　　　　　　　　def replaceFile &#x3D; &quot;Demo-V$&#123;variant.versionName&#125;.$&#123;releaseTime()&#125;&quot;</span><br><span class="line">　　　　　　　　　　　　　　　outputFileName &#x3D; output.outputFile.name.replace(sourceFile, replaceFile)</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             jniDebuggable false  &#x2F;&#x2F; 关闭jni调试</span><br><span class="line">        &#125;</span><br><span class="line">        debug &#123; &#x2F;&#x2F; debug版本的配置</span><br><span class="line">            minifyEnabled false</span><br><span class="line">             zipAlignEnabled true</span><br><span class="line">             shrinkResources true &#x2F;&#x2F; 移除无用的resource文件</span><br><span class="line">             proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class="line">             debuggable true</span><br><span class="line"> &#x2F;&#x2F;          jniDebuggable true</span><br><span class="line">             ndk &#123;</span><br><span class="line">                 cFlags &quot;-std&#x3D;c++11 -fexceptions -g -D __DEBUG__&quot; &#x2F;&#x2F; C++11</span><br><span class="line">             &#125;</span><br><span class="line">             jniDebuggable true</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    productFlavors&#123;</span><br><span class="line">        &#x2F;&#x2F;这里可以设置产品发布的一些东西</span><br><span class="line">        &#x2F;&#x2F;比如一种软件要发布到不同的渠道</span><br><span class="line">        &#x2F;&#x2F;且不同渠道中的包名不同，可以在此处</span><br><span class="line">        &#x2F;&#x2F;甚至可以设置不同的AndroidManifest.xml</span><br><span class="line">        tencent&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        huanwei&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        all&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 所谓ProductFlavors其实就是可定义的产品特性，</span><br><span class="line">    &#x2F;&#x2F; 配合 manifest merger 使用的时候就可以达成在一次编译</span><br><span class="line">    &#x2F;&#x2F; 过程中产生多个具有自己特性配置的版本。</span><br><span class="line">    &#x2F;&#x2F; 这个配置的作用就是，为每个渠道包产生不同的 UMENG_CHANNEL_VALUE 的值。</span><br><span class="line">    productFlavors.all&#123;</span><br><span class="line">        flavor -&gt; flavor.manifestPlaceholder &#x3D; [UMENG_CHANNEL_VALUE:name]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F; 指定当前项目的所有依赖关系：本地依赖、库依赖、远程依赖</span><br><span class="line"> &#x2F;&#x2F; 本地依赖：可以对本地 Jar 包或目录添加依赖关系</span><br><span class="line"> &#x2F;&#x2F; 库依赖：可以对项目中的库模块添加依赖关系</span><br><span class="line"> &#x2F;&#x2F; 远程依赖：可以对 jcenter 库上的开源项目添加依赖</span><br><span class="line"> &#x2F;&#x2F; 标准的远程依赖格式是 域名:组织名:版本号</span><br><span class="line"> </span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])</span><br><span class="line">    implementation &#39;com.android.support:recyclerview-v7:28.0.0&#39;</span><br><span class="line">&#x2F;&#x2F;    implementation &#39;androidx.appcompat:appcompat:1.0.2&#39;</span><br><span class="line">&#x2F;&#x2F;    implementation &#39;androidx.constraintlayout:constraintlayout:1.1.3&#39;</span><br><span class="line">    testImplementation &#39;junit:junit:4.12&#39;</span><br><span class="line">&#x2F;&#x2F;    androidTestImplementation &#39;androidx.test.ext:junit:1.1.0&#39;</span><br><span class="line">&#x2F;&#x2F;    androidTestImplementation &#39;androidx.test.espresso:espresso-core:3.1.1&#39;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 声明是要使用谷歌服务框架</span><br><span class="line"> apply plugin: &#39;com.google.gms.google-services&#39;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F; 第三方依赖库的本地缓存路径</span><br><span class="line"> task showMeCache &lt;&lt; &#123;</span><br><span class="line">     configurations.compile.each &#123; println it &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F; 使用maven仓库。android有两个标准的library文件服务器，一个jcenter一个maven。两者毫无关系。</span><br><span class="line">&#x2F;&#x2F; jcenter有的maven可能没有，反之亦然。</span><br><span class="line">&#x2F;&#x2F; 如果要使用jcenter的话就把mavenCentral()替换成jcenter()</span><br><span class="line">repositories &#123;</span><br><span class="line">     mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> def releaseTime() &#123;</span><br><span class="line">   return new Date().format(&quot;MMdd.HHmm&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> android </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWIFT 常用方法</title>
      <link href="/2019/06/12/SWIFT%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/06/12/SWIFT%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  LayoutProperties.swift</span><br><span class="line">&#x2F;&#x2F;  IfeiyvSwift</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;  Created by l on 2019&#x2F;6&#x2F;12.</span><br><span class="line">&#x2F;&#x2F;  Copyright © 2019 ifeiyv. All rights reserved.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">import UIKit</span><br><span class="line">import CommonCrypto</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Mark:------------Layout</span><br><span class="line">struct Screen&#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK:屏幕宽度</span><br><span class="line">    static var width:CGFloat&#123;</span><br><span class="line">        return UIScreen.main.bounds.width</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;MARK:屏幕高度</span><br><span class="line">    static var height:CGFloat&#123;</span><br><span class="line">        return UIScreen.main.bounds.height</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;MARK:分辨率 倍率</span><br><span class="line">    static var scale:CGFloat&#123;</span><br><span class="line">        return Screen.width&#x2F;375.0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extension UIView&#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 设置或者获取UIView的frame</span><br><span class="line">    var fy_frame:CGRect&#123;</span><br><span class="line">        set&#123;</span><br><span class="line">            self.frame &#x3D; fy_frame</span><br><span class="line">        &#125;</span><br><span class="line">        get&#123;</span><br><span class="line">            return self.frame</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 设置或者获取UIView的origin</span><br><span class="line">    var fy_origin:CGPoint&#123;</span><br><span class="line">        set&#123;</span><br><span class="line">            self.frame &#x3D; CGRect(x: fy_origin.x, y: fy_origin.y, width: self.fy_width, height: self.fy_height)</span><br><span class="line">        &#125;</span><br><span class="line">        get&#123;</span><br><span class="line">            return self.frame.origin</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 设置或者获取UIView的size</span><br><span class="line">    var fy_size:CGSize&#123;</span><br><span class="line">        set&#123;</span><br><span class="line">            self.frame &#x3D; CGRect(x: self.fy_origin.x, y: self.fy_origin.y, width: fy_size.width, height: fy_size.height)</span><br><span class="line">        &#125;</span><br><span class="line">        get&#123;</span><br><span class="line">            return self.frame.size</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 设置或者获取UIView的宽度</span><br><span class="line">    var fy_width:CGFloat&#123;</span><br><span class="line">        set&#123;</span><br><span class="line">            self.frame &#x3D; CGRect(x: self.frame.origin.x, y: self.frame.origin.y, width: fy_width, height: self.frame.size.height)</span><br><span class="line">        &#125;</span><br><span class="line">        get&#123;</span><br><span class="line">           return self.bounds.size.width</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 设置或者获取UIView的宽度</span><br><span class="line">    var fy_height:CGFloat&#123;</span><br><span class="line">        set&#123;</span><br><span class="line">            self.frame &#x3D; CGRect(x: self.frame.origin.x, y: self.frame.origin.y, width: self.frame.size.width, height: fy_height)</span><br><span class="line">        &#125;</span><br><span class="line">        get&#123;</span><br><span class="line">            return self.bounds.size.height</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 设置或者获取UIView的x坐标</span><br><span class="line">    var fy_x:CGFloat&#123;</span><br><span class="line">        set&#123;</span><br><span class="line">            self.frame &#x3D; CGRect(x: fy_x, y: self.frame.origin.y, width: self.frame.size.width, height: self.frame.size.height)</span><br><span class="line">        &#125;</span><br><span class="line">        get&#123;</span><br><span class="line">            return self.frame.origin.x</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 设置或者获取UIView的y坐标</span><br><span class="line">    var fy_y:CGFloat&#123;</span><br><span class="line">        set&#123;</span><br><span class="line">            self.frame &#x3D; CGRect(x: self.frame.origin.x, y: fy_y, width: self.frame.size.width, height:self.frame.size.height)</span><br><span class="line">        &#125;</span><br><span class="line">        get&#123;</span><br><span class="line">            return self.frame.origin.y</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 设置或者获取UIView的maxX坐标</span><br><span class="line">    var fy_maxX:CGFloat&#123;</span><br><span class="line">        get&#123;</span><br><span class="line">            return self.fy_x+self.fy_width</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 设置或者获取UIView的maxY坐标</span><br><span class="line">    var fy_maxY:CGFloat&#123;</span><br><span class="line">        get&#123;</span><br><span class="line">            return self.fy_y+self.fy_height</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension UIView&#123;</span><br><span class="line">    &#x2F;&#x2F;MARK: 切圆角</span><br><span class="line">    func corner(byRoundingCorners corners: UIRectCorner, radii: CGFloat) &#123;</span><br><span class="line">        let maskPath &#x3D; UIBezierPath(roundedRect: self.bounds, byRoundingCorners: corners, cornerRadii: CGSize(width: radii, height: radii))</span><br><span class="line">        let maskLayer &#x3D; CAShapeLayer()</span><br><span class="line">        maskLayer.frame &#x3D; self.bounds</span><br><span class="line">        maskLayer.path &#x3D; maskPath.cgPath</span><br><span class="line">        self.layer.mask &#x3D; maskLayer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">enum FYError: Swift.Error &#123;</span><br><span class="line">    case NOFINT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extension UINib&#123;</span><br><span class="line">    &#x2F;&#x2F;MARK: 加载XIB</span><br><span class="line">    public class func readNibView(str: String) throws -&gt; UIView &#123;</span><br><span class="line">        let nib &#x3D; UINib.init(nibName: str, bundle: nil)</span><br><span class="line">        if let view &#x3D; nib.instantiate(withOwner: nil, options: nil).first as? UIView &#123;</span><br><span class="line">            return view</span><br><span class="line">        &#125;</span><br><span class="line">        throw FYError.NOFINT</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Mark:------------UIColor</span><br><span class="line">extension UIColor&#123;</span><br><span class="line">    </span><br><span class="line">    func fy_RGB(red:CGFloat,green:CGFloat,blue:CGFloat) -&gt; UIColor &#123;</span><br><span class="line">        return fy_RGBA(red: red, green: green, blue: blue, alpha: 1.0)</span><br><span class="line">    &#125;</span><br><span class="line">    func fy_RGBA(red:CGFloat,green:CGFloat,blue:CGFloat,alpha:CGFloat) -&gt; UIColor &#123;</span><br><span class="line">        return UIColor.init(red: red&#x2F;255.0, green: green&#x2F;255.0, blue: blue&#x2F;255.0, alpha: alpha)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func fy_hexColor(hexColor:String,defaultStringColor:String &#x3D; &quot;000000&quot;,alpha:CGFloat &#x3D; 1.0) -&gt; UIColor &#123;</span><br><span class="line">        var cString: String &#x3D; hexColor.trimmingCharacters(in: NSCharacterSet.whitespacesAndNewlines)</span><br><span class="line">        </span><br><span class="line">        if cString.count &lt; 6 &#123;</span><br><span class="line">            cString &#x3D; defaultStringColor</span><br><span class="line">        &#125;</span><br><span class="line">        if cString.hasPrefix(&quot;0X&quot;) || cString.hasPrefix(&quot;0x&quot;) &#123;</span><br><span class="line">            cString &#x3D; String(cString.suffix(from: cString.index(cString.startIndex, offsetBy: 2)))</span><br><span class="line">        &#125;</span><br><span class="line">        if cString.hasPrefix(&quot;#&quot;) &#123;</span><br><span class="line">            cString &#x3D; String(cString.suffix(from: cString.index(cString.startIndex, offsetBy: 1)))</span><br><span class="line">        &#125;</span><br><span class="line">        if cString.count !&#x3D; 6 &#123;</span><br><span class="line">            cString &#x3D; defaultStringColor</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        var range: NSRange &#x3D; NSMakeRange(0, 2)</span><br><span class="line">        let rString &#x3D; (cString as NSString).substring(with: range)</span><br><span class="line">        range.location &#x3D; 2</span><br><span class="line">        let gString &#x3D; (cString as NSString).substring(with: range)</span><br><span class="line">        range.location &#x3D; 4</span><br><span class="line">        let bString &#x3D; (cString as NSString).substring(with: range)</span><br><span class="line">        </span><br><span class="line">        var r: UInt32 &#x3D; 0x0</span><br><span class="line">        var g: UInt32 &#x3D; 0x0</span><br><span class="line">        var b: UInt32 &#x3D; 0x0</span><br><span class="line">        Scanner(string: rString).scanHexInt32(&amp;r)</span><br><span class="line">        Scanner(string: gString).scanHexInt32(&amp;g)</span><br><span class="line">        Scanner(string: bString).scanHexInt32(&amp;b)</span><br><span class="line">        return fy_RGBA(red: CGFloat(r), green: CGFloat(g), blue: CGFloat(b), alpha: alpha)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Mark:------------String</span><br><span class="line">extension String&#123;</span><br><span class="line">    </span><br><span class="line">    static let EMPTY &#x3D; &quot;&quot;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; String使用下标截取字符串</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 例: &quot;示例字符串&quot;[0..&lt;2] 结果是 &quot;示例&quot;</span><br><span class="line">    subscript (r: Range&lt;Int&gt;) -&gt; String &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            let startIndex &#x3D; self.index(self.startIndex, offsetBy: r.lowerBound)</span><br><span class="line">            let endIndex &#x3D; self.index(self.startIndex, offsetBy: r.upperBound)</span><br><span class="line">            </span><br><span class="line">            return String(self[startIndex..&lt;endIndex])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 返回一个字符串的前n位, 若字符串长不足n，则直接返回当前字符串</span><br><span class="line">    func fy_start(length n: Int) -&gt; String &#123;</span><br><span class="line">        if self.count &lt; n &#123;</span><br><span class="line">            return self</span><br><span class="line">        &#125;</span><br><span class="line">        if n &lt; 0 &#123;</span><br><span class="line">            return self</span><br><span class="line">        &#125;</span><br><span class="line">        let index &#x3D; self.index(self.startIndex, offsetBy: n)</span><br><span class="line">        return String(self[..&lt;index])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 返回一个字符串的后n位, 若字符串长不足n，则直接返回当前字符串</span><br><span class="line">    func fy_last(length n: Int) -&gt; String &#123;</span><br><span class="line">        if self.count &lt; n &#123;</span><br><span class="line">            return self</span><br><span class="line">        &#125;</span><br><span class="line">        let index &#x3D; self.index((self.endIndex), offsetBy: -n)</span><br><span class="line">        return String(self[index...])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 删除所有的空格</span><br><span class="line">    func fy_trimAll() -&gt; String &#123;</span><br><span class="line">        return self.replacingOccurrences(of: &quot; &quot;, with: String.EMPTY)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 判断是否包含数字和字母</span><br><span class="line">    func fy_isPassWord() -&gt; Bool &#123;</span><br><span class="line">        let numberRegex:NSPredicate &#x3D; NSPredicate(format: &quot;SELF MATCHES %@&quot;, &quot;^.*[0-9]+.*$&quot;)</span><br><span class="line">        </span><br><span class="line">        let letterRegex:NSPredicate &#x3D; NSPredicate(format: &quot;SELF MATCHES %@&quot;, &quot;^.*[A-Za-z]+.*$&quot;)</span><br><span class="line">        </span><br><span class="line">        if numberRegex.evaluate(with: self) &amp;&amp; letterRegex.evaluate(with: self)&#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: md5加密</span><br><span class="line">    var fy_md5: String &#123;</span><br><span class="line">        let cStr &#x3D; self.cString(using: .utf8)</span><br><span class="line">        let digestLen &#x3D; Int(CC_MD5_DIGEST_LENGTH)</span><br><span class="line">        let buffer &#x3D; UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: digestLen)</span><br><span class="line">        CC_MD5(cStr!,(CC_LONG)(strlen(cStr!)), buffer)</span><br><span class="line">        </span><br><span class="line">        let md5String &#x3D; NSMutableString()</span><br><span class="line">        for i in 0 ..&lt; digestLen &#123;</span><br><span class="line">            md5String.appendFormat(&quot;%02X&quot;, buffer[i])</span><br><span class="line">        &#125;</span><br><span class="line">        free(buffer)</span><br><span class="line">        return md5String as String</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: base64编码</span><br><span class="line">    var fy_base64Encoding: String &#123;</span><br><span class="line">        let data &#x3D; self.data(using: String.Encoding.utf8)</span><br><span class="line">        var base64String &#x3D; data?.base64EncodedString(options: .lineLength76Characters)</span><br><span class="line">        base64String &#x3D; base64String?.replacingOccurrences(of: &quot;\r&quot;, with: &quot;&quot;)</span><br><span class="line">        return base64String ?? &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: base64解码</span><br><span class="line">    var fy_base64Decoded: String &#123;</span><br><span class="line">        </span><br><span class="line">        let decodedData &#x3D; Data(base64Encoded: self, options: Data.Base64DecodingOptions(rawValue: 0))</span><br><span class="line">        return String(data: decodedData!, encoding: String.Encoding.utf8) ?? &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 返回188****8888类型字符串</span><br><span class="line">    func fy_getSecretMobileNo() -&gt; String &#123;</span><br><span class="line">        if self.isEmpty &#123; return self &#125;</span><br><span class="line">        if self.count &gt; 7 &#123;</span><br><span class="line">            return &quot;\(self.fy_start(length: 3))****\(self.fy_last(length:4))&quot;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return self;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 截取从start开始,长度为lenght的字符串</span><br><span class="line">    &#x2F;&#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; - Parameters:</span><br><span class="line">    &#x2F;&#x2F;&#x2F;   - start: 开始</span><br><span class="line">    &#x2F;&#x2F;&#x2F;   - lenght: 长度</span><br><span class="line">    &#x2F;&#x2F;&#x2F; - Returns: 处理结果</span><br><span class="line">    func fy_startIndexToLenght(_ start: Int, lenght: Int) -&gt; String &#123;</span><br><span class="line">        if start &gt; self.count &#123;</span><br><span class="line">            return self</span><br><span class="line">        &#125;</span><br><span class="line">        let startIndex &#x3D; self.index(self.startIndex, offsetBy: start)</span><br><span class="line">        if self.count &lt; (start + lenght) &#123;</span><br><span class="line">            return String(self.suffix(from: startIndex))</span><br><span class="line">        &#125;</span><br><span class="line">        let endIndex &#x3D; self.index(self.startIndex, offsetBy: start + lenght)</span><br><span class="line">        return String(self[startIndex..&lt;endIndex])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 判断链接中是否存在中文</span><br><span class="line">    func fy_isIncludeChineseIn() -&gt; Bool &#123;</span><br><span class="line">        for(_, value) in self.enumerated() &#123;</span><br><span class="line">            if value &gt;&#x3D; &quot;\u&#123;4E00&#125;&quot; &amp;&amp; value &lt;&#x3D; &quot;\u&#123;9FA5&#125;&quot; &#123;</span><br><span class="line">                return true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;MARK: 判断是否有效邮箱</span><br><span class="line">    &#x2F;&#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; - Returns: 结果</span><br><span class="line">    func fy_isPeriodEmail() -&gt; Bool &#123;</span><br><span class="line">        let email &#x3D; &quot;[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]&#123;2,4&#125;&quot;</span><br><span class="line">        let regextestEmails &#x3D; NSPredicate(format: &quot;SELF MATCHES %@&quot;, email)</span><br><span class="line">        </span><br><span class="line">        return regextestEmails.evaluate(with: self)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 判断是否有效身份证号</span><br><span class="line">    &#x2F;&#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; - Returns: Bool</span><br><span class="line">    func fy_isPeriodIdCard() -&gt; Bool &#123;</span><br><span class="line">        </span><br><span class="line">        if self.count !&#x3D; 18 &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        let regex2 &#x3D; &quot;^(^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$)|(^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])((\\d&#123;4&#125;)|\\d&#123;3&#125;[Xx])$)$&quot;</span><br><span class="line">        let identityCardPredicate &#x3D; NSPredicate(format: &quot;SELF MATCHES %@&quot;, regex2)</span><br><span class="line">        let flag &#x3D; identityCardPredicate.evaluate(with: self)</span><br><span class="line">        if !flag &#123;</span><br><span class="line">            &#x2F;&#x2F; 格式错误</span><br><span class="line">            return flag</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            &#x2F;&#x2F; 格式正确，判断合法性</span><br><span class="line">            &#x2F;&#x2F; 将前十七位加权因子保存在数组里</span><br><span class="line">            let idCardWiArray &#x3D; [&quot;7&quot;, &quot;9&quot;, &quot;10&quot;, &quot;5&quot;, &quot;8&quot;, &quot;4&quot;, &quot;2&quot;, &quot;1&quot;, &quot;6&quot;, &quot;3&quot;, &quot;7&quot;, &quot;9&quot;, &quot;10&quot;, &quot;5&quot;, &quot;8&quot;, &quot;4&quot;, &quot;2&quot;]</span><br><span class="line">            &#x2F;&#x2F; 这是除以11后，可能产生的11位余数， 验证码，也保存在数组里</span><br><span class="line">            let idCardYArray &#x3D; [&quot;1&quot;, &quot;0&quot;, &quot;10&quot;, &quot;9&quot;, &quot;8&quot;, &quot;7&quot;, &quot;6&quot;, &quot;5&quot;, &quot;4&quot;, &quot;3&quot;, &quot;2&quot;]</span><br><span class="line">            var idCardArr &#x3D; [Int]()</span><br><span class="line">            var idCardWiSum &#x3D; 0</span><br><span class="line">            for index in 0..&lt;17 &#123;</span><br><span class="line">                let subStrIndex &#x3D; fy_startIndexToLenght(index, lenght: 1)</span><br><span class="line">                let idCardWiIndex &#x3D; idCardWiArray[index]</span><br><span class="line">                &#x2F;&#x2F; 数组保存所有乘积</span><br><span class="line">                idCardArr.append(Int(subStrIndex)! * Int(idCardWiIndex)!)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; 将所有乘积相加</span><br><span class="line">            for index in 0..&lt;idCardArr.count &#123;</span><br><span class="line">                idCardWiSum +&#x3D; idCardArr[index]</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; 计算出校验码所在数组的位置</span><br><span class="line">            let idCardMod &#x3D; idCardWiSum % 11</span><br><span class="line">            &#x2F;&#x2F; 得到最后一位身份证号码</span><br><span class="line">            let idCardLast &#x3D; fy_startIndexToLenght(17, lenght: 1)</span><br><span class="line">            if idCardMod &#x3D;&#x3D; 2 &#123;</span><br><span class="line">                if idCardLast &#x3D;&#x3D; &quot;X&quot; || idCardLast &#x3D;&#x3D; &quot;x&quot; &#123;</span><br><span class="line">                    return true</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if idCardLast &#x3D;&#x3D; idCardYArray[idCardMod] &#123;</span><br><span class="line">                    return true</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return false</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 正则匹配6-12位数字和大小写字母组合</span><br><span class="line">    &#x2F;&#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; - Returns: Bool</span><br><span class="line">    func fy_checkPassword() -&gt; Bool &#123;</span><br><span class="line">        let password &#x3D; &quot;^(?![0-9]+$)(?![a-zA-Z]+$)[a-zA-Z0-9]&#123;6,12&#125;&quot;</span><br><span class="line">        let regextestPassword &#x3D; NSPredicate(format: &quot;SELF MATCHES %@&quot;, password)</span><br><span class="line">        return regextestPassword.evaluate(with:self)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 判断字符串是否包含其他字符串(必须全部一样)</span><br><span class="line">    func fy_contains(find: String) -&gt; Bool&#123;</span><br><span class="line">        return self.range(of: find) !&#x3D; nil</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 字符串转换成整型</span><br><span class="line">    func fy_toInt() -&gt; Int? &#123;</span><br><span class="line">        return Int(self)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 识别有效手机号</span><br><span class="line">    func fy_verifyPhoneNumber() -&gt; Bool &#123;</span><br><span class="line">        let mobile &#x3D; &quot;^1((3[0-9]|4[5-68-9]|5[0-35-9]|6[6]|7[0-9]|8[0-9]|9[89])\\d&#123;8&#125;$)&quot;</span><br><span class="line">        let regextestmobile &#x3D; NSPredicate(format: &quot;SELF MATCHES %@&quot;,mobile)</span><br><span class="line">        return regextestmobile.evaluate(with: self)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F;MARK: 识别是否有效座机号 eg: 021-8688995</span><br><span class="line">    func fy_landlineNumber() -&gt; Bool &#123;</span><br><span class="line">        let strNum &#x3D; &quot;^(0\\d&#123;2,3&#125;-?\\d&#123;7,8&#125;$)&quot;</span><br><span class="line">        let checktest &#x3D; NSPredicate.init(format: &quot;SELF MATCHES %@&quot;, strNum)</span><br><span class="line">        let isPhone &#x3D; checktest.evaluate(with: self)</span><br><span class="line">        </span><br><span class="line">        let strNum1 &#x3D; &quot;^(\\d&#123;7,8&#125;$)&quot;</span><br><span class="line">        let checktest1 &#x3D; NSPredicate.init(format: &quot;SELF MATCHES %@&quot;, strNum1)</span><br><span class="line">        let isPhone1 &#x3D; checktest1.evaluate(with: self)</span><br><span class="line">        </span><br><span class="line">        if isPhone || isPhone1 &#123;</span><br><span class="line">            return true</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extension Array&#123;</span><br><span class="line">    &#x2F;&#x2F;MARK: 数组转JSON字符串</span><br><span class="line">    func arrayToString() -&gt; String? &#123;</span><br><span class="line">        if let data &#x3D; try? JSONSerialization.data(withJSONObject: self, options: JSONSerialization.WritingOptions.init(rawValue: 0)) &#123;</span><br><span class="line">            if let jsonStr &#x3D; String.init(data: data, encoding: String.Encoding.utf8) &#123;</span><br><span class="line">                return jsonStr</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return nil</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift Method </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWIFT关键字</title>
      <link href="/2019/06/06/SWIFT%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2019/06/06/SWIFT%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h4 id="discardableResult"><a href="#discardableResult" class="headerlink" title="@discardableResult"></a>@discardableResult</h4><blockquote><p>修饰的方法有返回值，调用时可以不接收返回值，并且不会出现警告⚠️</p></blockquote><h4 id="IBInspectable"><a href="#IBInspectable" class="headerlink" title="IBInspectable"></a>IBInspectable</h4><blockquote><p>属性声明的时候加上 IBInspectable 修饰，Xcode 会自动添加到 Storyboard 中 Attributes inspector 栏目中</p></blockquote><h4 id="typealias"><a href="#typealias" class="headerlink" title="typealias"></a>typealias</h4><blockquote><p>定义了一个类型别名</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Swift </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift关键字 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
