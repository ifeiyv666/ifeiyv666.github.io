{"meta":{"title":"飞羽的博客","subtitle":"飞羽个人博客","description":"程序猴一枚，目前主要从事于基于iOS,Flutter,Android的App移动端开发","author":"飞羽","url":"https://ifeiyv666.github.io","root":"/"},"pages":[{"title":"所有分类","date":"2020-03-17T03:46:59.440Z","updated":"2020-03-17T03:46:59.433Z","comments":true,"path":"categories/index.html","permalink":"https://ifeiyv666.github.io/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2020-03-17T03:49:22.512Z","updated":"2020-03-17T03:49:22.500Z","comments":true,"path":"friends/index.html","permalink":"https://ifeiyv666.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"","date":"2020-03-17T06:19:07.186Z","updated":"2020-03-17T06:19:07.174Z","comments":true,"path":"mylist/index.html","permalink":"https://ifeiyv666.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-03-17T03:44:56.309Z","updated":"2020-03-17T03:44:56.302Z","comments":true,"path":"tags/index.html","permalink":"https://ifeiyv666.github.io/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2020-03-18T06:48:46.932Z","updated":"2020-03-18T06:48:46.920Z","comments":true,"path":"about/index.html","permalink":"https://ifeiyv666.github.io/about/index.html","excerpt":"","text":"个人博客微信：feiyv666邮箱：ifeiyv@126.com"},{"title":"404 Not Found","date":"2020-03-17T09:51:35.499Z","updated":"2020-03-17T09:51:35.491Z","comments":true,"path":"404.html","permalink":"https://ifeiyv666.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"}],"posts":[{"title":"Git命令","slug":"Git命令","date":"2020-06-13T09:30:07.000Z","updated":"2020-06-13T12:17:05.411Z","comments":true,"path":"2020/06/13/Git命令/","link":"","permalink":"https://ifeiyv666.github.io/2020/06/13/Git%E5%91%BD%E4%BB%A4/","excerpt":"","text":"Git命令安装Git就不在这里记录了，只记录使用。并且是在MAC环境下，Window环境可能会有少许的差异。 一 、初始化一个本地化仓库 首先选择一个要存储的目录,创建一个要管理的 GitStudy目录 1mkdir GitStudy 进入到GitStudy目录 1cd GitStudy 使用git init初始化仓库,会在 GitStudy目录下创建一个 .git 的隐藏文件夹 1git init 二、版本控制 git add &lt;file&gt; 把改动或新建的文件添加到暂存区 1git add readme.txt git commit -m &lt;message&gt; 确认把暂存区的文件提交到当前的分支 1git commit -m \"add readme.txt\" 提交后输出信息 123[master (root-commit) 80af25d] add readme.txt 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 readme.txt 版本回退 git log 查看历史记录 git log –pretty=oneline (只会输出版本号和提交的message日志) 12345git reset #回退上一个版本git reset --hard HEAD^ #回退上一个版本git reset --hard &lt;版本号&gt; #回退到版本号对应的版本，回退之后，也可以通过这个命令返回回退之前的版本 如果记不住版本号可以用 git reflog命令查看记录,最前面的字符串就是&lt;版本号&gt; 12143e5ea (HEAD -&gt; master) HEAD@&#123;0&#125;: commit: add code1.txt80af25d HEAD@&#123;1&#125;: commit (initial): add readme.txt 丢弃工作区的修改： 12345git checkout -- readme.txt# 如果没有git add 加入缓存区，此文件所有更改被撤销# 如果已经被 git add 或者 git commit 回退没有效果# 如果 git add 或者 git commit 之后进行修改了，回退到 git add 或者 git commit 之后的状态 三、添加远程库 在本地的 GitStudy （根据实际情况，我上面创建的是GitStudy目录）目录下面运行命令： 1git remote add origin https://gitee.com/用户名/GitStudy.git 把本地库推送到远程分支 1git push -u origin master 四、从远程库克隆1git clone -b master https://gitee.com/用户名/GitStudy.git 五、创建与合并分支 创建dev分支，切换到dev 12345678git checkout -b dev#log #Switched to a new branch 'dev'# -b 表示创建并且进行切换,相当于执行了以下两个命令# git branch dev （创建dev分支）# git checkout dev （切换到 dev分支） 或者 新版本加入了 switch 切换分支命令 123git switch -c dev #创建并切换到新的dev分支git switch dev #直接切换到已有的dev分支 查看当前分支 1234567git branch#log# *dev# master# 前面带*，表示当前所在的分支 合并分支,假设要把dev分支合并到master分支 1234567#如果当前在dev分支,首先要切换到master分支，如果当前是在master分支，则不需要切换分支git checkout master #当前已经切换到master分支#执行合并命令git merge dev 删除分支 123456789101112# 如果上面dev分支不需要了，可以保留，也可以进行删除# ****删除的时候当前分支不要是处于被删除的分支***git branch -d dev# log# Deleted branch dev (was f23g67u).# 如果检出一个分支用来开发新分支，进行开发。# 在后来不进行合并，直接删除，会提示分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数git branch -D test #强制删除 test 分支 解决冲突 12345#找到冲突文件,打开# Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容的冲突部分# 根据情况删除掉不要的， git add &lt;filename&gt; 暂存 ，commit提交 Bug分支 1234567891011121314151617181920212223#使用场景# 当前dev分支任务未完成，不能提交。而在另外一个test分支又需要进行修改。# 这个时候需要把现在的工作现场 存储 起来，等以后继续操作。git stash #暂存当前工作现场#这个时候就可以切换到其他分支，做其他工作了git checkout test#如果test分支工作完成了，并且已经提交。要切换回我们的dev分支，继续进行未完的工作。git checkout dev#接下来就要恢复现场，有两种方式# 查看git stash list #可以查看所有的已经存储的现场# 第一种方式git stash apply #恢复现场 但是stash存储的内容并不删除git stash drop #删除stash存储的数据# 第二种方式git stash pop #恢复现场，并且删除stash存储的数据 六、tag标签 创建tag标签 1git tag v1.0 查看tag标签 1234git tag#log# v1.0 操作标签 1234567891011git tag -d v1.0 #删除标签（删除本地标签）git push origin v1.0 #推送tag标签到远程git push origin --tags #推送全部尚未推送到远程的本地标签#如果要删除推送到远程的tag标签需要两步：# 1.先删除本地的标签git tag -d v1.0# 2.删除远程的tag标签git push origin :refs/tags/v1.0","categories":[{"name":"Git","slug":"Git","permalink":"https://ifeiyv666.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://ifeiyv666.github.io/tags/Git/"}]},{"title":"iOS Bugly集成","slug":"Bugly","date":"2020-05-26T03:22:34.000Z","updated":"2020-05-26T03:47:04.141Z","comments":true,"path":"2020/05/26/Bugly/","link":"","permalink":"https://ifeiyv666.github.io/2020/05/26/Bugly/","excerpt":"","text":"Bugly iOS SDK 使用指南SDK 集成Bugly提供两种集成方式供iOS开发者选择： 通过CocoaPods集成 手动集成 如果您是从Bugly 2.0以下版本升级过来的，请查看iOS SDK 升级指南 Bugly iOS SDK 最低兼容系统版本 iOS 7.0 通过CocoaPods集成在工程的Podfile里面添加以下代码： 1pod &#39;Bugly&#39; 保存并执行pod install,然后用后缀为.xcworkspace的文件打开工程。 注意: 命令行下执行pod search Bugly,如显示的Bugly版本不是最新的，则先执行pod repo update操作更新本地repo的内容 关于CocoaPods的更多信息请查看 CocoaPods官方网站。 手动集成 下载 Bugly iOS SDK 拖拽Bugly.framework文件到Xcode工程内(请勾选Copy items if needed选项) 添加依赖库 SystemConfiguration.framework Security.framework libz.dylib 或 libz.tbd libc++.dylib 或 libc++.tbd 初始化SDK导入头文件在工程的AppDelegate.m文件导入头文件 1#import &lt;Bugly&#x2F;Bugly.h&gt; 如果是Swift工程，请在对应bridging-header.h中导入 初始化Bugly在工程AppDelegate.m的application:didFinishLaunchingWithOptions:方法中初始化： Objective-C 1234- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; [Bugly startWithAppId:@&quot;此处替换为你的AppId&quot;]; return YES;&#125; Swift 1234func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool &#123; Bugly.startWithAppId(\"此处替换为你的AppId\") return true&#125; Bugly iOS 符号表配置（可选）介绍什么是符号表？符号表是内存地址与函数名、文件名、行号的映射表。符号表元素如下所示： 1&lt;起始地址&gt; &lt;结束地址&gt; &lt;函数&gt; [&lt;文件名:行号&gt;] 为什么要配置符号表？为了能快速并准确地定位用户APP发生Crash的代码位置，Bugly使用符号表对APP发生Crash的程序堆栈进行解析和还原。 举一个例子： Bugly提供了自动和手动两种方法配置iOS符号表。 自动配置：XCode + sh脚本自动配置请首先下载和解压自动配置符号表工具包，然后选择上传方式并配置Xcode的编译执行脚本。 上传方式使用脚本自动配置支持两种上传方式： 方式一：直接上传dSYM文件（默认方式 ） 方式二：提取dSYM文件的符号表文件并上传 其中，使用方式二需要额外操作以下几步： 下载符号表提取工具依赖的Java运行环境（JRE或JDK版本需要&gt;=1.6） 把工具包buglySymbolIOS.jar保存在用户主目录（Home）的bin目录下（没有bin文件夹,请自行创建）: 配置Xcode编译执行脚本 在Xcode工程对应Target的Build Phases中新增Run Scrpit Phase 打开工具包中的dSYM_upload.sh，复制所有内容，在新增的Run Scrpit Phase中粘贴 修改新增的Run Scrpit中的 &lt;YOUR_APP_ID&gt; 为您的App ID，&lt;YOUR_APP_KEY&gt;为您的App Key，&lt;YOUR_BUNDLE_ID&gt; 为App的Bundle Id 脚本默认在Debug模式及模拟器编译情况下不会上传符号表，在需要上传的时候，请修改下列选项 Debug模式编译是否上传，1＝上传 0＝不上传，默认不上传 UPLOAD_DEBUG_SYMBOLS=0 模拟器编译是否上传，1＝上传 0＝不上传，默认不上传 UPLOAD_SIMULATOR_SYMBOLS=0 至此，自动上传符号表脚本配置完毕，Bugly 会在每次 Xcode 工程编译后自动完成符号表配置工作。 手动配置手动配置的流程如下： 下载最新版Bugly iOS符号表工具，其中工具包中包括： 符号表工具JAR包（buglySymboliOS.jar） Windows的脚本（buglySymboliOS.bat） Shell脚本（buglySymboliOS.sh） 默认符号表配置文件（settings.txt） 符号表工具iOS版-使用指南 根据Crash的UUID定位dSYM文件 使用工具生成符号表文件（zip文件） 在页面上传符号表文件 其他说明 Bugly iOS符号表工具2.3.0及以上版本增加了上传功能，2.5.0及以上版本支持dSYM文件的上传； 定位dSYM文件的方法和工具的使用方法请参考：“符号表工具iOS版-使用指南”。 符号表上传接口Bugly提供了上传符号表的API接口（使用POST方式上传）: https://api.bugly.qq.com/openapi/file/upload/symbol HTTPS接口支持上传dSYM文件（需要压缩成Zip文件）和符号表文件（Symbol）。 参数说明上传接口的参数说明如下： 属性 说明 api_version API版本，固定为1 app_id App ID app_key App Key symbolType 符号表类型，iOS为2 bundleId 包名（Package） productVersion 版本号（Version Name） fileName 符号表文件名 file 符号表文件 其中包名、版本号和符号表文件名需要做URL Encode。 例子：使用Curl上传使用Curl工具来上传的例子如下： 上传dSYM文件 1curl -k &quot;https:&#x2F;&#x2F;api.bugly.qq.com&#x2F;openapi&#x2F;file&#x2F;upload&#x2F;symbol?app_key&#x3D;xxxxxx&amp;app_id&#x3D;xxxxxx&quot; --form &quot;api_version&#x3D;1&quot; --form &quot;app_id&#x3D;xxxxxx&quot; --form &quot;app_key&#x3D;xxxxxx&quot; --form &quot;symbolType&#x3D;2&quot; --form &quot;bundleId&#x3D;com.demo.test&quot; --form &quot;productVersion&#x3D;1.0&quot; --form &quot;channel&#x3D;xxx&quot; --form &quot;fileName&#x3D;app.dSYM.zip&quot; --form &quot;file&#x3D;@app.dSYM.zip&quot; --verbose 上传符号表文件（Symbol文件） 1curl -k &quot;https:&#x2F;&#x2F;api.bugly.qq.com&#x2F;openapi&#x2F;file&#x2F;upload&#x2F;symbol?app_key&#x3D;xxxxxx&amp;app_id&#x3D;xxxxxx&quot; --form &quot;api_version&#x3D;1&quot; --form &quot;app_id&#x3D;xxxxxx&quot; --form &quot;app_key&#x3D;xxxxxx&quot; --form &quot;symbolType&#x3D;2&quot; --form &quot;bundleId&#x3D;com.demo.test&quot; --form &quot;productVersion&#x3D;1.0&quot; --form &quot;fileName&#x3D;symbol.zip&quot; --form &quot;file&#x3D;@symbol.zip&quot; --verbose dSYM文件什么是dSYM文件？iOS平台中，dSYM文件是指具有调试信息的目标文件，文件名通常为：xxx.app.dSYM。如下图所示： 1为了方便找回Crash对应的dSYM文件和还原堆栈，建议每次构建或者发布APP版本的时候，备份好dSYM文件。 如何定位dSYM文件？一般情况下，项目编译完dSYM文件跟app文件在同一个目录下，下面以XCode作为IDE详细说明定位dSYM文件。 12345-&gt; 进入XCode；-&gt; 打开工程（已编译过）；-&gt; 在左栏找到“Product”项；-&gt; 鼠标右键点击编译生成的“xxx.app”；-&gt; 点击“Show in Finder”； 如下图所示： 如果有多个dSYM文件，可以在使用工具时指定输入为dSYM文件所在的目录或者工程目录。 XCode编译后没有生成dSYM文件？XCode Release编译默认会生成dSYM文件，而Debug编译默认不会生成，对应的Xcode配置如下： 12XCode -&gt; Build Settings -&gt; Code Generation -&gt; Generate Debug Symbols -&gt; YesXCode -&gt; Build Settings -&gt; Build Option -&gt; Debug Information Format -&gt; DWARF with dSYM File 开启Bitcode之后需要注意哪些问题？ 在点“Upload to App Store”上传到App Store服务器的时候需要声明符号文件（dSYM文件）的生成： 在配置符号表文件之前，需要从App Store中把该版本对应的dSYM文件下载回本地（参考“如何找回已发布到App Store的App对应的dSYM文件？”），然后用符号表工具生成和上传符号表文件。 不需要配置自动生成符号表的脚本了，也不要用本地生成的dSYM文件来生成符号表文件，因为本地编译生成的dSYM文件的符号表信息都被隐藏了。如果用本地编译生成的dSYM文件生成符号表文件并配置到Bugly平台之后，还原出来的结果将是类似于“__hiden#XXX”这样的符号。 如何判断dSYM文件是否与Crash的UUID匹配？Bugly还原Crash堆栈时，需要根据UUID来匹配符号表文件，因此只有上传的符号表文件的UUID与Crash对应APP的UUID一致时，才能准确地对堆栈进行还原。 查看符号表文件的UUID（“如何查看dSYM文件的UUID？”） 查看Crash对应的APP的UUID Bugly v1.0页面 1崩溃 ---&gt; Crash issue ---&gt; dSYM UUID Bugly v2.0页面 1崩溃分析 ---&gt; Crash issue ---&gt; 符号表 ---&gt; UUID 如何查看dSYM文件的UUID？通过命令查看UUID1xcrun dwarfdump --uuid &lt;dSYM文件&gt; 通过符号表文件查看UUID符号表文件的UUID与dSYM文件的UUID是一致的，因此可以通过符号表工具生成的符号表文件来查看dSYM文件的UUID： 1生成符号表文件(.zip) ---&gt; 解压符号表文件(.symbol) ---&gt; 使用文本编辑器打开符号表文件 其中符号表文件的“UUID”信息即Debug SO文件的UUID，亦是符号表文件的UUID，如果文件较大，建议使用“Sublime Text”等文本编辑器来打开符号表文件。 如何找回已发布到App Store的App对应的dSYM文件？通过Xcode找回 打开 Xcode 顶部菜单栏 -&gt; Window -&gt; Organizer 窗口： 打开 Xcode 顶部菜单栏，选择 Archive 标签： 找到发布的归档包，右键点击对应归档包，选择Show in Finder操作： 右键选择定位到的归档文件，选择显示包内容操作： 选择dSYMs目录，目录内即为下载到的 dSYM 文件： 通过iTunes Connect找回 登录iTunes Connect； 进入“我的App（My Apps）”的“活动（Activity）”页面： 在“所有构件版本（All Builds）”中选择某一个版本，点“下载dSYM（Download dSYM）”下载dSYM文件： 通过mdfind工具找回在Bugly的issue页面查询到crash对应的UUID： 然后在Mac的Shell中，用mdfind命令定位dSYM文件： 1mdfind &quot;com_apple_xcode_dsym_uuids &#x3D;&#x3D; &lt;UUID&gt;&quot; 注意，使用mdfind时，UUID需要格式转换（增加“-”）： 12345678-1234-1234-1234-xxxxxxxxxxxx 例如，要定位的dSYM的UUID为：E30FC309DF7B3C9F8AC57F0F6047D65F 则定位dSYM文件的命令如下： 12mdfind &quot;com_apple_xcode_dsym_uuids &#x3D;&#x3D; E30FC309-DF7B-3C9F-8AC5-7F0F6047D65F&quot; |12345678-1234-1234-1234-xxxxxxxxxxxx| 建议每次构建或者发布APP版本的时候，备份App对应的dSYM文件！ 开启debug模式符号表上传功能（主要用于测试集成问题，可不需要）XCode编译后生成dSYM文件设置 XCode Release编译默认会生成dSYM文件，而Debug编译默认不会生成，对应的Xcode配置如下： XCode -&gt; Build Settings -&gt; Code Generation -&gt; Generate Debug Symbols -&gt; Yes XCode -&gt; Build Settings -&gt; Build Option -&gt; Debug Information Format -&gt; DWARF with dSYM File 脚本中 UPLOAD_DEBUG_SYMBOLS的值改为1 不需要debug模式上传的话，只需要还原到之前的设置就行了 官方文档地址 ：Bugly iOS SDK 使用指南 Bugly iOS 符号表配置 通过bug报错的堆栈信息 和 符号表结合解析后能够快速的定位到类、方法甚至行号","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ifeiyv666.github.io/categories/iOS/"}],"tags":[{"name":"Bugly","slug":"Bugly","permalink":"https://ifeiyv666.github.io/tags/Bugly/"},{"name":"dSYM符号表","slug":"dSYM符号表","permalink":"https://ifeiyv666.github.io/tags/dSYM%E7%AC%A6%E5%8F%B7%E8%A1%A8/"}]},{"title":"swift 获取当前顶层控制器","slug":"swift 获取当前顶层控制器","date":"2020-05-25T01:55:17.000Z","updated":"2020-05-25T01:55:29.735Z","comments":true,"path":"2020/05/25/swift 获取当前顶层控制器/","link":"","permalink":"https://ifeiyv666.github.io/2020/05/25/swift%20%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E9%A1%B6%E5%B1%82%E6%8E%A7%E5%88%B6%E5%99%A8/","excerpt":"","text":"swift 获取当前顶层控制器12345678910111213141516171819var topViewController: UIViewController? &#123; var resultVC: UIViewController? resultVC = _topViewController(UIApplication.shared.keyWindow?.rootViewController) while resultVC?.presentedViewController &#123; resultVC = _topViewController(resultVC?.presentedViewController) &#125; return resultVC&#125;func _topViewController(_ vc: UIViewController?) -&gt; UIViewController? &#123; if (vc is UINavigationController) &#123; return _topViewController((vc as? UINavigationController)?.topViewController) &#125; else if (vc is UITabBarController) &#123; return _topViewController((vc as? UITabBarController)?.selectedViewController) &#125; else &#123; return vc &#125; return nil&#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"顶层控制器","slug":"顶层控制器","permalink":"https://ifeiyv666.github.io/tags/%E9%A1%B6%E5%B1%82%E6%8E%A7%E5%88%B6%E5%99%A8/"}]},{"title":"Swift全局状态监听小技巧（**willSet**,didSet）","slug":"Swift全局状态监听小技巧（willSet,didSet）","date":"2020-05-23T09:53:13.000Z","updated":"2020-05-23T09:53:49.265Z","comments":true,"path":"2020/05/23/Swift全局状态监听小技巧（willSet,didSet）/","link":"","permalink":"https://ifeiyv666.github.io/2020/05/23/Swift%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81%E7%9B%91%E5%90%AC%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%88willSet,didSet%EF%BC%89/","excerpt":"","text":"Swift全局状态监听小技巧（willSet,didSet）封装：便于统一管理，方便使用12345678910111213141516171819202122232425262728293031323334enum FyAppObserverName:String&#123; case isLogin = \"isLogin\" //是否是登录状态 case isVip = \"isVip\" //是否是Vip case timeLength = \"timeLength\" //时长&#125;class FyAppStatusManger:NSObject&#123; static let shared = FyAppStatusManger.init() var valueChanged:((_ observerName:FyAppObserverName,_ oldValue:Any?,_ newValue:Any?) -&gt;())? override init()&#123; super.init() &#125; //需要监听变化的值 var isLogin:Bool = false&#123; didSet&#123; valueChanged?(.isLogin, oldValue, isLogin) &#125; &#125; var isVip:Bool = false&#123; didSet&#123; valueChanged?(.isVip, oldValue, isLogin) &#125; &#125; var timeLength:Int = 0&#123; didSet&#123; valueChanged?(.timeLength, oldValue, isLogin) &#125; &#125; &#125; 使用：12345678910111213FyAppStatusManger.shared.valueChanged = &#123;(observerName,oldValue ,newValue) in //可以在app需要的地方调用，需求监听的状态可以根据实际情况自由搭配 switch observerName&#123; case .isLogin: //登录状态发生改变 break case .isVip: //会员状态发生改变 break default: break &#125; &#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/tags/Swift/"},{"name":"didSet","slug":"didSet","permalink":"https://ifeiyv666.github.io/tags/didSet/"},{"name":"willSet","slug":"willSet","permalink":"https://ifeiyv666.github.io/tags/willSet/"}]},{"title":"Mac下移动硬盘无法读取解决方案(以前是可以读取的)","slug":"Mac下移动硬盘无法读取解决方案","date":"2020-05-08T03:28:30.000Z","updated":"2020-06-18T01:34:14.632Z","comments":true,"path":"2020/05/08/Mac下移动硬盘无法读取解决方案/","link":"","permalink":"https://ifeiyv666.github.io/2020/05/08/Mac%E4%B8%8B%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E6%97%A0%E6%B3%95%E8%AF%BB%E5%8F%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"Mac下移动硬盘无法读取(以前是可以读取的) 不进行处理的话，一般连接移动硬盘半个小时左右就会显示了；不想等待的话就执行以下命令，强制加载 可以在终端中执行以下命令：diskutil list ,控制台输出信息如下： 12345678910111213141516171819202122@ls--MacBook-Air  ~ $ diskutil list/dev/disk0 (internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *121.3 GB disk0 1: EFI EFI 209.7 MB disk0s1 2: Apple_APFS Container disk1 121.1 GB disk0s2/dev/disk1 (synthesized): #: TYPE NAME SIZE IDENTIFIER 0: APFS Container Scheme - +121.1 GB disk1 Physical Store disk0s2 1: APFS Volume Macintosh HD - 数据 95.8 GB disk1s1 2: APFS Volume Preboot 82.4 MB disk1s2 3: APFS Volume Recovery 528.5 MB disk1s3 4: APFS Volume VM 3.2 GB disk1s4 5: APFS Volume Macintosh HD 10.9 GB disk1s5/dev/disk2 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *1.0 TB disk2 1: EFI EFI 209.7 MB disk2s1 2: Microsoft Basic Data LPF 1000.0 GB disk2s2 通过以上输出信息，可以找到移动硬盘挂载路径：/dev/disk2 ,根据输出显示实际挂载路径填写。 执行命令：sudo diskutil mount /dev/disk2 ，控制台输出信息如下： 12@ls-MacBook-Air  ~ $ sudo diskutil mountDisk /dev/disk2Volume(s) mounted successfully 输出以上信息表示移动硬盘挂载成功了，如果输出以下信息： 123456 @ls-MacBook-Air  ~ $ sudo diskutil mount /dev/disk2Password:Volume on disk2 failed to mountPerhaps the operation is not supported (kDAReturnUnsupported)If it has a partitioning scheme, use \"diskutil mountDisk\"If you think the volume is supported but damaged, try the \"readOnly\" option 输出以上信息表示不支持 sudo diskutil mount /dev/disk2 这种装载方式，使用以下方式进行装载 执行命令： sudo diskutil mountDisk /dev/disk2 , 而不是 sudo diskutil mount /dev/disk2 12@ls-MacBook-Air  ~ $ sudo diskutil mountDisk /dev/disk2Volume(s) mounted successfully 以上命令方法不行的话，那就电脑连接移动硬盘老老实实等大概半个小时就好了","categories":[{"name":"Mac","slug":"Mac","permalink":"https://ifeiyv666.github.io/categories/Mac/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"https://ifeiyv666.github.io/tags/Mac/"},{"name":"移动硬盘","slug":"移动硬盘","permalink":"https://ifeiyv666.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98/"}]},{"title":"各类文件MIME_TYPE对照表和Apple官方指定文件类型","slug":"各类文件MIME_TYPE对照表和Apple官方指定文件类型","date":"2020-04-30T10:42:03.000Z","updated":"2020-04-30T10:50:32.550Z","comments":true,"path":"2020/04/30/各类文件MIME_TYPE对照表和Apple官方指定文件类型/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/30/%E5%90%84%E7%B1%BB%E6%96%87%E4%BB%B6MIME_TYPE%E5%AF%B9%E7%85%A7%E8%A1%A8%E5%92%8CApple%E5%AE%98%E6%96%B9%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&#123;\".3gp\", \"video/3gpp\"&#125;, &#123;\".apk\", \"application/vnd.android.package-archive\"&#125;, &#123;\".asf\", \"video/x-ms-asf\"&#125;, &#123;\".avi\", \"video/x-msvideo\"&#125;, &#123;\".bin\", \"application/octet-stream\"&#125;, &#123;\".bmp\", \"image/bmp\"&#125;, &#123;\".c\", \"text/plain\"&#125;, &#123;\".class\", \"application/octet-stream\"&#125;, &#123;\".conf\", \"text/plain\"&#125;, &#123;\".cpp\", \"text/plain\"&#125;, &#123;\".doc\", \"application/msword\"&#125;, &#123;\".docx\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"&#125;, &#123;\".xls\", \"application/vnd.ms-excel\"&#125;, &#123;\".xlsx\", \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"&#125;, &#123;\".exe\", \"application/octet-stream\"&#125;, &#123;\".gif\", \"image/gif\"&#125;, &#123;\".gtar\", \"application/x-gtar\"&#125;, &#123;\".gz\", \"application/x-gzip\"&#125;, &#123;\".h\", \"text/plain\"&#125;, &#123;\".htm\", \"text/html\"&#125;, &#123;\".html\", \"text/html\"&#125;, &#123;\".jar\", \"application/java-archive\"&#125;, &#123;\".java\", \"text/plain\"&#125;, &#123;\".jpeg\", \"image/jpeg\"&#125;, &#123;\".jpg\", \"image/jpeg\"&#125;, &#123;\".js\", \"application/x-javascript\"&#125;, &#123;\".log\", \"text/plain\"&#125;, &#123;\".m3u\", \"audio/x-mpegurl\"&#125;, &#123;\".m4a\", \"audio/mp4a-latm\"&#125;, &#123;\".m4b\", \"audio/mp4a-latm\"&#125;, &#123;\".m4p\", \"audio/mp4a-latm\"&#125;, &#123;\".m4u\", \"video/vnd.mpegurl\"&#125;, &#123;\".m4v\", \"video/x-m4v\"&#125;, &#123;\".mov\", \"video/quicktime\"&#125;, &#123;\".mp2\", \"audio/x-mpeg\"&#125;, &#123;\".mp3\", \"audio/x-mpeg\"&#125;, &#123;\".mp4\", \"video/mp4\"&#125;, &#123;\".mpc\", \"application/vnd.mpohun.certificate\"&#125;, &#123;\".mpe\", \"video/mpeg\"&#125;, &#123;\".mpeg\", \"video/mpeg\"&#125;, &#123;\".mpg\", \"video/mpeg\"&#125;, &#123;\".mpg4\", \"video/mp4\"&#125;, &#123;\".mpga\", \"audio/mpeg\"&#125;, &#123;\".msg\", \"application/vnd.ms-outlook\"&#125;, &#123;\".ogg\", \"audio/ogg\"&#125;, &#123;\".pdf\", \"application/pdf\"&#125;, &#123;\".png\", \"image/png\"&#125;, &#123;\".pps\", \"application/vnd.ms-powerpoint\"&#125;, &#123;\".ppt\", \"application/vnd.ms-powerpoint\"&#125;, &#123;\".pptx\", \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"&#125;, &#123;\".prop\", \"text/plain\"&#125;, &#123;\".rc\", \"text/plain\"&#125;, &#123;\".rmvb\", \"audio/x-pn-realaudio\"&#125;, &#123;\".rtf\", \"application/rtf\"&#125;, &#123;\".sh\", \"text/plain\"&#125;, &#123;\".tar\", \"application/x-tar\"&#125;, &#123;\".tgz\", \"application/x-compressed\"&#125;, &#123;\".txt\", \"text/plain\"&#125;, &#123;\".wav\", \"audio/x-wav\"&#125;, &#123;\".wma\", \"audio/x-ms-wma\"&#125;, &#123;\".wmv\", \"audio/x-ms-wmv\"&#125;, &#123;\".wps\", \"application/vnd.ms-works\"&#125;, &#123;\".xml\", \"text/plain\"&#125;, &#123;\".z\", \"application/x-compress\"&#125;, &#123;\".zip\", \"application/x-zip-compressed\"&#125;, &#123;\"\", \"*/*\"&#125; 官方指定的文件类型 Document Content Type UTIs官方指定的文件类型 123456789101112131415161718192021222324252627&lt;array&gt; &lt;dict&gt; &lt;key&gt;CFBundleTypeRole&lt;/key&gt; &lt;string&gt;Viewer&lt;/string&gt; &lt;key&gt;LSHandlerRank&lt;/key&gt; &lt;string&gt;Owner&lt;/string&gt; &lt;key&gt;CFBundleTypeIconFiles&lt;/key&gt; &lt;array/&gt; &lt;key&gt;CFBundleTypeName&lt;/key&gt; &lt;string&gt;文件共享&lt;/string&gt; &lt;key&gt;LSItemContentTypes&lt;/key&gt; &lt;array&gt; &lt;string&gt;public.data&lt;/string&gt; &lt;string&gt;com.microsoft.excel.xls&lt;/string&gt; &lt;string&gt;public.text&lt;/string&gt; &lt;string&gt;public.plain-text &lt;/string&gt; &lt;string&gt;public.image&lt;/string&gt; &lt;string&gt;public.jpeg&lt;/string&gt; &lt;string&gt;public.png&lt;/string&gt; &lt;string&gt;com.microsoft.bmp &lt;/string&gt; &lt;string&gt;com.compuserve.gif &lt;/string&gt; &lt;string&gt;com.adobe.pdf&lt;/string&gt; &lt;string&gt;com.microsoft.powerpoint.ppt&lt;/string&gt; &lt;string&gt;com.microsoft.word.doc&lt;/string&gt; &lt;/array&gt; &lt;/dict&gt;&lt;/array&gt;","categories":[{"name":"收藏","slug":"收藏","permalink":"https://ifeiyv666.github.io/categories/%E6%94%B6%E8%97%8F/"}],"tags":[{"name":"MIME_TYPE","slug":"MIME-TYPE","permalink":"https://ifeiyv666.github.io/tags/MIME-TYPE/"}]},{"title":"收藏的网站","slug":"collectUrl","date":"2020-04-27T04:51:06.000Z","updated":"2020-04-27T11:03:18.335Z","comments":true,"path":"2020/04/27/collectUrl/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/27/collectUrl/","excerpt":"","text":"Flutter相关技术网站 Flutter中文网 Flutter 社区中文资源 Dart packages Flutter官网 json_to_dart iOS开发相关技术网站 CocoaChina Code4app Swift 编程 技术社区网站 stackoverflow 掘金 中文开源技术交流社区 简书 Github 思否 W3school W3Cschool 知乎 码云 CSDN 博客园 码农网 菜鸟教程 我要自学网 视频教程网站 腾讯课堂 网易云课堂 哔哩哔哩 慕课网 黑马程序员 泊学 开发辅助网站 App图标制作（图标制作） 图标工厂（图标制作） TinyPNG(图片压缩) Easy Mock（伪造数据） Icons(Icons图标) Iconfont(Icons图标) 常用在线工具网站 在线工具 JSON在线解析 在线PS 软件下载平台 ZD423 Windows系统之家 3D溜溜网 正版中国（正版软件限时免费） 搜索工具 鸠摩搜索(文档搜索引擎) 茶杯狐(影视搜索引擎) 问答库(题库问答平台) LibreStock(搜索免费图片及视频素材)","categories":[{"name":"收藏","slug":"收藏","permalink":"https://ifeiyv666.github.io/categories/%E6%94%B6%E8%97%8F/"}],"tags":[{"name":"收藏网站","slug":"收藏网站","permalink":"https://ifeiyv666.github.io/tags/%E6%94%B6%E8%97%8F%E7%BD%91%E7%AB%99/"}]},{"title":"Vue脚手架","slug":"Vue脚手架","date":"2020-04-24T07:48:39.645Z","updated":"2020-04-24T07:51:47.976Z","comments":true,"path":"2020/04/24/Vue脚手架/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/24/Vue%E8%84%9A%E6%89%8B%E6%9E%B6/","excerpt":"","text":"Vue脚手架 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135Last login: Fri Apr 24 09:31:11 on console l@ls-MacBook-Air  ~  npm -v6.14.4 l@ls-MacBook-Air  ~  webpack -v3.6.0 l@ls-MacBook-Air  ~  npm install -g @vue/clinpm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142npm WARN deprecated fsevents@1.2.12: fsevents 1 will break on node v14+. Upgrade to fsevents 2 with massive improvements./usr/local/bin/vue -&gt; /usr/local/lib/node_modules/@vue/cli/bin/vue.js&gt; fsevents@1.2.12 install /usr/local/lib/node_modules/@vue/cli/node_modules/fsevents&gt; node-gyp rebuild SOLINK_MODULE(target) Release/.node CXX(target) Release/obj.target/fse/fsevents.o SOLINK_MODULE(target) Release/fse.node&gt; core-js@3.6.5 postinstall /usr/local/lib/node_modules/@vue/cli/node_modules/core-js&gt; node -e \"try&#123;require('./postinstall')&#125;catch(e)&#123;&#125;\"Thank you for using core-js ( https://github.com/zloirock/core-js ) for polyfilling JavaScript standard library!The project needs your help! Please consider supporting of core-js on Open Collective or Patreon:&gt; https://opencollective.com/core-js&gt; https://www.patreon.com/zloirockAlso, the author of core-js ( https://github.com/zloirock ) is looking for a good job -)+ @vue/cli@4.3.1added 100 packages from 50 contributors, removed 18 packages, updated 228 packages and moved 7 packages in 102.781s l@ls-MacBook-Air  ~  vue --version@vue/cli 4.3.1 l@ls-MacBook-Air  ~  npm install -g @vue/cli-initnpm WARN deprecated vue-cli@2.9.6: This package has been deprecated in favour of @vue/clinpm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142npm WARN deprecated coffee-script@1.12.7: CoffeeScript on NPM has moved to \"coffeescript\" (no hyphen)+ @vue/cli-init@4.3.1added 254 packages from 207 contributors in 19.423s l@ls-MacBook-Air  ~  cd /Users/l/Desktop/VueTemp/vueDemo l@ls-MacBook-Air  ~/Desktop/VueTemp/vueDemo  vue init webpack vuedemo001? Project name vuedemo001? Project description test vue demo 001? Author ifeiyv 719507339@qq.com? Vue build standalone? Install vue-router? No? Use ESLint to lint your code? No? Set up unit tests No? Setup e2e tests with Nightwatch? No? Should we run `npm install` for you after the project has been created? (recommended) npm vue-cli · Generated \"vuedemo001\".# Installing project dependencies ...# ========================npm WARN deprecated extract-text-webpack-plugin@3.0.2: Deprecated. Please use https://github.com/webpack-contrib/mini-css-extract-pluginnpm WARN deprecated browserslist@2.11.3: Browserslist 2 could fail on reading Browserslist &gt;3.0 config used in other tools.npm WARN deprecated bfj-node4@5.3.1: Switch to the `bfj` package for fixes and new features!npm WARN deprecated core-js@2.6.11: core-js@&lt;3 is no longer maintained and not recommended for usage due to the number of issues. Please, upgrade your dependencies to the actual version of core-js@3.npm WARN deprecated fsevents@1.2.12: fsevents 1 will break on node v14+. Upgrade to fsevents 2 with massive improvements.npm WARN deprecated browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist &gt;3.0 config used in other tools.&gt; fsevents@1.2.12 install /Users/l/Desktop/VueTemp/vueDemo/vuedemo001/node_modules/fsevents&gt; node-gyp rebuild SOLINK_MODULE(target) Release/.node CXX(target) Release/obj.target/fse/fsevents.o SOLINK_MODULE(target) Release/fse.node&gt; core-js@2.6.11 postinstall /Users/l/Desktop/VueTemp/vueDemo/vuedemo001/node_modules/core-js&gt; node -e \"try&#123;require('./postinstall')&#125;catch(e)&#123;&#125;\"Thank you for using core-js ( https://github.com/zloirock/core-js ) for polyfilling JavaScript standard library!The project needs your help! Please consider supporting of core-js on Open Collective or Patreon:&gt; https://opencollective.com/core-js&gt; https://www.patreon.com/zloirockAlso, the author of core-js ( https://github.com/zloirock ) is looking for a good job -)&gt; ejs@2.7.4 postinstall /Users/l/Desktop/VueTemp/vueDemo/vuedemo001/node_modules/ejs&gt; node ./postinstall.jsThank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/)&gt; uglifyjs-webpack-plugin@0.4.6 postinstall /Users/l/Desktop/VueTemp/vueDemo/vuedemo001/node_modules/webpack/node_modules/uglifyjs-webpack-plugin&gt; node lib/post_install.jsnpm notice created a lockfile as package-lock.json. You should commit this file.npm WARN ajv-keywords@3.4.1 requires a peer of ajv@^6.9.1 but none is installed. You must install peer dependencies yourself.added 1304 packages from 688 contributors and audited 12074 packages in 73.643s27 packages are looking for funding run `npm fund` for detailsfound 13 vulnerabilities (1 low, 8 moderate, 4 high) run `npm audit fix` to fix them, or `npm audit` for details# Project initialization finished!# ========================To get started: cd vuedemo001 npm run devDocumentation can be found at https://vuejs-templates.github.io/webpack l@ls-MacBook-Air  ~/Desktop/VueTemp/vueDemo  cd vuedemo001 l@ls-MacBook-Air  ~/Desktop/VueTemp/vueDemo/vuedemo001  npm run dev&gt; vuedemo001@1.0.0 dev /Users/l/Desktop/VueTemp/vueDemo/vuedemo001&gt; webpack-dev-server --inline --progress --config build/webpack.dev.conf.js 12% building modules 21/29 modules 8 active ...ueTemp/vueDemo/vuedemo001/src/App.vue&#123; parser: \"babylon\" &#125; is deprecated; we now treat it as &#123; parser: \"babel\" &#125;. 95% emitting DONE Compiled successfully in 8110ms 3:26:40 PM I Your application is running here: http://localhost:8080 WAIT Compiling... 3:27:53 PM 95% emitting DONE Compiled successfully in 1213ms 3:27:55 PM I Your application is running here: http://localhost:8080","categories":[],"tags":[]},{"title":"flutter常用pub库","slug":"flutter常用pub库","date":"2020-04-24T04:53:45.000Z","updated":"2020-04-24T04:55:59.755Z","comments":true,"path":"2020/04/24/flutter常用pub库/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/24/flutter%E5%B8%B8%E7%94%A8pub%E5%BA%93/","excerpt":"","text":"12345678910111213141516171819202122232425#https://github.com/flutterchina/dio/blob/master/README-ZH.md dio: ^3.0.9 #网络请求框架 cookie_jar: ^1.0.1 dio_cookie_manager: ^1.0.0 path_provider: ^1.6.7 event_bus: ^1.1.1 #https://pub.flutter-io.cn/packages/connectivity connectivity: ^0.4.8+2 #链接网络状态监测 fluttertoast: ^4.0.1 shared_preferences: ^0.5.6+3 pull_to_refresh: ^1.5.7 modal_progress_hud: ^0.1.3 webview_flutter: ^0.3.20+2","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"flutter库","slug":"flutter库","permalink":"https://ifeiyv666.github.io/tags/flutter%E5%BA%93/"}]},{"title":"flutter快捷开发-持续更新","slug":"flutter快捷开发-持续更新","date":"2020-04-24T02:38:15.000Z","updated":"2020-04-24T02:51:01.959Z","comments":true,"path":"2020/04/24/flutter快捷开发-持续更新/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/24/flutter%E5%BF%AB%E6%8D%B7%E5%BC%80%E5%8F%91-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/","excerpt":"","text":"1. 封装Text,只向外提供常用的属性，根据需求适当需改12345678910111213141516static Widget text(String data, &#123; double textScaleFactor = 1.0, Color color = Colors.black, double fontSize = 16, FontWeight fontWeight = FontWeight.normal, FontStyle fontStyle = FontStyle.normal &#125;)&#123; return Text(data, textScaleFactor: textScaleFactor, style: TextStyle( color: color, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, ),);&#125; 2. 检测当前主题1234static bool isDark(BuildContext context)&#123; final Brightness brightnessValue = Theme.of(context).brightness; return brightnessValue == Brightness.dark;&#125; 3. 根据主题设置颜色1234567891011//是否是深色模式 true dark主题模式 false light主题模式static bool isDark(context)&#123; return Theme.of(context).brightness == Brightness.dark;&#125;static Color dyColor(BuildContext context,darkColor,lightColor) =&gt; isDark(context) ? darkColor : lightColor;//背景颜色static Color dyBgColor(BuildContext context) =&gt; isDark(context) ? MColor.darkBgColor : Colors.white;//字体颜色static Color dyFontColor(BuildContext context) =&gt; isDark(context) ? MColor.textColor : MColor.black;static Color dyRedColor(BuildContext context) =&gt; isDark(context) ? Colors.red[400] : Colors.red;static Color dyBlueColor(BuildContext context) =&gt; isDark(context) ? Colors.blue[600] : Colors.blue; 4. 返回一个字体不跟随系统缩放的Widget1234567static noScaleWidget(Widget widget)&#123; return MediaQuery( data: MediaQueryData .fromWindow(WidgetsBinding.instance.window) .copyWith(textScaleFactor: 1), child: widget);&#125; 5. 取随机颜色（需要import &#39;dart:math&#39;;）1234567static Color getRandomColor() &#123; var random = new Random(); int r = random.nextInt(255); int g = random.nextInt(255); int b = random.nextInt(255); return Color.fromARGB(255, r, g, b); &#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter开发","slug":"Flutter开发","permalink":"https://ifeiyv666.github.io/tags/Flutter%E5%BC%80%E5%8F%91/"}]},{"title":"flutter 升级到 1.12.x android 启动时会黑屏解决办法","slug":"flutter 升级到 1.12.x android 启动时会黑屏解决办法","date":"2020-04-23T05:33:20.000Z","updated":"2020-04-23T06:28:41.379Z","comments":true,"path":"2020/04/23/flutter 升级到 1.12.x android 启动时会黑屏解决办法/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/23/flutter%20%E5%8D%87%E7%BA%A7%E5%88%B0%201.12.x%20android%20%E5%90%AF%E5%8A%A8%E6%97%B6%E4%BC%9A%E9%BB%91%E5%B1%8F%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"flutter 升级到 1.12.x android 启动时会黑屏解决办法 直接用flutter 1.12.x SDK创建的项目 需要修改AndroidManifest.xml文件，修改如下： 12345678910111213141516171819202122232425262728293031&lt;application android:name=\"io.flutter.app.FlutterApplication\" android:label=\"ifeiyv\" android:icon=\"@mipmap/ic_launcher\"&gt; &lt;activity android:name=\".MainActivity\" android:launchMode=\"singleTop\" android:theme=\"@style/LaunchTheme\" android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode\" android:hardwareAccelerated=\"true\" android:windowSoftInputMode=\"adjustResize\"&gt; // &lt;meta-data android:name=\"io.flutter.embedding.android.SplashScreenDrawable\" android:resource=\"@drawable/launch_background\" /&gt; &lt;meta-data android:name=\"io.flutter.embedding.android.NormalTheme\" android:resource=\"@drawable/launch_background\" /&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.MAIN\"/&gt; &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;!-- Don't delete the meta-data below. This is used by the Flutter tool to generate GeneratedPluginRegistrant.java --&gt; &lt;meta-data android:name=\"flutterEmbedding\" android:value=\"2\" /&gt; &lt;/application&gt; 如果存在meta-data 的 android:name=&quot;io.flutter.app.android.SplashScreenUntilFirstFrame&quot;，删除此meta-data，添加如下代码： 12345678&lt;meta-data android:name=\"io.flutter.embedding.android.SplashScreenDrawable\" android:resource=\"@drawable/launch_background\" /&gt; &lt;meta-data android:name=\"io.flutter.embedding.android.NormalTheme\" android:resource=\"@drawable/launch_background\" /&gt; 修改launch_background.xml，这个要根据需求添加开屏视图 1234567891011&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;!-- Modify this file to customize your launch splash screen --&gt;&lt;layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item android:left=\"0dp\" android:top=\"0dp\" android:bottom=\"0dp\" android:right=\"0dp\" android:drawable=\"@drawable/pic_bg\" /&gt; &lt;!-- You can insert your own image assets here --&gt; &lt;/layer-list&gt; 在&lt;application&gt;标签下添加新的 &lt;meta-data&gt; ,一旦您在AndroidManifest中进行了声明并使用了插件，能够使用使用了新的Android的插件（将插件注册为，FlutterEngine而不是PluginRegistry.Registrar 123&lt; meta-data android ：name = “flutterEmbedding” android ：value = “2” /&gt; 如果是低版本创建的项目升级,除了以上修改外还需要修改以下内容： 12345//FlutterActivity包路径修改//把import io.flutter.app.FlutterActivity;//修改为import io.flutter.embedding.android.FlutterActivity; 以前 123456789101112import io.flutter.app.FlutterActivity;import io.flutter.plugins.GeneratedPluginRegistrant;public class MainActivity extends FlutterActivity &#123; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); GeneratedPluginRegistrant.registerWith(this); &#125; // ...some amount of custom code for your app is here.&#125; 现在 1234567891011import androidx.annotation.NonNull;import io.flutter.embedding.android.FlutterActivity;import io.flutter.embedding.engine.FlutterEngine;import io.flutter.plugins.GeneratedPluginRegistrant;public class MainActivity extends FlutterActivity &#123; @Override public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) &#123; GeneratedPluginRegistrant.registerWith(flutterEngine); &#125;&#125; 这里仅有修复黑屏的问题，更多升级详细信息请前往 官方升级指南 -》 前往","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter黑屏","slug":"Flutter黑屏","permalink":"https://ifeiyv666.github.io/tags/Flutter%E9%BB%91%E5%B1%8F/"},{"name":"flutter 1.12.x","slug":"flutter-1-12-x","permalink":"https://ifeiyv666.github.io/tags/flutter-1-12-x/"},{"name":"Android黑屏","slug":"Android黑屏","permalink":"https://ifeiyv666.github.io/tags/Android%E9%BB%91%E5%B1%8F/"}]},{"title":"flutter报错","slug":"flutter报错","date":"2020-04-23T03:29:13.000Z","updated":"2020-04-24T03:29:22.789Z","comments":true,"path":"2020/04/23/flutter报错/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/23/flutter%E6%8A%A5%E9%94%99/","excerpt":"","text":"1.引入webview_flutter 报错 Trying to embed a platform view but the PrerollContext does not support embedding 在iOS工程的info.plist文件中添加键值对key=io.flutter.embedded_views_preview value=YES","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/tags/Flutter/"},{"name":"Flutter报错","slug":"Flutter报错","permalink":"https://ifeiyv666.github.io/tags/Flutter%E6%8A%A5%E9%94%99/"},{"name":"Flutter Bug","slug":"Flutter-Bug","permalink":"https://ifeiyv666.github.io/tags/Flutter-Bug/"}]},{"title":"This method overrides a method annotated as @mustCallSuper in 'AutomaticKeepAliveClientMixin', but doesn't invoke the overridden method.","slug":"AutomaticKeepAliveClientMixin","date":"2020-04-14T07:54:47.000Z","updated":"2020-04-14T08:21:15.827Z","comments":true,"path":"2020/04/14/AutomaticKeepAliveClientMixin/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/14/AutomaticKeepAliveClientMixin/","excerpt":"","text":"使用AutomaticKeepAliveClientMixin 警告⚠️ This method overrides a method annotated as @mustCallSuper in &#39;AutomaticKeepAliveClientMixin&#39;, but doesn&#39;t invoke the overridden method. 该方法将覆盖在’AutomaticKeepAliveClientMixin’中标注为@mustCallSuper的方法，但不会调用覆盖的方法。 解决方案： 检查 添加AutomaticKeepAliveClientMixin 添加 12@override &lt;br&gt;bool get wantKeepAlive =&gt; true; build方法中记得调用父类方法super.build(context); 1234Widget build(BuildContext context) &#123; super.build(context); return Container();&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter的坑","slug":"Flutter的坑","permalink":"https://ifeiyv666.github.io/tags/Flutter%E7%9A%84%E5%9D%91/"},{"name":"AutomaticKeepAliveClientMixin","slug":"AutomaticKeepAliveClientMixin","permalink":"https://ifeiyv666.github.io/tags/AutomaticKeepAliveClientMixin/"}]},{"title":"MAC录制鼠标事件脚本","slug":"macjscrpt","date":"2020-04-03T06:17:33.000Z","updated":"2020-04-14T08:09:07.287Z","comments":true,"path":"2020/04/03/macjscrpt/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/03/macjscrpt/","excerpt":"","text":"录制鼠标事件脚本 用到自己封装好的工具 MAC代码模拟鼠标和键盘事件 var timeStamp:CLongLong = -1 //保存上次时间戳 var isStart:Bool = false //保存是否开始录制脚本 var events:[CGEvent] = CGEvent //保存所有鼠标事件 var times:[Int] = Int //保存鼠标事件事件间隔（完美时间还原脚本） 1.录制脚本123456789101112131415161718override func viewDidLoad() &#123; super.viewDidLoad() monitor = NSEvent.addGlobalMonitorForEvents(matching:[.mouseMoved,.leftMouseDown,.leftMouseUp,.leftMouseDragged,.rightMouseDown,.rightMouseUp,.rightMouseDragged,.scrollWheel]) &#123; [weak self](event) in self?.label.cell?.title = \"x=\\(String(format: \"%.0f\", event.locationInWindow.x))\\ny=\\(String(format: \"%.0f\", ScreenHeight - event.locationInWindow.y))\" if(self!.isStart)&#123;//是否开始录制脚本 self!.events.append(event.cgEvent!) if(self!.events.count &gt; 1)&#123; self!.times.append(Int(Date().milliStamp - self!.timeStamp)) self!.timeStamp = Date().milliStamp &#125;else&#123; self!.times.append(10) self!.timeStamp = Date().milliStamp &#125; &#125; &#125; &#125; 2.播放脚本123456789101112func playEvent()&#123; var index = 0 for event in events &#123; if(index &gt; times.count - 1)&#123; Thread.sleep(forTimeInterval: TimeInterval(0.01)) &#125;else&#123; Thread.sleep(forTimeInterval: TimeInterval( Double(times[index]) / 1000.0)) &#125; index += 1; event.post(tap: .cghidEventTap) &#125;&#125;","categories":[{"name":"Mac","slug":"Mac","permalink":"https://ifeiyv666.github.io/categories/Mac/"}],"tags":[{"name":"脚本录制","slug":"脚本录制","permalink":"https://ifeiyv666.github.io/tags/%E8%84%9A%E6%9C%AC%E5%BD%95%E5%88%B6/"},{"name":"鼠标事件","slug":"鼠标事件","permalink":"https://ifeiyv666.github.io/tags/%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6/"}]},{"title":"flutter输入框键盘弹起被遮挡问题","slug":"flutter输入框键盘弹起遮挡问题","date":"2020-04-03T03:32:06.000Z","updated":"2020-04-03T06:44:14.821Z","comments":true,"path":"2020/04/03/flutter输入框键盘弹起遮挡问题/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/03/flutter%E8%BE%93%E5%85%A5%E6%A1%86%E9%94%AE%E7%9B%98%E5%BC%B9%E8%B5%B7%E9%81%AE%E6%8C%A1%E9%97%AE%E9%A2%98/","excerpt":"","text":"解决键盘弹起遮挡问题 Scaffold的resizeToAvoidBottomPadding属性（v1.1.9之后已废弃） resizeToAvoidBottomInset：为true键盘弹起输入框会自动上移，为false不移动，如果输入框靠下，有可能被遮挡住。默认为true 12345678910111213141516171819202122/// This flag is deprecated, please use [resizeToAvoidBottomInset]/// instead.////// Originally the name referred [MediaQueryData.padding]. Now it refers/// [MediaQueryData.viewInsets], so using [resizeToAvoidBottomInset]/// should be clearer to readers.@Deprecated( 'Use resizeToAvoidBottomInset to specify if the body should resize when the keyboard appears. ' 'This feature was deprecated after v1.1.9.')final bool resizeToAvoidBottomPadding;/// If true the [body] and the scaffold's floating widgets should size/// themselves to avoid the onscreen keyboard whose height is defined by the/// ambient [MediaQuery]'s [MediaQueryData.viewInsets] `bottom` property.////// For example, if there is an onscreen keyboard displayed above the/// scaffold, the body can be resized to avoid overlapping the keyboard, which/// prevents widgets inside the body from being obscured by the keyboard.////// Defaults to true.final bool resizeToAvoidBottomInset; 如果以上配置报错（键盘弹起，布局溢出）界面布局可以用滚动容器承载。eg:把当前界面放到SingleChildScrollView上","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/tags/Flutter/"},{"name":"键盘遮挡","slug":"键盘遮挡","permalink":"https://ifeiyv666.github.io/tags/%E9%94%AE%E7%9B%98%E9%81%AE%E6%8C%A1/"},{"name":"TextField","slug":"TextField","permalink":"https://ifeiyv666.github.io/tags/TextField/"}]},{"title":"Flutter创建项目命令","slug":"Flutter创建项目命令","date":"2020-04-02T04:08:45.000Z","updated":"2020-04-14T06:09:24.719Z","comments":true,"path":"2020/04/02/Flutter创建项目命令/","link":"","permalink":"https://ifeiyv666.github.io/2020/04/02/Flutter%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%91%BD%E4%BB%A4/","excerpt":"","text":"创建flutter项目命令 进入到要创建项目的位置，在当前目录下创建项目名称为mydemo的项目 基本默认创建 flutter create mydemo 创建一个 iOS 基于 Swift ，Android基于Java的flutter项目 1flutter create --ios-language swift --android-language kotlin mydemo 创建一个 iOS 基于 Swift ，Android基于kotlin的flutter项目 1flutter create --ios-language swift --android-language kotlin mydemo 创建一个 iOS 基于 OC ，Android基于kotlin的flutter项目 1flutter create --ios-language objc --android-language kotlin mydemo 创建一个 iOS 基于 OC ，Android基于java的flutter项目 1flutter create --ios-language objc --android-language java mydemo VSCode 配置创建 配置路径 code&gt;preferences&gt;Settings — User &gt; Extensions &gt; Dart &amp; Flutter","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter命令","slug":"Flutter命令","permalink":"https://ifeiyv666.github.io/tags/Flutter%E5%91%BD%E4%BB%A4/"}]},{"title":"MAC 模拟鼠标和键盘事件","slug":"SimulationMouseKeyboard","date":"2020-03-30T03:45:56.000Z","updated":"2020-04-14T08:08:30.735Z","comments":true,"path":"2020/03/30/SimulationMouseKeyboard/","link":"","permalink":"https://ifeiyv666.github.io/2020/03/30/SimulationMouseKeyboard/","excerpt":"","text":"代码模拟鼠标和键盘事件 网上搜索了一下，基本上都是很早的代码。原理虽然一样，但是代码已经进行多次改版了，特别是现在的Swift 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249//// FyMKUtils.swift// SimulationMouseKeyboard//// Created by l on 2020/3/30.// Copyright © 2020 ifeiyv. All rights reserved.//import Cocoaclass FyMKUtils: NSObject &#123; //MARK:移动鼠标到坐标位置 open class func mouseMove(point:CGPoint,button:CGMouseButton = .left)&#123; postMouseEvent(button: button, type: .mouseMoved, point: point); &#125; //MARK:左键单击 open class func leftClick(point: CGPoint) &#123; click(point: point, button: .left) &#125; //MARK:左键双击 open class func leftDoubleClick(point: CGPoint) &#123; doubleClick(point: point, button: .left) &#125; //MARK:左键拖拽 ///point : 初始位置坐标 ///toPoint : 拖拽到的目的位置坐标 open class func leftMouseDragged(point:CGPoint,toPoint:CGPoint)&#123; mouseDragged(point:point,toPoint:toPoint,button:.left) &#125; //MARK:右键单击 open class func rightClick(point: CGPoint) &#123; click(point: point, button: .right) &#125; //MARK:右键双击 open class func rightDoubleClick(point: CGPoint) &#123; doubleClick(point: point, button: .right) &#125; //MARK:右键拖拽 ///point : 初始位置坐标 ///toPoint : 拖拽到的目的位置坐标 open class func rightMouseDragged(point:CGPoint,toPoint:CGPoint)&#123; mouseDragged(point:point,toPoint:toPoint,button:.right) &#125; //MARK:鼠标从一个坐标移动到另一个坐标 open class func mouseMove(point:CGPoint, toPoint:CGPoint)&#123; //拖到的目的位置x大于原始位置的X坐标 let toMaxX:Bool = toPoint.x - point.x &gt; 0 //拖到的目的位置y大于原始位置的Y坐标 let toMaxY:Bool = toPoint.y - point.y &gt; 0 var tempPointY = point.y var tempPointX = point.x let blockOperation = BlockOperation() //1.拖拽目的坐标的Y坐标 blockOperation.addExecutionBlock &#123; while toMaxY ? (toPoint.y &gt; tempPointY) : (toPoint.y &lt; tempPointY)&#123; toMaxY ? (tempPointY += 1) : (tempPointY -= 1) postMouseEvent(button: .left, type: .mouseMoved, point: CGPoint(x: tempPointX, y: tempPointY),clickCount: 1); Thread.sleep(forTimeInterval: 0.001) &#125; &#125; //2.拖拽目的坐标的X坐标 blockOperation.addExecutionBlock &#123; while toMaxX ? (toPoint.x &gt; tempPointX) : (toPoint.x &lt; tempPointX) &#123; toMaxX ? (tempPointX += 1) : (tempPointX -= 1) postMouseEvent(button: .left, type: .mouseMoved, point: CGPoint(x: tempPointX, y: tempPointY),clickCount: 1); Thread.sleep(forTimeInterval: 0.001) &#125; &#125; //开始执行Operation blockOperation.start() &#125; //MARK:拖拽鼠标事件 open class func mouseDragged(point:CGPoint,toPoint:CGPoint,button:CGMouseButton)&#123; //拖到的目的位置x大于原始位置的X坐标 let toMaxX:Bool = toPoint.x - point.x &gt; 0 //拖到的目的位置y大于原始位置的Y坐标 let toMaxY:Bool = toPoint.y - point.y &gt; 0 var tempPointY = point.y var tempPointX = point.x //1.按下鼠标 postMouseEvent(button: button, type: button == .left ? .leftMouseDown : .rightMouseDown, point: point,clickCount: 1); let blockOperation = BlockOperation() //2.拖拽目的坐标的Y坐标 blockOperation.addExecutionBlock &#123; while toMaxY ? (toPoint.y &gt; tempPointY) : (toPoint.y &lt; tempPointY)&#123; toMaxY ? (tempPointY += 1) : (tempPointY -= 1) postMouseEvent(button: button, type: button == .left ? .leftMouseDragged : .rightMouseDragged, point: CGPoint(x: tempPointX, y: tempPointY),clickCount: 1); &#125; &#125; //3.拖拽目的坐标的X坐标 blockOperation.addExecutionBlock &#123; while toMaxX ? (toPoint.x &gt; tempPointX) : (toPoint.x &lt; tempPointX) &#123; toMaxX ? (tempPointX += 1) : (tempPointX -= 1) postMouseEvent(button: button, type: button == .left ? .leftMouseDragged : .rightMouseDragged, point: CGPoint(x: tempPointX, y: tempPointY),clickCount: 1); &#125; &#125; //4.松开鼠标 blockOperation.completionBlock = &#123; print(\"hhhhh\") postMouseEvent(button: button, type: button == .left ? .leftMouseUp : .rightMouseUp, point: toPoint,clickCount: 1); &#125; //开始执行Operation blockOperation.start() &#125; //MARK:鼠标单击 open class func click(point: CGPoint,button:CGMouseButton,clickCount:Int64 = 1)&#123; //1.按下鼠标左键（移动到坐标位置后，可以加适当延时再按鼠标左键） postMouseEvent(button: button, type: button == .left ? .leftMouseDown : .rightMouseDown, point: point,clickCount: clickCount); //2.松开鼠标左键 postMouseEvent(button: button, type: button == .left ? .leftMouseUp : .rightMouseUp, point: point,clickCount: clickCount); &#125; //MARK:鼠标双击 open class func doubleClick(point: CGPoint,button:CGMouseButton)&#123; click(point: point, button: button,clickCount:1) click(point: point, button: button,clickCount:2) &#125; //鼠标事件 private class func postMouseEvent(button:CGMouseButton, type:CGEventType, point: CGPoint,clickCount:Int64 = 1) &#123; let event = createMouseEvent(button: button, type: type, point: point,clickCount:clickCount) event.post(tap: CGEventTapLocation.cghidEventTap) &#125; //创建鼠标事件 open class func createMouseEvent(button:CGMouseButton, type:CGEventType, point: CGPoint,clickCount:Int64 = 1) -&gt; CGEvent &#123; let event : CGEvent = CGEvent(mouseEventSource: CGEventSource.init(stateID: CGEventSourceStateID.privateState), mouseType: type, mouseCursorPosition: point, mouseButton: button)! event.setIntegerValueField(CGEventField.mouseEventClickState, value: clickCount) return event &#125; ///鼠标滚轮事件目前仅支持OSX 10.13版本以上使用 ///postion 横向或者纵向滚动的距离， ///纵向 postion为正数 向下滚动，为负数 向上滚动，横向 postion为正数 向右滚动，为负数 向左滚动 ///FyMKUtils.postScrollWheelEvent(position: -10000,scrollOrientation: .horizontal)//向左滚动10000 个像素点 ///FyMKUtils.postScrollWheelEvent(position: 10000,scrollOrientation: .horizontal)//向右滚动10000 个像素点 ///FyMKUtils.postScrollWheelEvent(position: -10000,scrollOrientation: .vertical)//向上滚动10000 个像素点 ///FyMKUtils.postScrollWheelEvent(position: 10000,scrollOrientation: .vertical)//向下滚动10000 个像素点 ///scrollOrientation 横向或者纵向 ///units: 滚动距离单位 .pixel 像素 .line行。默认像素 @available(OSX 10.13, *) open class func postScrollWheelEvent(position:Int32 ,scrollOrientation:ScrollOrientation = .vertical,units:CGScrollEventUnit = .pixel)&#123; //翻转偏移值 let tempPosition = -position let event = CGEvent(scrollWheelEvent2Source:nil, units: units, wheelCount: 2, wheel1: scrollOrientation == .vertical ? tempPosition : 0, wheel2: scrollOrientation == .horizontal ? tempPosition : 0,wheel3: 0) event?.post(tap: .cghidEventTap) &#125; // //MARK:------------------------------- //MARK:键盘类操作 /* public struct CGEventFlags : OptionSet &#123; public init(rawValue: UInt64) /* Flags for events */ /* Device-independent modifier key bits. */ //大小写锁定键处于开启状态(亮灯状态) public static var maskAlphaShift: CGEventFlags &#123; get &#125; //Shift 键按下 public static var maskShift: CGEventFlags &#123; get &#125; //Control 键按下 public static var maskControl: CGEventFlags &#123; get &#125; //Alt(Option) 键按下 public static var maskAlternate: CGEventFlags &#123; get &#125; //Command 键按下 public static var maskCommand: CGEventFlags &#123; get &#125; /* Special key identifiers. */ //Help 键按下 public static var maskHelp: CGEventFlags &#123; get &#125; //Fn 键按下 public static var maskSecondaryFn: CGEventFlags &#123; get &#125; /* Identifies key events from numeric keypad area on extended keyboards. */ //数字键 按下 public static var maskNumericPad: CGEventFlags &#123; get &#125; /* Indicates if mouse/pen movement events are not being coalesced */ //没有鼠标和苹果笔 按下 public static var maskNonCoalesced: CGEventFlags &#123; get &#125; &#125; */ /// 键盘类操作 /// - Parameters: /// - keyCode: 键盘事件中使用的虚拟键码,CGKeyCode 要使用系统定义好的，需要导入 import Carbon eg A: kVK_ANSI_A /// - keyDown: keyDown true按下 false 抬起 成对存在 /// - flags: CGEventFlags ---- 用作组合键 /// - ForExample: /// - K: FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: true, flags: .maskNonCoalesced) &lt;br&gt; /// FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: false, flags: .maskNonCoalesced) &lt;br&gt; /// - Command + KC: FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: true, flags: .maskCommand) &lt;br&gt;FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: false, flags: .maskCommand) /// - Command + Shift + K: &lt;br&gt; FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: true, flags: [.maskCommand,.maskShift]) &lt;br&gt; FyMKUtils.postKeyboardEvent(keyCode: CGKeyCode(kVK_ANSI_K), keyDown: false, flags: [.maskCommand,.maskShift]) open class func postKeyboardEvent(keyCode:CGKeyCode,keyDown:Bool,flags:CGEventFlags)&#123; let event = CGEvent.init(keyboardEventSource: CGEventSource.init(stateID: CGEventSourceStateID.privateState), virtualKey: keyCode, keyDown: keyDown) event?.flags = flags event?.post(tap: .cghidEventTap) &#125; &#125;//MARK:鼠标滚动方向enum ScrollOrientation &#123; case horizontal case vertical&#125;","categories":[{"name":"Mac","slug":"Mac","permalink":"https://ifeiyv666.github.io/categories/Mac/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/tags/Swift/"},{"name":"MAC","slug":"MAC","permalink":"https://ifeiyv666.github.io/tags/MAC/"},{"name":"代码模拟鼠标点击","slug":"代码模拟鼠标点击","permalink":"https://ifeiyv666.github.io/tags/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB/"},{"name":"代码模拟键盘","slug":"代码模拟键盘","permalink":"https://ifeiyv666.github.io/tags/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98/"}]},{"title":"Mac 文件已损坏或者未知开发者解决办法","slug":"Mac 文件已损坏或者未知开发者解决办法","date":"2020-03-17T08:01:03.000Z","updated":"2020-03-17T08:02:31.990Z","comments":true,"path":"2020/03/17/Mac 文件已损坏或者未知开发者解决办法/","link":"","permalink":"https://ifeiyv666.github.io/2020/03/17/Mac%20%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%E6%88%96%E8%80%85%E6%9C%AA%E7%9F%A5%E5%BC%80%E5%8F%91%E8%80%85%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"sudo spctl –master-disable (所有来源权限)各位注意，这是10.15以上系统的完美解决方法打开终端（Terminal），输入以下命令后回车，如需要，请输入密码sudo xattr -r -d com.apple.quarantine 注：为应用程序路径，直接从文件夹目录拖拽即可自动填写","categories":[{"name":"Mac","slug":"Mac","permalink":"https://ifeiyv666.github.io/categories/Mac/"}],"tags":[{"name":"文件已损坏解决办法","slug":"文件已损坏解决办法","permalink":"https://ifeiyv666.github.io/tags/%E6%96%87%E4%BB%B6%E5%B7%B2%E6%8D%9F%E5%9D%8F%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"},{"name":"未知开发者解决办法","slug":"未知开发者解决办法","permalink":"https://ifeiyv666.github.io/tags/%E6%9C%AA%E7%9F%A5%E5%BC%80%E5%8F%91%E8%80%85%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"}]},{"title":"结合RxSwift、Moya、和HandyJSON封装网络请求模板","slug":"结合RxSwift、Moya、和HandyJSON封装网络请求模板","date":"2020-03-16T06:43:52.000Z","updated":"2020-04-03T06:30:22.706Z","comments":true,"path":"2020/03/16/结合RxSwift、Moya、和HandyJSON封装网络请求模板/","link":"","permalink":"https://ifeiyv666.github.io/2020/03/16/%E7%BB%93%E5%90%88RxSwift%E3%80%81Moya%E3%80%81%E5%92%8CHandyJSON%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A8%A1%E6%9D%BF/","excerpt":"FyNetWork 结合RxSwift、Moya、和HandyJSON封装网络请求模板 【该模板已经上传Github】-&gt; 前往Github 获取代码 文件功能Podfile123//可以根据不同版本，调整库的版本（不同版本可能需要库的版本不同）pod 'Moya/RxSwift', '~&gt; 12.0.1'pod 'HandyJSON', '~&gt; 5.0.1' FyUrls.swift主要放一些请求Url 1234567891011121314151617181920212223242526struct FyUrls &#123; /// 服务器环境 true: 正服 false: 测服 #if DEBUG //测试环境 static let service: Bool = false #else //正式环境 static let service: Bool = true #endif static var domain: String &#123; // \"正服地址\" : \"测服地址\" (这里是网上搜到的开放接口，没有测试地址，两个都写正式地址) return FyUrls.service ? \"https://v1.alapi.cn/\" : \"https://v1.alapi.cn/\" &#125; //这里写拼接到域名上的Url static var searchMusic: String &#123; return \"api/music/search\" &#125; //....... &#125;","text":"FyNetWork 结合RxSwift、Moya、和HandyJSON封装网络请求模板 【该模板已经上传Github】-&gt; 前往Github 获取代码 文件功能Podfile123//可以根据不同版本，调整库的版本（不同版本可能需要库的版本不同）pod 'Moya/RxSwift', '~&gt; 12.0.1'pod 'HandyJSON', '~&gt; 5.0.1' FyUrls.swift主要放一些请求Url 1234567891011121314151617181920212223242526struct FyUrls &#123; /// 服务器环境 true: 正服 false: 测服 #if DEBUG //测试环境 static let service: Bool = false #else //正式环境 static let service: Bool = true #endif static var domain: String &#123; // \"正服地址\" : \"测服地址\" (这里是网上搜到的开放接口，没有测试地址，两个都写正式地址) return FyUrls.service ? \"https://v1.alapi.cn/\" : \"https://v1.alapi.cn/\" &#125; //这里写拼接到域名上的Url static var searchMusic: String &#123; return \"api/music/search\" &#125; //....... &#125; FyApi主要放基于Moya的网络请求配置 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374//// FyNetworkApi.swift// FyNetWork//// Created by l on 2020/3/16.// Copyright © 2020 ifeiyv. All rights reserved.//import Moyaenum FyApi &#123; case search(keyword:String) //.... case other&#125;extension FyApi:TargetType&#123; //域名配置 var baseURL: URL &#123; return URL(string: FyUrls.domain)! &#125; //接口路径 var path: String &#123; switch self &#123; case .search: return FyUrls.searchMusic default: return \"\" &#125; &#125; //请求的方式 可以根据接口切换请求方式 get、post或者其他 var method: Moya.Method &#123; switch self &#123; case .search: return .get default: return .post &#125; &#125; //做单元测试使用的数据 var sampleData: Data &#123; return \"&#123;&#125;\".data(using: String.Encoding.utf8)! &#125; //所有要执行的接口任务，参数的配置在这里设置 var task: Task &#123; switch self &#123; case .search(let keyword): let params = FyParams.init(params: [\"keyword\" : keyword]) return .requestParameters(parameters: params.allParams, encoding: URLEncoding.default) default: return .requestPlain &#125; &#125; //默认请求头配置 //也可以在FyRequest.swift的 requestTimeoutClosure中进行动态配置 var headers: [String : String]? &#123; switch self &#123; default: return [\"Content-type\": \"application/json\"] &#125; &#125; &#125; FyRequest.swift主要放Api接口请求方法具体实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061//// FyRequest.swift// FyNetWork//// Created by l on 2020/3/16.// Copyright © 2020 ifeiyv. All rights reserved.//import UIKitimport Moyaimport RxSwiftlet requestTimeoutClosure = &#123; (endpoint: Endpoint, done: @escaping MoyaProvider&lt;FyApi&gt;.RequestResultClosure) in do &#123; var request = try endpoint.urlRequest() //根据不同接口判断携带不同的请求头 //这个也可以根据接口判断，切换超时时长 if(request.url?.absoluteString.contains(FyUrls.searchMusic.lowercased()) ?? false)&#123; request.timeoutInterval = 30 request.addValue(\"zhangsan\", forHTTPHeaderField: \"user\") request.addValue(\"ahsfksjfhskdfhsjdkf\", forHTTPHeaderField: \"cookie\") &#125;else&#123; //..... request.timeoutInterval = 10 &#125; done(.success(request)) &#125; catch &#123; return &#125;&#125;class FyRequest: NSObject &#123; static let request = FyRequest() var provider = MoyaProvider&lt;FyApi&gt; (requestClosure: requestTimeoutClosure,plugins: [NetworkLoggerPlugin(verbose: true)]) // var provider = MoyaProvider&lt;FyApi&gt; ( // plugins: [NetworkLoggerPlugin(verbose: false)] // ) //接口具体请求实现 public func searchSongs(keyword:String) -&gt; Single&lt;Result&lt;Songs&gt;&gt;&#123; return provider.rx.request(.search(keyword: keyword)) .filterSuccessfulStatusCodes() //删选请求成功状态数据 .mapModel() //数据模型化 .flatMap &#123; (result: FyResponse&lt;Songs&gt;) in if result.isSuccess&#123; return Single.just(Result.regular(result.data ?? Songs())) &#125;else&#123; return Single.just(Result&lt;Songs&gt;.failing(RxMoyaError.reason(result.message ?? \"\"))) &#125; &#125; .catchError(&#123; error in return Single.just(Result.failing(RxMoyaError.reason(ErrorTips.netWorkError.rawValue))) &#125;) &#125;&#125; FyResponse.swift主要是请求响应解析方法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//// FyResponse.swift// FyNetWork//// Created by l on 2020/3/16.// Copyright © 2020 ifeiyv. All rights reserved.//import UIKitimport Moyaimport RxSwiftimport HandyJSONextension Array: HandyJSON &#123;&#125;extension String: HandyJSON &#123;&#125;//采用泛型解析数据struct FyResponse&lt;T:HandyJSON&gt;:HandyJSON&#123; var code:Int = 0 var message:String? var data: T? var isSuccess: Bool &#123; return code == 200 &#125;&#125;extension Response &#123; //响应数据转model func mapModel&lt;T&gt;() throws -&gt; FyResponse&lt;T&gt; &#123; do &#123; if let jsonString = String(data: data, encoding: String.Encoding.utf8)&#123; if let obj = JSONDeserializer&lt;FyResponse&lt;T&gt;&gt;.deserializeFrom(json: jsonString) &#123; return obj &#125; throw RxMoyaError.modelMapping(self) &#125; else &#123; throw RxMoyaError.modelMapping(self) &#125; &#125; catch &#123; throw RxMoyaError.modelMapping(self) &#125; &#125;&#125;extension PrimitiveSequence where TraitType == SingleTrait, ElementType == Response &#123; func mapModel&lt;T: HandyJSON&gt;() -&gt; Single&lt;FyResponse&lt;T&gt;&gt; &#123; return flatMap &#123; (response) -&gt; Single&lt;FyResponse&lt;T&gt;&gt; in return Single.just(try response.mapModel()) &#125; &#125;&#125; FyNetError.swift请求错误处理 FySongResponse.swift请求歌曲列表model例子 FyViewModel.swift网络请求库的运用例子 1234567891011121314151617181920212223242526272829303132333435363738394041424344//// FyViewModel.swift// FyNetWork//// Created by l on 2020/3/16.// Copyright © 2020 ifeiyv. All rights reserved.//import UIKitimport RxSwiftclass FyViewModel: NSObject &#123; var dispose = DisposeBag() public typealias NetworkResultClosure = (_ names:String) -&gt; Void func fetchMusicListData(keyword:String,networkResultClosure: @escaping NetworkResultClosure)&#123; _ = FyRequest.request.searchSongs(keyword: keyword).subscribe(onSuccess: &#123; (result) in switch result&#123; case.regular(let songsInfo): var name:String = \"\" for song in songsInfo.songs&#123; name = name + \"\\n\" + song.name &#125; networkResultClosure(name) case .failing( _): break &#125; &#125;) &#123; (error) in &#125;.disposed(by: dispose) &#125; &#125;//============ViewController.swift================= func loadData()&#123; //接口调用方式 viewModel?.fetchMusicListData(keyword:\"思如雪\",networkResultClosure: &#123;[weak self] (names) in DispatchQueue.main.async &#123; self?.tips?.text = names &#125; &#125;) &#125; FyParams.swift主要用来配置请求参数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//// FyParams.swift// Runner//// Created by l on 2020/3/16.// Copyright © 2020 The Chromium Authors. All rights reserved.//import UIKitclass FyBaseParams: NSObject &#123; var channel : String &#123; return \"com.lpf.FyNetWork\" &#125; var vno : Int &#123; return 100 &#125; /// ......................... //这里面存放一些通用参数（也就是每个接口都要携带的参数） var baseParams:[String:Any]?&#123; var tempParams:[String:Any] = [String:Any]() tempParams[\"channel\"] = channel tempParams[\"vno\"] = vno return tempParams &#125; //这里存放所有请求需要的参数 var allParams:[String:Any]!&#125;//根据接口需要的参数需求不同，进行适当的修改class FyParams: FyBaseParams &#123; init(params:[String:Any]? = [String:Any]()) &#123; super.init() var tempParams = [String:Any]() for param in baseParams ?? [String:Any]()&#123; tempParams[param.key] = param.value &#125; for param in params ?? [String:Any]()&#123; tempParams[param.key] = param.value &#125; allParams = tempParams ?? [String:Any]() &#125; &#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"RxSwift","slug":"RxSwift","permalink":"https://ifeiyv666.github.io/tags/RxSwift/"},{"name":"Moya","slug":"Moya","permalink":"https://ifeiyv666.github.io/tags/Moya/"},{"name":"HandyJSON","slug":"HandyJSON","permalink":"https://ifeiyv666.github.io/tags/HandyJSON/"}]},{"title":"iOS 13 DarkMode适配","slug":"iOS 13 DarkMode适配","date":"2020-03-13T04:44:21.000Z","updated":"2020-04-03T06:44:26.358Z","comments":true,"path":"2020/03/13/iOS 13 DarkMode适配/","link":"","permalink":"https://ifeiyv666.github.io/2020/03/13/iOS%2013%20DarkMode%E9%80%82%E9%85%8D/","excerpt":"","text":"封装颜色管理类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283//// FyColor.swift// FyColor//// Created by l on 2020/3/13.// Copyright © 2020 ifeiyv. All rights reserved.//import UIKitclass FyColors&#123; ///深色模式适配 手动控制适配模式 启用 关闭(如非必要，可移除相关代码) static let isOpenDarkModel:Bool = true //MARK: eg文字颜色 //文字颜色 如果有多种文字颜色可以设置多个 eg: labelTextColor public class var labelTextColor: UIColor &#123; return darkModeColor(dark:UIColor.white,light:UIColor.black) &#125; //文字颜色 如果有多种文字颜色可以设置多个 eg: buttonTextColor public class var buttonTextColor: UIColor &#123; return darkModeColor(dark:UIColor.white,light:UIColor.black) &#125; //文字颜色 如果有多种文字颜色可以设置多个 eg: fieldTextColor public class var fieldTextColor: UIColor &#123; return darkModeColor(dark:UIColor.white,light:UIColor.black) &#125; //MARK: eg背景颜色 //背景颜色 如果有多种文字颜色可以设置多个 eg: labelBgColor public class var labelBgColor: UIColor &#123; return darkModeColor(dark:UIColor.black,light:UIColor.white) &#125; //背景颜色 如果有多种文字颜色可以设置多个 eg: buttonBgColor public class var buttonBgColor: UIColor &#123; return darkModeColor(dark:UIColor.black,light:UIColor.white) &#125; //背景颜色 如果有多种背景颜色可以设置多个 eg: viewBgColor public class var viewBgColor: UIColor &#123; return darkModeColor(dark:UIColor.black,light:UIColor.white) &#125; //......................................... //根据需求增加相对应的颜色即可 //darkModeColor(dark:UIColor.white,light:UIColor.black) //实际开发中不可能只有 UIColor.white，UIColor.black 两种颜色。 //根据产品需求增加和修改对应的颜色 //检测当前是否是深色模式 class func isDarkStyle() -&gt; Bool&#123; if(!isOpenDarkModel)&#123; return false &#125; if #available(iOS 13.0, *)&#123; let currentMode = UITraitCollection.current.userInterfaceStyle if(currentMode == .dark)&#123; return true &#125; &#125; return false &#125; // 适配 动态颜色 class func darkModeColor(dark:UIColor,light:UIColor) -&gt;UIColor&#123; if(!isOpenDarkModel)&#123; return light &#125; if #available(iOS 13.0, *)&#123; return UIColor&#123;(trainCollection) -&gt; UIColor in if trainCollection.userInterfaceStyle == .dark&#123; return dark &#125;else&#123; return light &#125; &#125; &#125; return light &#125;&#125; 使用方式：(深色模式切换时，系统会重新渲染颜色，自动在设置好的两种颜色中进行切换) 12345678label.textColor = FyColors.labelTextColor label.backgroundColor = FyColors.labelBgColor //或者在此方法监听深色模式进行手动切换override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) &#123; super.traitCollectionDidChange(previousTraitCollection)&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ifeiyv666.github.io/categories/iOS/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/tags/Swift/"},{"name":"DarkMode","slug":"DarkMode","permalink":"https://ifeiyv666.github.io/tags/DarkMode/"}]},{"title":"AndroidStudio生成签名信息报错","slug":"AndroidStudio生成签名信息报错","date":"2020-02-05T06:33:46.000Z","updated":"2020-04-03T06:37:52.266Z","comments":true,"path":"2020/02/05/AndroidStudio生成签名信息报错/","link":"","permalink":"https://ifeiyv666.github.io/2020/02/05/AndroidStudio%E7%94%9F%E6%88%90%E7%AD%BE%E5%90%8D%E4%BF%A1%E6%81%AF%E6%8A%A5%E9%94%99/","excerpt":"","text":"AndroidStudio生成签名信息报错1234567Key was created with errors:Warning:JKS 密钥库使用专用格式。建议使用 \"keytool -importkeystore -srckeystore(存放路径)\\AndroidSigh.jks -destkeystore(存放路径)\\AndroidSigh.jks -deststoretype pkcs12\"迁移到行业标准格式 PKCS12。 解决方案在终端中输入以下命令： 123keytool -genkey -alias (alias名称) -keypass (alias密码) -keyalg RSA -keysize 2048 -validity 36500 -keystore (存放路径)\\(保存jks文件名称).jks -storepass (keyStore密码)//然后根据提示信息填写即可（上面命令中的括号要删掉）","categories":[{"name":"Android","slug":"Android","permalink":"https://ifeiyv666.github.io/categories/Android/"}],"tags":[{"name":"Android Studio","slug":"Android-Studio","permalink":"https://ifeiyv666.github.io/tags/Android-Studio/"},{"name":"jks","slug":"jks","permalink":"https://ifeiyv666.github.io/tags/jks/"}]},{"title":"Swift判断字符串中是否含有中文","slug":"Swift判断字符串中是否含有中文","date":"2020-01-15T02:48:26.000Z","updated":"2020-04-03T06:47:06.421Z","comments":true,"path":"2020/01/15/Swift判断字符串中是否含有中文/","link":"","permalink":"https://ifeiyv666.github.io/2020/01/15/Swift%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E4%B8%AD%E6%96%87/","excerpt":"","text":"123456789101112131415var str = \"l我o是v中e文123456789\"func judgeStringIncludeChineseWord(string: String) -&gt; Bool &#123; for (_, value) in string.characters.enumerated() &#123; if (\"\\u&#123;4E00&#125;\" &lt;= value &amp;&amp; value &lt;= \"\\u&#123;9FA5&#125;\") &#123; return true &#125; &#125; return false&#125;let result = judgeStringIncludeChineseWord(string: str)","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"Swift字符串","slug":"Swift字符串","permalink":"https://ifeiyv666.github.io/tags/Swift%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"Swift 分享邀请码图片合成","slug":"Swift 分享邀请码图片合成","date":"2019-12-15T10:43:21.000Z","updated":"2020-04-03T06:49:49.095Z","comments":true,"path":"2019/12/15/Swift 分享邀请码图片合成/","link":"","permalink":"https://ifeiyv666.github.io/2019/12/15/Swift%20%E5%88%86%E4%BA%AB%E9%82%80%E8%AF%B7%E7%A0%81%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90/","excerpt":"","text":"1234567891011121314151617181920 class func creteImage(bgImage: UIImage, iconImage: UIImage,iconFrame:CGRect,qrCodeImage:UIImage,codeFrame:CGRect,inviteCodeImg:UIImage,frame:CGRect) -&gt; UIImage &#123; // 1.开启图片上下文// UIGraphicsBeginImageContext(bgImage.size) UIGraphicsBeginImageContextWithOptions(bgImage.size,false,UIScreen.main.scale) // 2.绘制背景图片 bgImage.draw(in: CGRect(origin: CGPoint.zero, size: bgImage.size)) // 3.绘制头像 iconImage.draw(in: iconFrame) qrCodeImage.draw(in: codeFrame) inviteCodeImg.draw(in: frame) // 4.取出绘制号的图片 let newImage = UIGraphicsGetImageFromCurrentImageContext() // 5.关闭上下文 UIGraphicsEndImageContext() // 6.返回合成号的图片 return newImage! &#125; 123456789101112131415161718192021222324252627282930313233343536 //MARK: -传进去字符串,生成二维码图片class func setupQRCodeImage(_ text: String) -&gt; UIImage &#123; //创建滤镜 let filter = CIFilter(name: \"CIQRCodeGenerator\") filter?.setDefaults() //将url加入二维码 filter?.setValue(text.data(using: String.Encoding.utf8), forKey: \"inputMessage\") //取出生成的二维码（不清晰） if let outputImage = filter?.outputImage &#123; //生成清晰度更好的二维码 let qrCodeImage = Util.setupHighDefinitionUIImage(outputImage, size: 140) return qrCodeImage &#125; return UIImage() &#125; //MARK: - 生成高清的UIImageclass func setupHighDefinitionUIImage(_ image: CIImage, size: CGFloat) -&gt; UIImage &#123; let integral: CGRect = image.extent.integral let proportion: CGFloat = min(size/integral.width, size/integral.height) let width = integral.width * proportion let height = integral.height * proportion let colorSpace: CGColorSpace = CGColorSpaceCreateDeviceGray() let bitmapRef = CGContext(data: nil, width: Int(width), height: Int(height), bitsPerComponent: 8, bytesPerRow: 0, space: colorSpace, bitmapInfo: 0)! let context = CIContext(options: nil) let bitmapImage: CGImage = context.createCGImage(image, from: integral)! bitmapRef.interpolationQuality = CGInterpolationQuality.none bitmapRef.scaleBy(x: proportion, y: proportion); bitmapRef.draw(bitmapImage, in: integral); let image: CGImage = bitmapRef.makeImage()! return UIImage(cgImage: image) &#125; 1234567891011 class func getImageFromView(view:UIView) -&gt;UIImage&#123;// UIGraphicsBeginImageContext(view.bounds.size) UIGraphicsBeginImageContextWithOptions(view.bounds.size,false,UIScreen.main.scale) view.layer.render(in: UIGraphicsGetCurrentContext()!) let image = UIGraphicsGetImageFromCurrentImageContext() UIGraphicsEndImageContext() return image! &#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"图片合成","slug":"图片合成","permalink":"https://ifeiyv666.github.io/tags/%E5%9B%BE%E7%89%87%E5%90%88%E6%88%90/"}]},{"title":"Flutter 字符串多余n行折叠，点击展开","slug":"flutter 字符串多余n行折叠,点击展开","date":"2019-11-25T03:59:22.000Z","updated":"2020-04-03T08:23:45.789Z","comments":true,"path":"2019/11/25/flutter 字符串多余n行折叠,点击展开/","link":"","permalink":"https://ifeiyv666.github.io/2019/11/25/flutter%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%9A%E4%BD%99n%E8%A1%8C%E6%8A%98%E5%8F%A0,%E7%82%B9%E5%87%BB%E5%B1%95%E5%BC%80/","excerpt":"","text":"flutter 字符串多余n行折叠，点击展开 获取TextPainter 12345678TextPainter fetchTextPainter(String text, TextStyle style, int maxLine, double minWidth, double maxWidth) &#123; return TextPainter( maxLines: maxLine, text: TextSpan(text: text, style: style), textDirection: TextDirection.ltr) ..layout(maxWidth: maxWidth, minWidth: minWidth); &#125; 判断是否超过n行，需要截断文本 1234567891011bool isExpansion(String text, TextStyle style, int maxLine, double minWidth, double maxWidth) &#123; TextPainter _textPainter = fetchTextPainter(text, style, maxLine, minWidth, maxWidth); if (_textPainter.didExceedMaxLines) &#123; //这里判断 文本是否截断 return true; &#125; else &#123; return false; &#125; &#125; 超过n行，需要展开。展开箭头放在文本右下角，移除两个字符（根据需求）用来放展开箭头 12345678910String expansionString(String text, TextStyle style, int maxLine, double minWidth, double maxWidth) &#123; TextPainter _textPainter = fetchTextPainter(text, style, maxLine, minWidth, maxWidth); var end = _textPainter .getPositionForOffset( Offset(_textPainter.size.width, _textPainter.size.height)) .offset; return text.substring(0, end - 2) + \"...\";&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter 字符串","slug":"Flutter-字符串","permalink":"https://ifeiyv666.github.io/tags/Flutter-%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"直播系列四、报错Bug修复记录","slug":"直播系列四、报错Bug修复记录","date":"2019-11-08T04:04:12.000Z","updated":"2020-04-03T06:32:25.445Z","comments":true,"path":"2019/11/08/直播系列四、报错Bug修复记录/","link":"","permalink":"https://ifeiyv666.github.io/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E5%9B%9B%E3%80%81%E6%8A%A5%E9%94%99Bug%E4%BF%AE%E5%A4%8D%E8%AE%B0%E5%BD%95/","excerpt":"","text":"./build-ffmpeg.sh 12345678xcrun -sdk iphoneos clang is unable to create an executable file.C compiler test failed.If you think configure made a mistake, make sure you are using the latestversion from Git. If the latest version fails, report the problem to theffmpeg-user@ffmpeg.org mailing list or IRC #ffmpeg on irc.freenode.net.Include the log file \"config.log\" produced by configure as this will helpsolve the problem. 解决方法： 1sudo xcode-select --switch /Applications/Xcode.app armv7 https://www.jianshu.com/p/2669370bee23 123./libavutil/arm/asm.S:50:9: error: unknown directive .arch armv7-a ^ 删除armv7compile-ffmpeg.sh文件中 123FF_ALL_ARCHS_IOS8_SDK=\"armv7 arm64 i386 x86_64\"改为 FF_ALL_ARCHS_IOS8_SDK=\"arm64 i386 x86_64\"","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ifeiyv666.github.io/categories/iOS/"}],"tags":[{"name":"直播","slug":"直播","permalink":"https://ifeiyv666.github.io/tags/%E7%9B%B4%E6%92%AD/"}]},{"title":"直播系列三、IJKPlayer拉流","slug":"直播系列三、IJKPlayer拉流","date":"2019-11-08T03:32:57.000Z","updated":"2020-04-03T06:31:54.932Z","comments":true,"path":"2019/11/08/直播系列三、IJKPlayer拉流/","link":"","permalink":"https://ifeiyv666.github.io/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E4%B8%89%E3%80%81IJKPlayer%E6%8B%89%E6%B5%81/","excerpt":"","text":"https://www.jianshu.com/p/65fb80dff4d6 合并真机和模拟器的framework 1lipo -create 真机framework路径 模拟器framework路径 -output 合并的文件路径 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import UIKitclass playerViewController: UIViewController &#123; var iPlayer:IJKFFMoviePlayerController? override func viewDidLoad() &#123; super.viewDidLoad() let options:IJKFFOptions = IJKFFOptions.byDefault() let url:URL = URL.init(string: \"rtmp://live.hkstv.hk.lxdns.com/live/hks\")! self.iPlayer = IJKFFMoviePlayerController.init(contentURL: url, with: options) var arm1 = UIViewAutoresizing.init(rawValue: 0) arm1.insert(UIViewAutoresizing.flexibleWidth) arm1.insert(UIViewAutoresizing.flexibleHeight) self.iPlayer?.view.autoresizingMask = arm1 self.iPlayer?.view.backgroundColor = UIColor.white self.iPlayer?.view.frame = CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.size.width, height: 300) self.iPlayer?.scalingMode = .aspectFit self.iPlayer?.shouldAutoplay = true self.view.autoresizesSubviews = true self.view.addSubview((self.iPlayer?.view)!) // Do any additional setup after loading the view, typically from a nib. &#125; override func didReceiveMemoryWarning() &#123; super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. &#125; override func viewWillAppear(_ animated: Bool) &#123; super.viewWillAppear(animated) self.iPlayer?.prepareToPlay() //准备 self.iPlayer?.play() //播放 &#125; override func viewWillDisappear(_ animated: Bool) &#123; super.viewWillDisappear(animated) self.iPlayer?.pause()//暂停// self.iPlayer?.shutdown() //销毁 &#125;&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ifeiyv666.github.io/categories/iOS/"}],"tags":[{"name":"直播","slug":"直播","permalink":"https://ifeiyv666.github.io/tags/%E7%9B%B4%E6%92%AD/"}]},{"title":"直播系列二、LFLiveKit推流","slug":"直播系列二、LFLiveKit推流","date":"2019-11-08T03:05:49.000Z","updated":"2020-04-03T06:31:35.058Z","comments":true,"path":"2019/11/08/直播系列二、LFLiveKit推流/","link":"","permalink":"https://ifeiyv666.github.io/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E4%BA%8C%E3%80%81LFLiveKit%E6%8E%A8%E6%B5%81/","excerpt":"","text":"LFLiveKit：框架支持RTMP，由Adobe公司开发。github地址https://github.com/LaiFengiOS/LFLiveKit LFLiveKit库里已经集成GPUImage框架用于美颜功能，GPUImage基于OpenGl开发，纯OC语言框架，封装好了各种滤镜同时也可以编写自定义的滤镜，其本身内置了多达125种常见的滤镜效果。 LFLiveKit库通过pod导入项目 1pod 'LFLiveKit' 配置上传地址 123let stream = LFLiveStreamInfo()stream.url = \"rtmp://192.168.***.***:1935/rtmplive/room\"session.startLive(stream) demo 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426//// ViewController.swift// IfeiyvLiveVideo//// Created by l on 2019/7/1.// Copyright © 2019 ifeiyv. All rights reserved.//import UIKitclass ViewController: UIViewController, LFLiveSessionDelegate &#123; override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. session.delegate = self session.preView = self.view self.requestAccessForVideo() self.requestAccessForAudio() self.view.backgroundColor = UIColor.clear self.view.addSubview(containerView) containerView.addSubview(stateLabel) containerView.addSubview(closeButton) containerView.addSubview(beautyButton) containerView.addSubview(cameraButton) containerView.addSubview(startLiveButton) cameraButton.addTarget(self, action: #selector(didTappedCameraButton(_:)), for:.touchUpInside) beautyButton.addTarget(self, action: #selector(didTappedBeautyButton(_:)), for: .touchUpInside) startLiveButton.addTarget(self, action: #selector(didTappedStartLiveButton(_:)), for: .touchUpInside) &#125; override func didReceiveMemoryWarning() &#123; super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. &#125; //MARK: AccessAuth func requestAccessForVideo() -&gt; Void &#123; let status = AVCaptureDevice.authorizationStatus(for: AVMediaType.video); switch status &#123; // 许可对话没有出现，发起授权许可 case AVAuthorizationStatus.notDetermined: AVCaptureDevice.requestAccess(for: AVMediaType.video, completionHandler: &#123; (granted) in if(granted)&#123; DispatchQueue.main.async &#123; self.session.running = true &#125; &#125; &#125;) break; // 已经开启授权，可继续 case AVAuthorizationStatus.authorized: session.running = true; break; // 用户明确地拒绝授权，或者相机设备无法访问 case AVAuthorizationStatus.denied: break case AVAuthorizationStatus.restricted:break; default: break; &#125; &#125; func requestAccessForAudio() -&gt; Void &#123; let status = AVCaptureDevice.authorizationStatus(for:AVMediaType.audio) switch status &#123; // 许可对话没有出现，发起授权许可 case AVAuthorizationStatus.notDetermined: AVCaptureDevice.requestAccess(for: AVMediaType.audio, completionHandler: &#123; (granted) in &#125;) break; // 已经开启授权，可继续 case AVAuthorizationStatus.authorized: break; // 用户明确地拒绝授权，或者相机设备无法访问 case AVAuthorizationStatus.denied: break case AVAuthorizationStatus.restricted:break; default: break; &#125; &#125; //MARK: - Callbacks // 回调 func liveSession(_ session: LFLiveSession?, debugInfo: LFLiveDebug?) &#123; print(\"debugInfo: \\(debugInfo?.currentBandwidth)\") &#125; func liveSession(_ session: LFLiveSession?, errorCode: LFLiveSocketErrorCode) &#123; print(\"errorCode: \\(errorCode.rawValue)\") &#125; func liveSession(_ session: LFLiveSession?, liveStateDidChange state: LFLiveState) &#123; print(\"liveStateDidChange: \\(state.rawValue)\") switch state &#123; case LFLiveState.ready: stateLabel.text = \"未连接\" break; case LFLiveState.pending: stateLabel.text = \"连接中\" break; case LFLiveState.start: stateLabel.text = \"已连接\" break; case LFLiveState.error: stateLabel.text = \"连接错误\" break; case LFLiveState.stop: stateLabel.text = \"未连接\" break; default: break; &#125; &#125; //MARK: - Events // 开始直播 @objc func didTappedStartLiveButton(_ button: UIButton) -&gt; Void &#123; startLiveButton.isSelected = !startLiveButton.isSelected; if (startLiveButton.isSelected) &#123; startLiveButton.setTitle(\"结束直播\", for: UIControl.State()) let stream = LFLiveStreamInfo() stream.url = \"rtmp://192.168.1.148:1935/rtmplive/room\" session.startLive(stream) &#125; else &#123; startLiveButton.setTitle(\"开始直播\", for: UIControl.State()) session.stopLive() &#125; &#125; // 美颜 @objc func didTappedBeautyButton(_ button: UIButton) -&gt; Void &#123; session.beautyFace = !session.beautyFace; beautyButton.isSelected = !session.beautyFace &#125; // 摄像头 @objc func didTappedCameraButton(_ button: UIButton) -&gt; Void &#123; let devicePositon = session.captureDevicePosition; session.captureDevicePosition = (devicePositon == AVCaptureDevice.Position.back) ? AVCaptureDevice.Position.front : AVCaptureDevice.Position.back; &#125; // 关闭 func didTappedCloseButton(_ button: UIButton) -&gt; Void &#123; &#125; //MARK: - Getters and Setters // 默认分辨率368 ＊ 640 音频：44.1 iphone6以上48 双声道 方向竖屏 var session: LFLiveSession = &#123; let audioConfiguration = LFLiveAudioConfiguration.defaultConfiguration(for: LFLiveAudioQuality.high) let videoConfiguration = LFLiveVideoConfiguration.defaultConfiguration(for: LFLiveVideoQuality.low3) let session = LFLiveSession(audioConfiguration: audioConfiguration, videoConfiguration: videoConfiguration) return session! &#125;() // 视图 var containerView: UIView = &#123; let containerView = UIView(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height)) containerView.backgroundColor = UIColor.clear containerView.autoresizingMask = [UIView.AutoresizingMask.flexibleHeight, UIView.AutoresizingMask.flexibleHeight] return containerView &#125;() // 状态Label var stateLabel: UILabel = &#123; let stateLabel = UILabel(frame: CGRect(x: 20, y: 20, width: 80, height: 40)) stateLabel.text = \"未连接\" stateLabel.textColor = UIColor.white stateLabel.font = UIFont.systemFont(ofSize: 14) return stateLabel &#125;() // 关闭按钮 var closeButton: UIButton = &#123; let closeButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 10 - 44, y: 20, width: 44, height: 44)) closeButton.setImage(UIImage(named: \"close_preview\"), for: UIControl.State()) return closeButton &#125;() // 摄像头 var cameraButton: UIButton = &#123; let cameraButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 54 * 2, y: 20, width: 44, height: 44)) cameraButton.setImage(UIImage(named: \"camra_preview\"), for: UIControl.State()) return cameraButton &#125;() // 摄像头 var beautyButton: UIButton = &#123; let beautyButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 54 * 3, y: 20, width: 44, height: 44)) beautyButton.setImage(UIImage(named: \"camra_beauty\"), for: UIControl.State.selected) beautyButton.setImage(UIImage(named: \"camra_beauty_close\"), for: UIControl.State()) return beautyButton &#125;() // 开始直播按钮 var startLiveButton: UIButton = &#123; let startLiveButton = UIButton(frame: CGRect(x: 30, y: UIScreen.main.bounds.height - 50, width: UIScreen.main.bounds.width - 10 - 44, height: 44)) startLiveButton.layer.cornerRadius = 22 startLiveButton.setTitleColor(UIColor.black, for:UIControl.State()) startLiveButton.setTitle(\"开始直播\", for: UIControl.State()) startLiveButton.titleLabel!.font = UIFont.systemFont(ofSize: 14) startLiveButton.backgroundColor = UIColor(red: 50/255.0, green: 32/255.0, blue: 245/255.0, alpha: 1)//colorLiteralRed: 50, green: 32, blue: 245, alpha: 1 return startLiveButton &#125;()&#125;//// ViewController.swift// IfeiyvLiveVideo//// Created by l on 2019/7/1.// Copyright © 2019 ifeiyv. All rights reserved.//import UIKitclass ViewController: UIViewController, LFLiveSessionDelegate &#123; override func viewDidLoad() &#123; super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. session.delegate = self session.preView = self.view self.requestAccessForVideo() self.requestAccessForAudio() self.view.backgroundColor = UIColor.clear self.view.addSubview(containerView) containerView.addSubview(stateLabel) containerView.addSubview(closeButton) containerView.addSubview(beautyButton) containerView.addSubview(cameraButton) containerView.addSubview(startLiveButton) cameraButton.addTarget(self, action: #selector(didTappedCameraButton(_:)), for:.touchUpInside) beautyButton.addTarget(self, action: #selector(didTappedBeautyButton(_:)), for: .touchUpInside) startLiveButton.addTarget(self, action: #selector(didTappedStartLiveButton(_:)), for: .touchUpInside) &#125; override func didReceiveMemoryWarning() &#123; super.didReceiveMemoryWarning() // Dispose of any resources that can be recreated. &#125; //MARK: AccessAuth func requestAccessForVideo() -&gt; Void &#123; let status = AVCaptureDevice.authorizationStatus(for: AVMediaType.video); switch status &#123; // 许可对话没有出现，发起授权许可 case AVAuthorizationStatus.notDetermined: AVCaptureDevice.requestAccess(for: AVMediaType.video, completionHandler: &#123; (granted) in if(granted)&#123; DispatchQueue.main.async &#123; self.session.running = true &#125; &#125; &#125;) break; // 已经开启授权，可继续 case AVAuthorizationStatus.authorized: session.running = true; break; // 用户明确地拒绝授权，或者相机设备无法访问 case AVAuthorizationStatus.denied: break case AVAuthorizationStatus.restricted:break; default: break; &#125; &#125; func requestAccessForAudio() -&gt; Void &#123; let status = AVCaptureDevice.authorizationStatus(for:AVMediaType.audio) switch status &#123; // 许可对话没有出现，发起授权许可 case AVAuthorizationStatus.notDetermined: AVCaptureDevice.requestAccess(for: AVMediaType.audio, completionHandler: &#123; (granted) in &#125;) break; // 已经开启授权，可继续 case AVAuthorizationStatus.authorized: break; // 用户明确地拒绝授权，或者相机设备无法访问 case AVAuthorizationStatus.denied: break case AVAuthorizationStatus.restricted:break; default: break; &#125; &#125; //MARK: - Callbacks // 回调 func liveSession(_ session: LFLiveSession?, debugInfo: LFLiveDebug?) &#123; print(\"debugInfo: \\(debugInfo?.currentBandwidth)\") &#125; func liveSession(_ session: LFLiveSession?, errorCode: LFLiveSocketErrorCode) &#123; print(\"errorCode: \\(errorCode.rawValue)\") &#125; func liveSession(_ session: LFLiveSession?, liveStateDidChange state: LFLiveState) &#123; print(\"liveStateDidChange: \\(state.rawValue)\") switch state &#123; case LFLiveState.ready: stateLabel.text = \"未连接\" break; case LFLiveState.pending: stateLabel.text = \"连接中\" break; case LFLiveState.start: stateLabel.text = \"已连接\" break; case LFLiveState.error: stateLabel.text = \"连接错误\" break; case LFLiveState.stop: stateLabel.text = \"未连接\" break; default: break; &#125; &#125; //MARK: - Events // 开始直播 @objc func didTappedStartLiveButton(_ button: UIButton) -&gt; Void &#123; startLiveButton.isSelected = !startLiveButton.isSelected; if (startLiveButton.isSelected) &#123; startLiveButton.setTitle(\"结束直播\", for: UIControl.State()) let stream = LFLiveStreamInfo() stream.url = \"rtmp://192.168.1.148:1935/rtmplive/room\" session.startLive(stream) &#125; else &#123; startLiveButton.setTitle(\"开始直播\", for: UIControl.State()) session.stopLive() &#125; &#125; // 美颜 @objc func didTappedBeautyButton(_ button: UIButton) -&gt; Void &#123; session.beautyFace = !session.beautyFace; beautyButton.isSelected = !session.beautyFace &#125; // 摄像头 @objc func didTappedCameraButton(_ button: UIButton) -&gt; Void &#123; let devicePositon = session.captureDevicePosition; session.captureDevicePosition = (devicePositon == AVCaptureDevice.Position.back) ? AVCaptureDevice.Position.front : AVCaptureDevice.Position.back; &#125; // 关闭 func didTappedCloseButton(_ button: UIButton) -&gt; Void &#123; &#125; //MARK: - Getters and Setters // 默认分辨率368 ＊ 640 音频：44.1 iphone6以上48 双声道 方向竖屏 var session: LFLiveSession = &#123; let audioConfiguration = LFLiveAudioConfiguration.defaultConfiguration(for: LFLiveAudioQuality.high) let videoConfiguration = LFLiveVideoConfiguration.defaultConfiguration(for: LFLiveVideoQuality.low3) let session = LFLiveSession(audioConfiguration: audioConfiguration, videoConfiguration: videoConfiguration) return session! &#125;() // 视图 var containerView: UIView = &#123; let containerView = UIView(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height)) containerView.backgroundColor = UIColor.clear containerView.autoresizingMask = [UIView.AutoresizingMask.flexibleHeight, UIView.AutoresizingMask.flexibleHeight] return containerView &#125;() // 状态Label var stateLabel: UILabel = &#123; let stateLabel = UILabel(frame: CGRect(x: 20, y: 20, width: 80, height: 40)) stateLabel.text = \"未连接\" stateLabel.textColor = UIColor.white stateLabel.font = UIFont.systemFont(ofSize: 14) return stateLabel &#125;() // 关闭按钮 var closeButton: UIButton = &#123; let closeButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 10 - 44, y: 20, width: 44, height: 44)) closeButton.setImage(UIImage(named: \"close_preview\"), for: UIControl.State()) return closeButton &#125;() // 摄像头 var cameraButton: UIButton = &#123; let cameraButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 54 * 2, y: 20, width: 44, height: 44)) cameraButton.setImage(UIImage(named: \"camra_preview\"), for: UIControl.State()) return cameraButton &#125;() // 摄像头 var beautyButton: UIButton = &#123; let beautyButton = UIButton(frame: CGRect(x: UIScreen.main.bounds.width - 54 * 3, y: 20, width: 44, height: 44)) beautyButton.setImage(UIImage(named: \"camra_beauty\"), for: UIControl.State.selected) beautyButton.setImage(UIImage(named: \"camra_beauty_close\"), for: UIControl.State()) return beautyButton &#125;() // 开始直播按钮 var startLiveButton: UIButton = &#123; let startLiveButton = UIButton(frame: CGRect(x: 30, y: UIScreen.main.bounds.height - 50, width: UIScreen.main.bounds.width - 10 - 44, height: 44)) startLiveButton.layer.cornerRadius = 22 startLiveButton.setTitleColor(UIColor.black, for:UIControl.State()) startLiveButton.setTitle(\"开始直播\", for: UIControl.State()) startLiveButton.titleLabel!.font = UIFont.systemFont(ofSize: 14) startLiveButton.backgroundColor = UIColor(red: 50/255.0, green: 32/255.0, blue: 245/255.0, alpha: 1)//colorLiteralRed: 50, green: 32, blue: 245, alpha: 1 return startLiveButton &#125;()&#125;","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ifeiyv666.github.io/categories/iOS/"}],"tags":[{"name":"直播","slug":"直播","permalink":"https://ifeiyv666.github.io/tags/%E7%9B%B4%E6%92%AD/"}]},{"title":"直播系列一、创建本地rtmp服务器","slug":"直播系列一、创建本地rtmp服务器","date":"2019-11-08T02:32:25.000Z","updated":"2020-04-03T06:36:56.485Z","comments":true,"path":"2019/11/08/直播系列一、创建本地rtmp服务器/","link":"","permalink":"https://ifeiyv666.github.io/2019/11/08/%E7%9B%B4%E6%92%AD%E7%B3%BB%E5%88%97%E4%B8%80%E3%80%81%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0rtmp%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"在网上搜索参考了大量文章，解决了N多Bug,终于实现了直播功能 nginx是非常优秀的开源服务器，用它来做hls或者rtmp流媒体服务器是非常不错的选择 1、安装Homebrow（1）执行克隆命令,github的项目(https://github.com/denji/homebrew-nginx) 1brew tap denji/nginx 注意brew tap homebrew/nginx报下面的错误,homebrew/nginx已经弃用. 报错：Error: homebrew/nginx was deprecated. This tap is now empty as all its formulae were migrated. （2）执行安装命令: 1brew install nginx-full --with-rtmp-module （3）至此nginx和rtmp模块就安装好了，下面开始来配置nginx的rtmp模块 接下来看一下nginx安装在什么地方: 1brew info nginx-full 打印信息 12345678910111213141516171819202122The default port has been set in /usr/local/etc/nginx/nginx.conf to 8080 so thatnginx can run without sudo.nginx will load all files in /usr/local/etc/nginx/servers/.- Tips -Run port 80: $ sudo chown root:wheel /usr/local/opt/nginx-full/bin/nginx $ sudo chmod u+s /usr/local/opt/nginx-full/bin/nginxReload config: $ nginx -s reloadReopen Logfile: $ nginx -s reopenStop process: $ nginx -s stopWaiting on exit process $ nginx -s quitTo have launchd start denji/nginx/nginx-full now and restart at login: brew services start denji/nginx/nginx-fullOr, if you don't want/need a background service you can just run: nginx nginx安装所在位置: 1/usr/local/opt/nginx-full/bin/nginx nginx配置文件所在位置: 1/usr/local/etc/nginx/nginx.conf （4）启动nginx,执行命令: 1sudo nginx 2、测试nginx：1在浏览器中打开如下地址：http://localhost:8080入过 如果出现Welcome to nginx!,说明安装成功. 如果终端上提示： 1nginx: [emerg] bind() to 0.0.0.0:8080 failed (48: Address already in use) 则表示8080端口被占用了, 查看端口PID 1lsof -i tcp:8080 kill掉占用8080端口的PID 1kill 9603（这里替换成占用8080端口的PID） 3、重新加载nginx的配置文件（1）修改nginx.conf这个配置文件，配置rtmp 复制nginx配置文件所在位置: 1vi /usr/local/etc/nginx/nginx.conf （2）执行上面命令会直接编辑,或者直接前往当前文件用记事本打开. 滚动到最后面(最后一个}后面即可，不能在{}里面)，添加一下代码，进行配置，最后记得保存。 1234567891011121314151617rtmp &#123; server &#123; listen 1935; #直播流配置 application rtmplive &#123; live on; #为 rtmp 引擎设置最大连接数。默认为 off max_connections 1024; &#125; application hls&#123; live on; hls on; hls_path /usr/local/var/www/hls; hls_fragment 1s; &#125; &#125; &#125; （3）编辑完成之后,执行一下重新加载配置文件命令: 1sudo nginx -s reload 需要输入开机密码 sudo不加的话会报错： nginx: [alert] could not open error log file: open() &quot;/usr/local/var/log/nginx/error.log&quot; failed (13: Permission denied)该命令执行后会出来一个弹框询问是否允许 nginx 加入到网络中，选择允许即可。 （4）重启nginx： 1sudo /usr/local/opt/nginx-full/bin/nginx -s reload PS：如果你之前不是按照我上面的方法按照的 nginx，在执行 sudo nginx -s reload 时报了如下错，建议你卸载 nginx后按照我上面的步骤重新安装nginx。 nginx: [emerg] unknown directive “rtmp” in /usr/local/etc/nginx/nginx.conf:119 nginx常用方法: 出现权限不足的错误提示时，命令前加上 sudo 1234重新加载配置文件: nginx -s reload重新加载日志: nginx -s reopen 停止 nginx: nginx -s stop 有序退出 nginx: nginx -s quit 4、安装ffmepg工具1brew install ffmpeg 5、本地推流(1)、搭建本地视频直播，比如电脑上面有很多电影，我们可以通过推流的形式实现实时直播： A：在电脑上播放推流内容 安装一个支持rtmp协议的视频播放器，Mac下可以用VLC 下载VLC 本地下载一个视频文件路径为 /Users/iOS002/Desktop/loginmovie.mp4 执行以下命令: 1ffmpeg -re -i /Users/iOS002/Desktop/loginmovie.mp4 -vcodec libx264 -acodec aac -strict -2 -f flv rtmp://localhost:1935/rtmplive/room 用vlc 然后打开 VLC 中 的 file – Open Network, 直接输入代码中的 url: 1rtmp://localhost:1935/rtmplive/room 即可以通过VLC来播放终端中实时推过来的 RTMP流。 B：通过手机观看电脑的推流 通过集成 ijkplayer 把地址换成推流的地址即可观看 播放端用的针对RTMP优化过的ijkplayer，ijkplayer是基于FFmpeg的跨平台播放器，这个开源项目已经被多个 App 使用，其中映客、美拍和斗鱼使用了 ijkplayer。 (2)、桌面录制或者分享 1ffmpeg -f avfoundation -i \"1\" -vcodec libx264 -preset ultrafast -acodec libfaac -f flv rtmp://localhost:1935/rtmplive/room (3)、桌面+麦克风 1ffmpeg -f avfoundation -i \"1:0\" -vcodec libx264 -preset ultrafast -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp://localhost:1935/rtmplive/room (4)、桌面+麦克风，并且还要摄像头拍摄到自己 1ffmpeg -f avfoundation -framerate 30 -i \"1:0\" \\-f avfoundation -framerate 30 -video_size 640x480 -i \"0\" \\-c:v libx264 -preset ultrafast \\-filter_complex 'overlay=main_w-overlay_w-10:main_h-overlay_h-10' -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp://localhost:2016/rtmplive/room 6、手机推流可以用 LFLiveKit 集成到工程进行推流，LFLiveKit已经帮我们实现了视频采集、后台录制、美颜功能、支持h264、AAC编码，动态改变速率，RTMP传输等，我们开发的时候就很简单了只需把localhost:8080换成自己电脑的ip地址即可: 1rtmp://10.0.0.17:1935/rtmplive/room 注意通过网络查看电脑的局域网 IP替换掉 localhost 即可。 A：通过VLC观看手机的推流 打开手机直播后，然后在电脑上打开VLC（同上），就能实现手机推流，在电脑上拉流播放了！！(注：手机需要和电脑连接同一网络！) B：通过手机观看手机的推流（这也就是市面上的那些直播App的最终实现形式了） 通过集成 ijkplayer 把地址换成推流的地址即可观看。 PS：一个很隐蔽的报错： 如果你发现你的推流地址和拉流地址在电脑上都是好好的，但是通过手机实现的时候就是报错，那么估计就是因为Mac防火墙的问题。 1234ERROR: PILI_RTMP_Connect0, failed to connect socket. 60 (Operation timed out)ERROR: WriteN, PILI_RTMP send error 9, Bad file descriptor, (140 bytes)ERROR: PILI_RTMP_Connect0, failed to connect socket. 60 (Operation timed out)ERROR: WriteN, PILI_RTMP send error 9, Bad file descriptor, (140 bytes) 关闭 Mac 的防火墙即可解决问题。 1偏好设置-&gt;安全性与隐私-&gt;防火墙","categories":[{"name":"iOS","slug":"iOS","permalink":"https://ifeiyv666.github.io/categories/iOS/"}],"tags":[{"name":"直播","slug":"直播","permalink":"https://ifeiyv666.github.io/tags/%E7%9B%B4%E6%92%AD/"}]},{"title":"shared_preferences数据存储","slug":"shared_preferences数据存储","date":"2019-10-19T10:52:45.000Z","updated":"2020-04-03T06:45:03.202Z","comments":true,"path":"2019/10/19/shared_preferences数据存储/","link":"","permalink":"https://ifeiyv666.github.io/2019/10/19/shared_preferences%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/","excerpt":"","text":"shared_preferences库 shared_preferences库同时支持Android和ios平台,存键值对信息，进行数据本地持久化存储。 引用方法 在pubspec.yaml文件中添加依赖 shared_preferences: ^0.5.3+4-&gt;查看最新版本 执行$ flutter packages get命令 下载插件 在使用的文件中导入： import &#39;package:shared_preferences/shared_preferences.dart&#39;; 使用方法12345678910111213141516171819202122232425262728293031323334353637SharedPreferences sharedPreferences = await SharedPreferences.getInstance();sharedPreferences.setString(\"name\", \"hehe\");sharedPreferences.setInt(\"age\", 18);sharedPreferences.setDouble(\"height\", 1.72);sharedPreferences.setBool(\"sex\", true);//true 表示男 false表示女sharedPreferences.setStringList(\"like\", [\"MV\",\"Music\",\"Pic\"]);print(\"=========get****(\"key\")取出存储的数据==============\");print(\"姓名:\"+ sharedPreferences.getString(\"name\"));print(\"年龄:\" + sharedPreferences.getInt(\"age\").toString());print(\"身高:\"+ sharedPreferences.getDouble(\"height\").toString());print(\"性别:\"+ ((sharedPreferences.getBool(\"sex\") == true) ? \"男\":\"女\"));print(\"爱好:\"+ sharedPreferences.getStringList(\"like\").toString());print(\"========getKeys()取出存储的所有key值=============\");print(sharedPreferences.getKeys());print(\"========set***(\"key\")给已经存在的key重新赋值=============\");print(\"姓名:\"+ sharedPreferences.getString(\"name\"));sharedPreferences.setString(\"name\", \"feiyv\");print(\"姓名:\"+ sharedPreferences.getString(\"name\"));print(\"========containsKey(\"key\")判断存储的是否有某个Key值=============\");print(\"name是否存在：\" + sharedPreferences.containsKey(\"name\"));print(\"rename是否存在：\" + sharedPreferences.containsKey(\"rename\"));print(\"========remove(\"key\")删除单个Key数据=============\");print(\"年龄:\" + sharedPreferences.getInt(\"age\").toString());sharedPreferences.remove(\"age\");print(\"年龄:\" + sharedPreferences.getInt(\"age\").toString());print(\"========clear清除所有数据=============\");sharedPreferences.clear();print(\"sharedPreferences.clear();\");print(\"name是否存在：\" + sharedPreferences.containsKey(\"name\").toString());print(\"所有的key值：\"+ sharedPreferences.getKeys().toString()); 打印数据：123456789101112131415161718192021222324252627flutter: =========get****(\"key\")取出存储的数据==============flutter: 姓名:heheflutter: 年龄:18flutter: 身高:1.72flutter: 性别:男flutter: 爱好:[MV, Music, Pic]flutter: ========getKeys()取出存储的所有key值=============flutter: &#123;name, age, height, sex, like&#125;flutter: ========set****(\"key\")给已经存在的key重新赋值=============flutter: 姓名:heheflutter: 姓名:feiyvflutter: ========containsKey(\"key\")判断存储的是否有某个Key值=============flutter: name是否存在：trueflutter: rename是否存在：falseflutter: ========remove(\"key\")删除单个Key数据=============flutter: 年龄:18flutter: 年龄:nullflutter: ========clear清除所有数据=============flutter: sharedPreferences.clear();flutter: name是否存在：falseflutter: 所有的key值：&#123;&#125;","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"shared_preferences","slug":"shared-preferences","permalink":"https://ifeiyv666.github.io/tags/shared-preferences/"}]},{"title":"path_provider获取系统目录","slug":"path_provider获取系统目录","date":"2019-10-13T07:22:25.000Z","updated":"2020-03-17T07:23:31.912Z","comments":true,"path":"2019/10/13/path_provider获取系统目录/","link":"","permalink":"https://ifeiyv666.github.io/2019/10/13/path_provider%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95/","excerpt":"","text":"PathProvider 插件 PathProvider 访问设备文件系统上的常用位置。 使用方法： 在pubspec.yaml文件中添加 PathProvider 插件 path_provider: ^*.*.*查看最新版本 在文件中导入： import &#39;package:path_provider/path_provider.dart&#39;; DocumentsDirectory 文档目录，用于存储只有自己可以访问的文件。只有当应用程序被卸载时，系统才会清除该目录。在iOS上，这对应于NSDocumentDirectory。在Android上，这是AppData目录。 String docDir = (await getApplicationDocumentsDirectory()).path; TemporaryDirectory 系统可随时清除的临时目录（缓存）。在iOS上，这对应于NSTemporaryDirectory() 返回的值。在Android上，这是getCacheDir()返回的目录。 String tempDir = (await getTemporaryDirectory()).path; SupportDirectory 在iOS上，它使用NSApplicationSupportDirectory 来获取目录。在Android上，这是getFilesDir返回的目录。 String supportDir = (await getApplicationSupportDirectory()).path; ExternalStorageDirectory 获取存储卡路径,仅在Android上中有效，iOS系统无此方法，可以通过Platform.isIOS来判断当前系统是否是iOS系统 String extStorageDir = (await getExternalStorageDirectory()).path; PathProvider-&gt;GitHub PathProvider-&gt;Pub","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"path_provider","slug":"path-provider","permalink":"https://ifeiyv666.github.io/tags/path-provider/"}]},{"title":"pip3 install scrapy","slug":"pip3installscrapy","date":"2019-08-31T06:52:08.000Z","updated":"2020-04-03T07:20:34.583Z","comments":true,"path":"2019/08/31/pip3installscrapy/","link":"","permalink":"https://ifeiyv666.github.io/2019/08/31/pip3installscrapy/","excerpt":"","text":"l@192  ~  python3 -m pip install –upgrade pip123456WARNING: Retrying (Retry(total&#x3D;4, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;pypi.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;15)&quot;)&#39;: &#x2F;simple&#x2F;pip&#x2F;WARNING: Retrying (Retry(total&#x3D;3, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;pypi.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;15)&quot;)&#39;: &#x2F;simple&#x2F;pip&#x2F;WARNING: Retrying (Retry(total&#x3D;2, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;pypi.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;15)&quot;)&#39;: &#x2F;simple&#x2F;pip&#x2F;WARNING: Retrying (Retry(total&#x3D;1, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;pypi.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;15)&quot;)&#39;: &#x2F;simple&#x2F;pip&#x2F;WARNING: Retrying (Retry(total&#x3D;0, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;pypi.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;15)&quot;)&#39;: &#x2F;simple&#x2F;pip&#x2F;Requirement already up-to-date: pip in &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages (19.1.1) l@192  ~  pip3 install scrapy 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162Collecting scrapy Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;29&#x2F;4b&#x2F;585e8e111ffb01466c59281f34febb13ad1a95d7fb3919fd57c33fc732a5&#x2F;Scrapy-1.7.3-py2.py3-none-any.whl (234kB) |████████▍ | 61kB 11kB&#x2F;s eta 0:00:15ERROR: Exception:Traceback (most recent call last): File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 360, in _error_catcher yield File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 442, in read data &#x3D; self._fp.read(amt) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;cachecontrol&#x2F;filewrapper.py&quot;, line 62, in read data &#x3D; self.__fp.read(amt) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;http&#x2F;client.py&quot;, line 457, in read n &#x3D; self.readinto(b) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;http&#x2F;client.py&quot;, line 501, in readinto n &#x3D; self.fp.readinto(b) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;socket.py&quot;, line 589, in readinto return self._sock.recv_into(b) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;ssl.py&quot;, line 1071, in recv_into return self.read(nbytes, buffer) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;ssl.py&quot;, line 929, in read return self._sslobj.read(len, buffer)socket.timeout: The read operation timed outDuring handling of the above exception, another exception occurred:Traceback (most recent call last): File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;cli&#x2F;base_command.py&quot;, line 178, in main status &#x3D; self.run(options, args) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;commands&#x2F;install.py&quot;, line 352, in run resolver.resolve(requirement_set) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;resolve.py&quot;, line 131, in resolve self._resolve_one(requirement_set, req) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;resolve.py&quot;, line 294, in _resolve_one abstract_dist &#x3D; self._get_abstract_dist_for(req_to_install) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;resolve.py&quot;, line 242, in _get_abstract_dist_for self.require_hashes File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;operations&#x2F;prepare.py&quot;, line 347, in prepare_linked_requirement progress_bar&#x3D;self.progress_bar File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 886, in unpack_url progress_bar&#x3D;progress_bar File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 746, in unpack_http_url progress_bar) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 954, in _download_http_url _download_url(resp, link, content_file, hashes, progress_bar) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 683, in _download_url hashes.check_against_chunks(downloaded_chunks) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;utils&#x2F;hashes.py&quot;, line 62, in check_against_chunks for chunk in chunks: File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 651, in written_chunks for chunk in chunks: File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;utils&#x2F;ui.py&quot;, line 156, in iter for x in it: File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 640, in resp_read decode_content&#x3D;False): File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 494, in stream data &#x3D; self.read(amt&#x3D;amt, decode_content&#x3D;decode_content) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 459, in read raise IncompleteRead(self._fp_bytes_read, self.length_remaining) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;contextlib.py&quot;, line 130, in __exit__ self.gen.throw(type, value, traceback) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 365, in _error_catcher raise ReadTimeoutError(self._pool, None, &#39;Read timed out.&#39;)pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host&#x3D;&#39;files.pythonhosted.org&#39;, port&#x3D;443): Read timed out. ** ✘ l@192  ~  pip3 install scrapy1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071Collecting scrapy WARNING: Retrying (Retry(total&#x3D;4, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;pypi.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;15)&quot;)&#39;: &#x2F;simple&#x2F;scrapy&#x2F; WARNING: Retrying (Retry(total&#x3D;3, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;pypi.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;15)&quot;)&#39;: &#x2F;simple&#x2F;scrapy&#x2F; Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;29&#x2F;4b&#x2F;585e8e111ffb01466c59281f34febb13ad1a95d7fb3919fd57c33fc732a5&#x2F;Scrapy-1.7.3-py2.py3-none-any.whl (234kB)ERROR: Exception:Traceback (most recent call last): File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 360, in _error_catcher yield File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 442, in read data &#x3D; self._fp.read(amt) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;cachecontrol&#x2F;filewrapper.py&quot;, line 62, in read data &#x3D; self.__fp.read(amt) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;http&#x2F;client.py&quot;, line 457, in read n &#x3D; self.readinto(b) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;http&#x2F;client.py&quot;, line 501, in readinto n &#x3D; self.fp.readinto(b) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;socket.py&quot;, line 589, in readinto return self._sock.recv_into(b) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;ssl.py&quot;, line 1071, in recv_into return self.read(nbytes, buffer) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;ssl.py&quot;, line 929, in read return self._sslobj.read(len, buffer)socket.timeout: The read operation timed outDuring handling of the above exception, another exception occurred:Traceback (most recent call last): File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;cli&#x2F;base_command.py&quot;, line 178, in main status &#x3D; self.run(options, args) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;commands&#x2F;install.py&quot;, line 352, in run resolver.resolve(requirement_set) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;resolve.py&quot;, line 131, in resolve self._resolve_one(requirement_set, req) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;resolve.py&quot;, line 294, in _resolve_one abstract_dist &#x3D; self._get_abstract_dist_for(req_to_install) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;resolve.py&quot;, line 242, in _get_abstract_dist_for self.require_hashes File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;operations&#x2F;prepare.py&quot;, line 347, in prepare_linked_requirement progress_bar&#x3D;self.progress_bar File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 886, in unpack_url progress_bar&#x3D;progress_bar File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 746, in unpack_http_url progress_bar) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 954, in _download_http_url _download_url(resp, link, content_file, hashes, progress_bar) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 683, in _download_url hashes.check_against_chunks(downloaded_chunks) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;utils&#x2F;hashes.py&quot;, line 62, in check_against_chunks for chunk in chunks: File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 651, in written_chunks for chunk in chunks: File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;utils&#x2F;ui.py&quot;, line 156, in iter for x in it: File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 640, in resp_read decode_content&#x3D;False): File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 494, in stream data &#x3D; self.read(amt&#x3D;amt, decode_content&#x3D;decode_content) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 459, in read raise IncompleteRead(self._fp_bytes_read, self.length_remaining) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;contextlib.py&quot;, line 130, in __exit__ self.gen.throw(type, value, traceback) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 365, in _error_catcher raise ReadTimeoutError(self._pool, None, &#39;Read timed out.&#39;)pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host&#x3D;&#39;files.pythonhosted.org&#39;, port&#x3D;443): Read timed out. ✘ l@192  ~  sudo pip3 install lxmlPassword:WARNING: The directory &#39;&#x2F;Users&#x2F;l&#x2F;Library&#x2F;Caches&#x2F;pip&#x2F;http&#39; or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#39;s -H flag.WARNING: The directory &#39;&#x2F;Users&#x2F;l&#x2F;Library&#x2F;Caches&#x2F;pip&#39; or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#39;s -H flag.Collecting lxml ERROR: Could not find a version that satisfies the requirement lxml (from versions: none)ERROR: No matching distribution found for lxml ✘ l@192  ~  pip3 install Scrapy1234567Collecting Scrapy WARNING: Retrying (Retry(total&#x3D;4, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;files.pythonhosted.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;15)&quot;)&#39;: &#x2F;packages&#x2F;29&#x2F;4b&#x2F;585e8e111ffb01466c59281f34febb13ad1a95d7fb3919fd57c33fc732a5&#x2F;Scrapy-1.7.3-py2.py3-none-any.whl Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;29&#x2F;4b&#x2F;585e8e111ffb01466c59281f34febb13ad1a95d7fb3919fd57c33fc732a5&#x2F;Scrapy-1.7.3-py2.py3-none-any.whl (234kB) |████████████████████████████████| 235kB 83kB&#x2F;sCollecting pyOpenSSL (from Scrapy) ERROR: Could not find a version that satisfies the requirement pyOpenSSL (from Scrapy) (from versions: none)ERROR: No matching distribution found for pyOpenSSL (from Scrapy) ✘ l@192  ~  pip3 install Scrapy12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970Collecting Scrapy Using cached https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;29&#x2F;4b&#x2F;585e8e111ffb01466c59281f34febb13ad1a95d7fb3919fd57c33fc732a5&#x2F;Scrapy-1.7.3-py2.py3-none-any.whlCollecting parsel&gt;&#x3D;1.5 (from Scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;86&#x2F;c8&#x2F;fc5a2f9376066905dfcca334da2a25842aedfda142c0424722e7c497798b&#x2F;parsel-1.5.2-py2.py3-none-any.whlCollecting w3lib&gt;&#x3D;1.17.0 (from Scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;6a&#x2F;45&#x2F;1ba17c50a0bb16bd950c9c2b92ec60d40c8ebda9f3371ae4230c437120b6&#x2F;w3lib-1.21.0-py2.py3-none-any.whlCollecting pyOpenSSL (from Scrapy) WARNING: Retrying (Retry(total&#x3D;4, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;pypi.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;15)&quot;)&#39;: &#x2F;simple&#x2F;pyopenssl&#x2F; WARNING: Retrying (Retry(total&#x3D;3, connect&#x3D;None, read&#x3D;None, redirect&#x3D;None, status&#x3D;None)) after connection broken by &#39;ReadTimeoutError(&quot;HTTPSConnectionPool(host&#x3D;&#39;pypi.org&#39;, port&#x3D;443): Read timed out. (read timeout&#x3D;15)&quot;)&#39;: &#x2F;simple&#x2F;pyopenssl&#x2F; Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;01&#x2F;c8&#x2F;ceb170d81bd3941cbeb9940fc6cc2ef2ca4288d0ca8929ea4db5905d904d&#x2F;pyOpenSSL-19.0.0-py2.py3-none-any.whl (53kB) |████████████████████████▋ | 40kB 1.8kB&#x2F;s eta 0:00:08ERROR: Exception:Traceback (most recent call last): File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 360, in _error_catcher yield File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 442, in read data &#x3D; self._fp.read(amt) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;cachecontrol&#x2F;filewrapper.py&quot;, line 62, in read data &#x3D; self.__fp.read(amt) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;http&#x2F;client.py&quot;, line 457, in read n &#x3D; self.readinto(b) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;http&#x2F;client.py&quot;, line 501, in readinto n &#x3D; self.fp.readinto(b) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;socket.py&quot;, line 589, in readinto return self._sock.recv_into(b) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;ssl.py&quot;, line 1071, in recv_into return self.read(nbytes, buffer) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;ssl.py&quot;, line 929, in read return self._sslobj.read(len, buffer)socket.timeout: The read operation timed outDuring handling of the above exception, another exception occurred:Traceback (most recent call last): File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;cli&#x2F;base_command.py&quot;, line 178, in main status &#x3D; self.run(options, args) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;commands&#x2F;install.py&quot;, line 352, in run resolver.resolve(requirement_set) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;resolve.py&quot;, line 131, in resolve self._resolve_one(requirement_set, req) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;resolve.py&quot;, line 294, in _resolve_one abstract_dist &#x3D; self._get_abstract_dist_for(req_to_install) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;resolve.py&quot;, line 242, in _get_abstract_dist_for self.require_hashes File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;operations&#x2F;prepare.py&quot;, line 347, in prepare_linked_requirement progress_bar&#x3D;self.progress_bar File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 886, in unpack_url progress_bar&#x3D;progress_bar File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 746, in unpack_http_url progress_bar) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 954, in _download_http_url _download_url(resp, link, content_file, hashes, progress_bar) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 683, in _download_url hashes.check_against_chunks(downloaded_chunks) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;utils&#x2F;hashes.py&quot;, line 62, in check_against_chunks for chunk in chunks: File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 651, in written_chunks for chunk in chunks: File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;utils&#x2F;ui.py&quot;, line 156, in iter for x in it: File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_internal&#x2F;download.py&quot;, line 640, in resp_read decode_content&#x3D;False): File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 494, in stream data &#x3D; self.read(amt&#x3D;amt, decode_content&#x3D;decode_content) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 459, in read raise IncompleteRead(self._fp_bytes_read, self.length_remaining) File &quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;python&#x2F;3.7.4&#x2F;Frameworks&#x2F;Python.framework&#x2F;Versions&#x2F;3.7&#x2F;lib&#x2F;python3.7&#x2F;contextlib.py&quot;, line 130, in __exit__ self.gen.throw(type, value, traceback) File &quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;pip&#x2F;_vendor&#x2F;urllib3&#x2F;response.py&quot;, line 365, in _error_catcher raise ReadTimeoutError(self._pool, None, &#39;Read timed out.&#39;)pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host&#x3D;&#39;files.pythonhosted.org&#39;, port&#x3D;443): Read timed out. ✘ l@192  ~  sudo pip3 install –upgrade pyopenssl1234567891011121314151617181920212223242526Password:WARNING: The directory &#39;&#x2F;Users&#x2F;l&#x2F;Library&#x2F;Caches&#x2F;pip&#x2F;http&#39; or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#39;s -H flag.WARNING: The directory &#39;&#x2F;Users&#x2F;l&#x2F;Library&#x2F;Caches&#x2F;pip&#39; or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#39;s -H flag.Collecting pyopenssl Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;01&#x2F;c8&#x2F;ceb170d81bd3941cbeb9940fc6cc2ef2ca4288d0ca8929ea4db5905d904d&#x2F;pyOpenSSL-19.0.0-py2.py3-none-any.whl (53kB) |████████████████████████████████| 61kB 27kB&#x2F;sCollecting cryptography&gt;&#x3D;2.3 (from pyopenssl) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;63&#x2F;4e&#x2F;57b7a6bd98906872fcd2531e74b532de2abe17d675a5cf171931fcb4a9e8&#x2F;cryptography-2.7-cp34-abi3-macosx_10_6_intel.whl (1.6MB) |████████████████████████████████| 1.6MB 3.7MB&#x2F;sCollecting six&gt;&#x3D;1.5.2 (from pyopenssl) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;73&#x2F;fb&#x2F;00a976f728d0d1fecfe898238ce23f502a721c0ac0ecfedb80e0d88c64e9&#x2F;six-1.12.0-py2.py3-none-any.whlCollecting asn1crypto&gt;&#x3D;0.21.0 (from cryptography&gt;&#x3D;2.3-&gt;pyopenssl) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;ea&#x2F;cd&#x2F;35485615f45f30a510576f1a56d1e0a7ad7bd8ab5ed7cdc600ef7cd06222&#x2F;asn1crypto-0.24.0-py2.py3-none-any.whl (101kB) |████████████████████████████████| 102kB 7.0MB&#x2F;sCollecting cffi!&#x3D;1.11.3,&gt;&#x3D;1.8 (from cryptography&gt;&#x3D;2.3-&gt;pyopenssl) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;f0&#x2F;48&#x2F;5aa4ea664eba26dd5142558d04762f5065c02220b4665b3f7eecb9bb614e&#x2F;cffi-1.12.3-cp37-cp37m-macosx_10_9_x86_64.whl (169kB) |████████████████████████████████| 174kB 6.6MB&#x2F;sCollecting pycparser (from cffi!&#x3D;1.11.3,&gt;&#x3D;1.8-&gt;cryptography&gt;&#x3D;2.3-&gt;pyopenssl) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;68&#x2F;9e&#x2F;49196946aee219aead1290e00d1e7fdeab8567783e83e1b9ab5585e6206a&#x2F;pycparser-2.19.tar.gz (158kB) |████████████████████████████████| 163kB 14.7MB&#x2F;sBuilding wheels for collected packages: pycparser Building wheel for pycparser (setup.py) ... done Stored in directory: &#x2F;Users&#x2F;l&#x2F;Library&#x2F;Caches&#x2F;pip&#x2F;wheels&#x2F;f2&#x2F;9a&#x2F;90&#x2F;de94f8556265ddc9d9c8b271b0f63e57b26fb1d67a45564511Successfully built pycparserInstalling collected packages: six, asn1crypto, pycparser, cffi, cryptography, pyopensslSuccessfully installed asn1crypto-0.24.0 cffi-1.12.3 cryptography-2.7 pycparser-2.19 pyopenssl-19.0.0 six-1.12.0 l@192  ~  sudo pip3 install scrapy123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263WARNING: The directory &#39;&#x2F;Users&#x2F;l&#x2F;Library&#x2F;Caches&#x2F;pip&#x2F;http&#39; or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#39;s -H flag.WARNING: The directory &#39;&#x2F;Users&#x2F;l&#x2F;Library&#x2F;Caches&#x2F;pip&#39; or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo&#39;s -H flag.Collecting scrapy Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;29&#x2F;4b&#x2F;585e8e111ffb01466c59281f34febb13ad1a95d7fb3919fd57c33fc732a5&#x2F;Scrapy-1.7.3-py2.py3-none-any.whl (234kB) |████████████████████████████████| 235kB 4.4kB&#x2F;sCollecting w3lib&gt;&#x3D;1.17.0 (from scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;6a&#x2F;45&#x2F;1ba17c50a0bb16bd950c9c2b92ec60d40c8ebda9f3371ae4230c437120b6&#x2F;w3lib-1.21.0-py2.py3-none-any.whlCollecting lxml; python_version !&#x3D; &quot;3.4&quot; (from scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;bd&#x2F;9f&#x2F;6cda4672d3ad1aa4cf818ab8401a763787efba751c88aaf4b38fc8f923bb&#x2F;lxml-4.4.1-cp37-cp37m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl (8.9MB) |████████████████████████████████| 8.9MB 97kB&#x2F;sCollecting Twisted&gt;&#x3D;13.1.0; python_version !&#x3D; &quot;3.4&quot; (from scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;61&#x2F;31&#x2F;3855dcacd1d3b2e60c0b4ccc8e727b8cd497bd7087d327d81a9f0cbb580c&#x2F;Twisted-19.7.0.tar.bz2 (3.1MB) |████████████████████████████████| 3.1MB 207kB&#x2F;sCollecting parsel&gt;&#x3D;1.5 (from scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;86&#x2F;c8&#x2F;fc5a2f9376066905dfcca334da2a25842aedfda142c0424722e7c497798b&#x2F;parsel-1.5.2-py2.py3-none-any.whlRequirement already satisfied: pyOpenSSL in &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from scrapy) (19.0.0)Requirement already satisfied: six&gt;&#x3D;1.5.2 in &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from scrapy) (1.12.0)Collecting queuelib (from scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;4c&#x2F;85&#x2F;ae64e9145f39dd6d14f8af3fa809a270ef3729f3b90b3c0cf5aa242ab0d4&#x2F;queuelib-1.5.0-py2.py3-none-any.whlCollecting cssselect&gt;&#x3D;0.9 (from scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;3b&#x2F;d4&#x2F;3b5c17f00cce85b9a1e6f91096e1cc8e8ede2e1be8e96b87ce1ed09e92c5&#x2F;cssselect-1.1.0-py2.py3-none-any.whlCollecting service-identity (from scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;e9&#x2F;7c&#x2F;2195b890023e098f9618d43ebc337d83c8b38d414326685339eb024db2f6&#x2F;service_identity-18.1.0-py2.py3-none-any.whlCollecting PyDispatcher&gt;&#x3D;2.0.5 (from scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;cd&#x2F;37&#x2F;39aca520918ce1935bea9c356bcbb7ed7e52ad4e31bff9b943dfc8e7115b&#x2F;PyDispatcher-2.0.5.tar.gzCollecting zope.interface&gt;&#x3D;4.4.2 (from Twisted&gt;&#x3D;13.1.0; python_version !&#x3D; &quot;3.4&quot;-&gt;scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;d9&#x2F;3a&#x2F;101934e0f2026f0a58698978bfedec6e2021b28b846d9e1d9b54369e044d&#x2F;zope.interface-4.6.0-cp37-cp37m-macosx_10_14_x86_64.whl (131kB) |████████████████████████████████| 133kB 124kB&#x2F;sCollecting constantly&gt;&#x3D;15.1 (from Twisted&gt;&#x3D;13.1.0; python_version !&#x3D; &quot;3.4&quot;-&gt;scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;b9&#x2F;65&#x2F;48c1909d0c0aeae6c10213340ce682db01b48ea900a7d9fce7a7910ff318&#x2F;constantly-15.1.0-py2.py3-none-any.whlCollecting incremental&gt;&#x3D;16.10.1 (from Twisted&gt;&#x3D;13.1.0; python_version !&#x3D; &quot;3.4&quot;-&gt;scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;f5&#x2F;1d&#x2F;c98a587dc06e107115cf4a58b49de20b19222c83d75335a192052af4c4b7&#x2F;incremental-17.5.0-py2.py3-none-any.whlCollecting Automat&gt;&#x3D;0.3.0 (from Twisted&gt;&#x3D;13.1.0; python_version !&#x3D; &quot;3.4&quot;-&gt;scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;a3&#x2F;86&#x2F;14c16bb98a5a3542ed8fed5d74fb064a902de3bdd98d6584b34553353c45&#x2F;Automat-0.7.0-py2.py3-none-any.whlCollecting hyperlink&gt;&#x3D;17.1.1 (from Twisted&gt;&#x3D;13.1.0; python_version !&#x3D; &quot;3.4&quot;-&gt;scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;7f&#x2F;91&#x2F;e916ca10a2de1cb7101a9b24da546fb90ee14629e23160086cf3361c4fb8&#x2F;hyperlink-19.0.0-py2.py3-none-any.whlCollecting PyHamcrest&gt;&#x3D;1.9.0 (from Twisted&gt;&#x3D;13.1.0; python_version !&#x3D; &quot;3.4&quot;-&gt;scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;9a&#x2F;d5&#x2F;d37fd731b7d0e91afcc84577edeccf4638b4f9b82f5ffe2f8b62e2ddc609&#x2F;PyHamcrest-1.9.0-py2.py3-none-any.whl (52kB) |████████████████████████████████| 61kB 123kB&#x2F;sCollecting attrs&gt;&#x3D;17.4.0 (from Twisted&gt;&#x3D;13.1.0; python_version !&#x3D; &quot;3.4&quot;-&gt;scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;23&#x2F;96&#x2F;d828354fa2dbdf216eaa7b7de0db692f12c234f7ef888cc14980ef40d1d2&#x2F;attrs-19.1.0-py2.py3-none-any.whlRequirement already satisfied: cryptography&gt;&#x3D;2.3 in &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from pyOpenSSL-&gt;scrapy) (2.7)Collecting pyasn1 (from service-identity-&gt;scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;6a&#x2F;6e&#x2F;209351ec34b7d7807342e2bb6ff8a96eef1fd5dcac13bdbadf065c2bb55c&#x2F;pyasn1-0.4.6-py2.py3-none-any.whl (75kB) |████████████████████████████████| 81kB 94kB&#x2F;sCollecting pyasn1-modules (from service-identity-&gt;scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;be&#x2F;70&#x2F;e5ea8afd6d08a4b99ebfc77bd1845248d56cfcf43d11f9dc324b9580a35c&#x2F;pyasn1_modules-0.2.6-py2.py3-none-any.whl (95kB) |████████████████████████████████| 102kB 146kB&#x2F;sRequirement already satisfied: setuptools in &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from zope.interface&gt;&#x3D;4.4.2-&gt;Twisted&gt;&#x3D;13.1.0; python_version !&#x3D; &quot;3.4&quot;-&gt;scrapy) (41.0.1)Collecting idna&gt;&#x3D;2.5 (from hyperlink&gt;&#x3D;17.1.1-&gt;Twisted&gt;&#x3D;13.1.0; python_version !&#x3D; &quot;3.4&quot;-&gt;scrapy) Downloading https:&#x2F;&#x2F;files.pythonhosted.org&#x2F;packages&#x2F;14&#x2F;2c&#x2F;cd551d81dbe15200be1cf41cd03869a46fe7226e7450af7a6545bfc474c9&#x2F;idna-2.8-py2.py3-none-any.whl (58kB) |████████████████████████████████| 61kB 181kB&#x2F;sRequirement already satisfied: cffi!&#x3D;1.11.3,&gt;&#x3D;1.8 in &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from cryptography&gt;&#x3D;2.3-&gt;pyOpenSSL-&gt;scrapy) (1.12.3)Requirement already satisfied: asn1crypto&gt;&#x3D;0.21.0 in &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from cryptography&gt;&#x3D;2.3-&gt;pyOpenSSL-&gt;scrapy) (0.24.0)Requirement already satisfied: pycparser in &#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages (from cffi!&#x3D;1.11.3,&gt;&#x3D;1.8-&gt;cryptography&gt;&#x3D;2.3-&gt;pyOpenSSL-&gt;scrapy) (2.19)Building wheels for collected packages: Twisted, PyDispatcher Building wheel for Twisted (setup.py) ... done Stored in directory: &#x2F;Users&#x2F;l&#x2F;Library&#x2F;Caches&#x2F;pip&#x2F;wheels&#x2F;f4&#x2F;2b&#x2F;d5&#x2F;bf550d6bead12fec7a1383be4e994758848c4aeeb9fc627ecf Building wheel for PyDispatcher (setup.py) ... done Stored in directory: &#x2F;Users&#x2F;l&#x2F;Library&#x2F;Caches&#x2F;pip&#x2F;wheels&#x2F;88&#x2F;99&#x2F;96&#x2F;cfef6665f9cb1522ee6757ae5955feedf2fe25f1737f91fa7fSuccessfully built Twisted PyDispatcherInstalling collected packages: w3lib, lxml, zope.interface, constantly, incremental, attrs, Automat, idna, hyperlink, PyHamcrest, Twisted, cssselect, parsel, queuelib, pyasn1, pyasn1-modules, service-identity, PyDispatcher, scrapySuccessfully installed Automat-0.7.0 PyDispatcher-2.0.5 PyHamcrest-1.9.0 Twisted-19.7.0 attrs-19.1.0 constantly-15.1.0 cssselect-1.1.0 hyperlink-19.0.0 idna-2.8 incremental-17.5.0 lxml-4.4.1 parsel-1.5.2 pyasn1-0.4.6 pyasn1-modules-0.2.6 queuelib-1.5.0 scrapy-1.7.3 service-identity-18.1.0 w3lib-1.21.0 zope.interface-4.6.0 l@192  ~  cd /Users/l/Documents/Py/Pydemol@192  ~/Documents/Py/Pydemo  scrapy startproject firstscrapy123456New Scrapy project &#39;firstscrapy&#39;, using template directory &#39;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;scrapy&#x2F;templates&#x2F;project&#39;, created in: &#x2F;Users&#x2F;l&#x2F;Documents&#x2F;Py&#x2F;Pydemo&#x2F;firstscrapyYou can start your first spider with: cd firstscrapy scrapy genspider example example.com l@192  ~/Documents/Py/Pydemov cd firstscrapyl@192  ~/Documents/Py/Pydemo/firstscrapy","categories":[{"name":"Python","slug":"Python","permalink":"https://ifeiyv666.github.io/categories/Python/"}],"tags":[{"name":"python3","slug":"python3","permalink":"https://ifeiyv666.github.io/tags/python3/"},{"name":"scrapy","slug":"scrapy","permalink":"https://ifeiyv666.github.io/tags/scrapy/"},{"name":"python","slug":"python","permalink":"https://ifeiyv666.github.io/tags/python/"}]},{"title":"Flutter开发之Text Widget","slug":"Flutter开发之Text Widget","date":"2019-08-21T13:43:55.000Z","updated":"2020-04-03T06:44:01.041Z","comments":true,"path":"2019/08/21/Flutter开发之Text Widget/","link":"","permalink":"https://ifeiyv666.github.io/2019/08/21/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BText%20Widget/","excerpt":"","text":"Text Widget “文本”小组件显示单个样式的文本字符串。字符串可能会跨越多行，也可能全部显示在同一行上，具体取决于布局约束。 1234567891011Text( //显示的文本 'Hello, $_name! How are you?', //对齐的方式 textAlign: TextAlign.center, overflow: TextOverflow.ellipsis, //文本样式 style: TextStyle(fontWeight: FontWeight.bold),) 下面使用Text.rich构造函数，Text小部件可以显示具有不同样式TextSpans的段落。下面的示例显示每个单词具有不同样式的“Hello beautiful world”。 123456789const Text.rich( TextSpan( text: 'Hello', // default text style children: &lt;TextSpan&gt;[ TextSpan(text: ' beautiful ', style: TextStyle(fontStyle: FontStyle.italic)), TextSpan(text: 'world', style: TextStyle(fontWeight: FontWeight.bold)), ], ),) 交互要使Text对触摸事件做出反应，请使用GestureDetector.onTap处理程序将其包装在GestureDetector小部件中。 在材料设计应用程序中，请考虑使用FlatButton，或者如果不合适，至少使用InkWell而不是GestureDetector。 要使文本的各个部分具有交互性，请使用RichText并将TapGestureRecognizer指定为文本相关部分的TextSpan.recognizer。 RichText，它可以让您更好地控制文本样式。DefaultTextStyle，用于设置Text小部件的默认样式。 构造方法1234567891011121314 Text(String data, &#123; Key key, TextStyle style, StrutStyle strutStyle, TextAlign textAlign, TextDirection textDirection, Locale locale, bool softWrap, TextOverflow overflow, double textScaleFactor, int maxLines, String semanticsLabel &#125;) 1234567891011121314Text.rich(TextSpan textSpan, &#123; Key key, TextStyle style, StrutStyle strutStyle, TextAlign textAlign, TextDirection textDirection, Locale locale, bool softWrap, TextOverflow overflow, double textScaleFactor, int maxLines, String semanticsLabel &#125;) 属性 data → String 要显示的文字 locale → Locale 用于在可以以不同方式呈现相同Unicode字符时选择字体，具体取决于区域设置 很少需要设置此属性。默认情况下，其值继承自包含Localizations.localeOf（context）的应用程序 有关更多信息，请参见RenderParagraph.locale。 maxLines→int 文本要跨越的可选最大行数，必要时包装。如果文本超过给定的行数，则会根据溢出将其截断 overflow→TextOverflow 如何处理视觉溢出 TextOverflow枚举 clip→const TextOverflow剪切溢出的文本以修复其容器。const TextOverflow（0） ellipsis→const TextOverflow将溢出的文本淡化为透明。const TextOverflow（1） ellipsis→const TextOverflow使用省略号表示文本已溢出。const TextOverflow（2） visible→const TextOverflow在其容器外部渲染溢出的文本。const TextOverflow（3） values→const List 此枚举中值的常量列表，按其声明顺序排列。const List semanticsLabel→String 此文本的替代语义标签 如果存在, 这个小部件的语义将包含此值, 而不是实际的文本。这将覆盖任何直接应用于 TextSpans 的语义标签 这对于用全文值替换缩写或短文很有用: Text(r&#39;$$&#39;, semanticsLabel: &#39;Double dollars&#39;) softWrap→bool 文本是否应该在软换行符处中断 如果是false, 文本中的字形将被定位为无限的水平空间 strutStyle→StrutStyle 要使用的strut风格。 Strut样式定义了strut，它设置了最小垂直布局度量 允许省略或提供 null 将禁用strut. 为 StrutStyle 的任何属性提供 null 将导致使用默认值 强烈建议至少指定一个字体. 有关详细信息, 请参见 StrutStyle。 eg: 123456789101112 const Text( 'Hello, world!\\nSecond line!', style: TextStyle( fontSize: 10, fontFamily: 'Raleway', ), strutStyle: StrutStyle( fontFamily: 'Roboto', fontSize: 30, height: 1.5, ),), style→TextStyle 如果为非null，则为此文本使用的样式 如果样式的 “继承” 属性为 true, 则该样式将与最接近的封闭默认文本样式合并 否则, 该样式将替换最接近的封闭的默认文本样式 textAlign→TextAlign 文本应如何水平对齐 TextAlign 枚举 left → const TextAlign 文本左对齐 const TextAlign(0) right → const TextAlign 文本右对齐 const TextAlign(1) center→ const TextAlign 文本中心对齐 const TextAlign(2) justify → const TextAlign 拉伸以柔和的换行符结束的文本行, 以填充容器的宽度. 以硬线符结束的线条与起始边缘对齐。const TextAlign(3) start → const TextAlign 文本开始处对齐 从左到右即为左边，从右到左即为右边 const TextAlign(4) end → const TextAlign 文本结束处对齐 从左到右即为右边，从右到左即为左边 const TextAlign(5) values → const List 此枚举中值的常量列表，按其声明顺序排列。 textDirection→TextDirection 文本的方向性 这也就解释为什么出现TextAlign.start和TextAlign.end等textAlign值 eg: 例如，如果数据是英语短语后跟希伯来语短语，则在TextDirection.ltr上下文中，英语短语将位于左侧，希伯来语短语位于其右侧，而在TextDirection.rtl上下文中，英语短语将 在右边，左边是希伯来语。 textScaleFactor→double 每个逻辑像素的字体像素数 例如，如果文本比例因子为1.5，则文本将比指定的字体大小大50％ 作为textScaleFactor赋予构造函数的值。 如果为null，将使用从环境MediaQuery获取的MediaQueryData.textScaleFactor，如果范围内没有MediaQuery，则使用1.0。 textSpan→TextSpan 要显示为TextSpan的文本 hashCode→int 此对象的哈希码 key→Key 控制一个小部件如何替换树中的另一个小部件 runtimeType→Type 表示对象的运行时类型 方法 build（BuildContext context）→Widget 描述此窗口小部件表示的用户界面部分 debugFillProperties（DiagnosticPropertiesBuilder properties）→void 添加与节点关联的其他属性 createElement（）→StatelessElement 创建StatelessElement以管理此窗口小部件在树中的位置。 […] debugDescribeChildren（）→ List 返回描述此节点的子节点的DiagnosticsNode对象列表。 […] noSuchMethod（Invocation invocation）→dynamic 访问不存在的方法或属性时调用。 […] toDiagnosticsNode（{String name，DiagnosticsTreeStyle style}）→DiagnosticsNode 返回调试工具和DiagnosticsNode.toStringDeep使用的对象的调试表示形式。 […] toString（{DiagnosticLevel minLevel：DiagnosticLevel.debug}）→字符串 返回此对象的字符串表示形式 toStringDeep（{String prefixLineOne：’’，String prefixOtherLines，DiagnosticLevel minLevel：DiagnosticLevel.debug}）→String 返回此节点及其后代的字符串表示形式。 […] toStringShallow（{String joiner：’，’，DiagnosticLevel minLevel：DiagnosticLevel.debug}）→String 返回对象的单行详细描述。 […] toStringShort（）→String 这个小部件的简短文字描述 Operators运算符 operator ==(dynamic other) → bool 等值运算符。 […]","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter Text","slug":"Flutter-Text","permalink":"https://ifeiyv666.github.io/tags/Flutter-Text/"}]},{"title":"Flutter开发之Scaffold Widget","slug":"Flutter开发之Scaffold Widget","date":"2019-08-20T01:51:53.000Z","updated":"2020-04-03T06:43:29.829Z","comments":true,"path":"2019/08/20/Flutter开发之Scaffold Widget/","link":"","permalink":"https://ifeiyv666.github.io/2019/08/20/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BScaffold%20Widget/","excerpt":"","text":"Scaffold 实现基本材料设计视觉布局结构 构造函数(Constructors)123456789101112131415161718Scaffold(&#123; Key key, PreferredSizeWidget appBar, Widget body, Widget floatingActionButton, FloatingActionButtonLocation floatingActionButtonLocation, FloatingActionButtonAnimator floatingActionButtonAnimator, List&lt;Widget&gt; persistentFooterButtons, Widget drawer, Widget endDrawer, Widget bottomNavigationBar, Widget bottomSheet, Color backgroundColor, bool resizeToAvoidBottomPadding, bool resizeToAvoidBottomInset, bool primary: true, DragStartBehavior drawerDragStartBehavior: DragStartBehavior.start, bool extendBody: false &#125;) 属性（Properties） appBar → PreferredSizeWidget 顶部导航栏 backgroundColor → Color 背景色 body → Widget Scaffold的主要内容 bottomNavigationBar → Widget 底部导航栏 bottomSheet → Widget The persistent bottom sheet to display. […] drawer → Widget 显示在容器侧面的面板，通常隐藏在移动设备上。从左到右（TextDirection.ltr）或从右到左（TextDirection.rtl）滑入 drawerDragStartBehavior → DragStartBehavior 确定处理拖动开始行为的方式 endDrawer → Widget 显示在身体侧面的面板，通常隐藏在移动设备上。从右到左（TextDirection.ltr）或从左到右（TextDirection.rtl）滑动 extendBody → bool 如果为true，并且指定了bottomNavigationBar或persistentFooterButtons，则body将延伸到Scaffold的底部，而不是仅延伸到bottomNavigationBar或persistentFooterButtons的顶部 floatingActionButton → Widget 显示在容器上方的按钮，位于右下角 floatingActionButtonAnimator → FloatingActionButtonAnimator Animator将floatingActionButton移动到新的floatingActionButtonLocation floatingActionButtonLocation → FloatingActionButtonLocation 负责确定floatingActionButton的去向 persistentFooterButtons → List 一组显示在脚手架底部的按钮 primary → bool 此脚手架是否显示在屏幕顶部 resizeToAvoidBottomInset → bool 如果为true，则body和scaffold的浮动小部件应自行调整大小，以避免屏幕键盘的高度由环境MediaQuery的MediaQueryData.viewInsets底部属性定义 resizeToAvoidBottomPadding → bool 不推荐使用此标志，请改用resizeToAvoidBottomInset,@Deprecated（’使用resizeToAvoidBottomInset指定键盘出现时是否应调整主体大小’）","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter Scaffold","slug":"Flutter-Scaffold","permalink":"https://ifeiyv666.github.io/tags/Flutter-Scaffold/"}]},{"title":"Flutter开发之Row Widget","slug":"Flutter开发之Row Widget","date":"2019-08-18T09:43:24.000Z","updated":"2020-04-03T06:43:21.873Z","comments":true,"path":"2019/08/18/Flutter开发之Row Widget/","link":"","permalink":"https://ifeiyv666.github.io/2019/08/18/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BRow%20Widget/","excerpt":"","text":"Row 一个在水平数组中显示它的子级的小部件 要使子级扩展以填充可用的水平空间, 请将子级包裹在一个展开的小部件中。 想使用竖直布局的，请前往-&gt; Column 如果你只有一个子级, 那就考虑用 “对齐” 或 “中心” 来定位子级。 本示例将可用空间划分为三个 (水平), 并将文本置于前两个单元格中的中心, 并将 Flutter 图标置于第三个单元格的中心: 12345678910111213141516Row( children: &lt;Widget&gt;[ Expanded( child: Text('Deliver features faster', textAlign: TextAlign.center), ), Expanded( child: Text('Craft beautiful UIs', textAlign: TextAlign.center), ), Expanded( child: FittedBox( fit: BoxFit.contain, // otherwise the logo will be tiny child: const FlutterLogo(), ), ), ],) 效果图：","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter Row","slug":"Flutter-Row","permalink":"https://ifeiyv666.github.io/tags/Flutter-Row/"}]},{"title":"Flutter开发之RaisedButton Widget","slug":"Flutter开发之RaisedButton Widget","date":"2019-08-17T14:15:14.000Z","updated":"2020-04-03T06:43:10.372Z","comments":true,"path":"2019/08/17/Flutter开发之RaisedButton Widget/","link":"","permalink":"https://ifeiyv666.github.io/2019/08/17/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BRaisedButton%20Widget/","excerpt":"","text":"RaisedButton 一个凸起的按钮 如果onPressed（即为按钮点击事件）回调为null，则该按钮将被禁用，默认情况下将类似于disabledColor中的平面按钮。如果您尝试更改按钮的颜色并且没有任何效果，请检查您是否正在传递非null onPressed处理程序。 如果您想为点击提供墨水飞溅效果,但不想使用按钮,请考虑直接使用inkwell。 凸起按钮的最小尺寸为88.0×36.0，可以用ButtonTheme覆盖。 此示例演示如何呈现禁用的RaisedButton，启用的RaisedButton以及最后一个具有渐变背景的RaisedButton: 源码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546Widget build(BuildContext context) &#123; return Center( child: Column( mainAxisSize: MainAxisSize.min, children: &lt;Widget&gt;[ const RaisedButton( onPressed: null, child: Text( 'Disabled Button', style: TextStyle(fontSize: 20) ), ), const SizedBox(height: 30), RaisedButton( onPressed: () &#123;&#125;, child: const Text( 'Enabled Button', style: TextStyle(fontSize: 20) ), ), const SizedBox(height: 30), RaisedButton( onPressed: () &#123;&#125;, textColor: Colors.white, padding: const EdgeInsets.all(0.0), child: Container( decoration: const BoxDecoration( gradient: LinearGradient( colors: &lt;Color&gt;[ Color(0xFF0D47A1), Color(0xFF1976D2), Color(0xFF42A5F5), ], ), ), padding: const EdgeInsets.all(10.0), child: const Text( 'Gradient Button', style: TextStyle(fontSize: 20) ), ), ), ], ), );&#125; 构造函数（Constructors） 创建一个填充按钮 1234567891011121314151617181920RaisedButton(&#123; Key key, @required VoidCallback onPressed, ValueChanged&lt;bool&gt; onHighlightChanged, ButtonTextTheme textTheme, Color textColor, Color disabledTextColor, Color color, Color disabledColor, Color highlightColor, Color splashColor, Brightness colorBrightness, double elevation, double highlightElevation, double disabledElevation, EdgeInsetsGeometry padding, ShapeBorder shape, Clip clipBehavior: Clip.none, MaterialTapTargetSize materialTapTargetSize, Duration animationDuration, Widget child &#125;) 从一对小部件创建一个填充按钮，用作按钮的图标和标签 12345678910111213141516171819202122RaisedButton.icon(&#123; Key key, @required VoidCallback onPressed, ValueChanged&lt;bool&gt; onHighlightChanged, ButtonTextTheme textTheme, Color textColor, Color disabledTextColor, Color color, Color disabledColor, Color highlightColor, Color splashColor, Brightness colorBrightness, double elevation, double highlightElevation, double disabledElevation, ShapeBorder shape, Clip clipBehavior, MaterialTapTargetSize materialTapTargetSize, Duration animationDuration, @required Widget icon, @required Widget label &#125;) 属性（Properties） animationDuration → Duration 动画的持续时间 child → Widget 按钮的标签部件 clipBehavior → Clip 根据此选项，内容将被剪裁（或不剪辑） color → Color 按钮的填充颜色，由其材料显示，同时处于默认（未按下，已启用）状态 colorBrightness → Brightness 用于设置按钮的主题亮度 disabledColor → Color 禁用按钮时按钮的填充颜色 disabledElevation → double 按钮相对于其父级的高度 disabledTextColor → Color 禁用按钮时用于此按钮文本的颜色 elevation → double 放置此按钮相对于其父按钮的Z坐标 enabled → bool 设置启用还是禁用按钮 hashCode → int 此对象的哈希码(只读) height → double 按钮的垂直范围(即高度) highlightColor → Color 按钮的InkWell的高亮颜色 highlightElevation → double 启用并按下按钮时按钮相对于其父级的高度 key → Key 控制一个小部件如何替换树中的另一个小部件 materialTapTargetSize → MaterialTapTargetSize 配置点击目标的最小尺寸 minWidth → double 按钮占据的最小水平范围(最小宽度) onHighlightChanged → ValueChanged&lt;bool&gt; 由底层InkWell小部件的InkWell.onHighlightChanged回调调用 onPressed → VoidCallback 点击或以其他方式激活按钮时调用的回调 padding → EdgeInsetsGeometry buttons子级的内部填充 runtimeType → Type 表示对象的运行时类型(只读) shape → ShapeBorder 按钮的阴影效果设置 splashColor → Color 按钮墨水的泼溅颜色 textColor → Color 按钮的文本颜色 textTheme → ButtonTextTheme 定义按钮的基色，以及按钮的最小尺寸，内部填充和形状的默认值","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter RaisedButton","slug":"Flutter-RaisedButton","permalink":"https://ifeiyv666.github.io/tags/Flutter-RaisedButton/"}]},{"title":"Flutter开发之Image Widget","slug":"Flutter开发之Image Widget","date":"2019-08-16T03:16:41.000Z","updated":"2020-04-03T06:42:48.364Z","comments":true,"path":"2019/08/16/Flutter开发之Image Widget/","link":"","permalink":"https://ifeiyv666.github.io/2019/08/16/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BImage%20Widget/","excerpt":"","text":"Image Widget 显示图像的小部件,支持以下图像格式: JPEG、PNG、GIF、动画 GIF、WebP、动画 WebP、BMP 和 WBMP 为图像可以指定的各种方式提供了几个构造函数: new Image, 通过 ImageProvider获取图像 new Image.asset, 使用key值从资源包获取图像 new Image.network, 通过URL网络请求获取图像 new Image.file, 从文件中获取图像. new Image.memory, 从 Uint8List中 获取图像. 构造方法（Constructors） Image 创建一个显示图像的小部件 123456789101112131415Image(&#123; Key key, @required ImageProvider image, String semanticLabel, bool excludeFromSemantics: false, double width, double height, Color color, BlendMode colorBlendMode, BoxFit fit, AlignmentGeometry alignment: Alignment.center, ImageRepeat repeat: ImageRepeat.noRepeat, Rect centerSlice, bool matchTextDirection: false, bool gaplessPlayback: false, FilterQuality filterQuality: FilterQuality.low &#125;) 创建一个小部件,显示从资源包里获得的 ImageStream,图像的键是由名称参数给出的 12345678910111213141516171819Image.asset(String name, &#123; Key key, AssetBundle bundle, String semanticLabel, bool excludeFromSemantics: false, double scale, double width, double height, Color color, BlendMode colorBlendMode, BoxFit fit, AlignmentGeometry alignment: Alignment.center, ImageRepeat repeat: ImageRepeat.noRepeat, Rect centerSlice, bool matchTextDirection: false, bool gaplessPlayback: false, String package, FilterQuality filterQuality: FilterQuality.low &#125;) 创建一个小部件, 显示从文件中获得的 ImageStream 12345678910111213141516Image.file(File file, &#123; Key key, double scale: 1.0, String semanticLabel, bool excludeFromSemantics: false, double width, double height, Color color, BlendMode colorBlendMode, BoxFit fit, AlignmentGeometry alignment: Alignment.center, ImageRepeat repeat: ImageRepeat.noRepeat, Rect centerSlice, bool matchTextDirection: false, bool gaplessPlayback: false, FilterQuality filterQuality: FilterQuality.low &#125;) 创建一个小部件,显示从Uint8List中获得的ImageStream 12345678910111213141516Image.memory(Uint8List bytes, &#123; Key key, double scale: 1.0, String semanticLabel, bool excludeFromSemantics: false, double width, double height, Color color, BlendMode colorBlendMode, BoxFit fit, AlignmentGeometry alignment: Alignment.center, ImageRepeat repeat: ImageRepeat.noRepeat, Rect centerSlice, bool matchTextDirection: false, bool gaplessPlayback: false, FilterQuality filterQuality: FilterQuality.low&#125;) 创建一个小部件, 显示从网络获得的ImageStream 1234567891011121314151617Image.network(String src, &#123; Key key, double scale: 1.0, String semanticLabel, bool excludeFromSemantics: false, double width, double height, Color color, BlendMode colorBlendMode, BoxFit fit, AlignmentGeometry alignment: Alignment.center, ImageRepeat repeat: ImageRepeat.noRepeat, Rect centerSlice, bool matchTextDirection: false, bool gaplessPlayback: false, FilterQuality filterQuality: FilterQuality.low, Map&lt;String, String&gt; headers &#125;) 属性（Properties） alignment → AlignmentGeometry 设置图像的对齐方式 centerSlice → Rect 九片图像的中心切片 中心切片内的图像区域将水平和垂直拉伸，以使图像适合其目标 中心切片上方和下方的图像区域将仅水平拉伸，中心切片左侧和右侧的图像区域将仅垂直拉伸 color → Color 如果非 null, 则使用颜色混合模式将此颜色与每个图像像素混合 colorBlendMode → BlendMode 用于将颜色与此图像相结合 excludeFromSemantics → bool 是否从语义中排除此图像 filterQuality → FilterQuality 用于设置图像的FilterQuality fit → BoxFit 图片填充的方式 contain 在目标框中尽可能大的显示完整图像 cover 在目标框中尽可能小的覆盖整个目标框 fill 通过拉伸纵横比来填充整个目标框 fitHeight 在目标框中高度填充满，不论宽度是否溢出 fitWidth 在目标框中宽度填充满，不论高度是否溢出 none 对齐目标框内的源（默认情况下，居中）并丢弃位于框外的源的任何部分。源图像未调整大小。 scaleDown 对齐目标框中的源 (默认情况下, 居中), 并在必要时缩小源的比例, 以确保源适合框中。 gaplessPlayback → bool 当图像更换时是继续显示旧图像 (true), 还是短暂不显示任何内容 (false) height → double 如果非空, 则要求图像具有此高度 image → ImageProvider 要显示的图像 matchTextDirection → bool 是否将图像绘制到文本方向的方向 repeat → ImageRepeat 如何绘制图像不包括的布局边界的任何部分 noRepeat 让盒子的未覆盖部分保持透明,不重复 repeat 在 x 和 y 方向上重复图像, 直到框被填满 repeatX 按 x 方向重复图像, 直到水平方向填充满 repeatY 按 Y 方向重复图像, 直到垂直方向填充满 semanticLabel → String 对图像的语义描述 width → double 如果非空, 则要求图像具有此宽度 hashCode → int 此对象的哈希代码 key → Key 控制一个小部件如何替换树中的另一个小部件 runtimeType → Type 对象的运行时类型 方法（Methods） 在树中的给定位置为这个小部件创建可变状态。 createState() → _ImageState 添加与节点管理相关联的其他属性 debugFillProperties(DiagnosticPropertiesBuilder properties) → void 创建StatelessElement以管理此窗口小部件在树中的位置 createElement() → StatelessElement 返回描述此节点的子节点的DiagnosticsNode对象列表。 debugDescribeChildren() → List 访问不存在的方法或属性时调用 noSuchMethod(Invocation invocation) → dynamic 返回调试工具和DiagnosticsNode.toStringDeep使用的对象的调试表示形式 toDiagnosticsNode({String name, DiagnosticsTreeStyle style }) → DiagnosticsNode 返回此对象的字符串表示形式 toString({DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String 返回此节点及其后代的字符串表示形式 toStringDeep({String prefixLineOne: ‘’, String prefixOtherLines, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String 返回对象的单行详细描述 toStringShallow({String joiner: ‘, ‘, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String 这个小部件的简短文字描述 toStringShort() → String","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter Image","slug":"Flutter-Image","permalink":"https://ifeiyv666.github.io/tags/Flutter-Image/"}]},{"title":"Flutter开发之Container Widget","slug":"Flutter开发之Container Widget","date":"2019-08-15T06:22:01.000Z","updated":"2020-04-03T06:42:17.081Z","comments":true,"path":"2019/08/15/Flutter开发之Container Widget/","link":"","permalink":"https://ifeiyv666.github.io/2019/08/15/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BContainer%20Widget/","excerpt":"","text":"Container Widget 一个方便的小部件, 结合了普通的绘画、定位和大小的小部件。 容器首先用填充物（由装饰中存在的任何边界膨胀）包围子对象，然后对填充范围应用附加约束（如果其中一个为非空，则将宽度和高度合并为约束）。然后容器被从边缘描述的额外的空白空间包围。 在绘画过程中，容器首先应用给定的变换，然后绘制装饰填充填充范围，然后绘制子对象，最后绘制前场装饰，也填充填充填充范围。 没有子对象的容器尽量大，除非传入的约束是无限的，在这种情况下，它们尽量小。有子对象的容器会根据子对象的大小来调整大小。构造函数的width、height和constraints参数重写了这一点。 布局行为介绍(Layout behavior) 有关框布局模型的介绍，请参阅BoxConstraints。 由于Container结合了许多其他小部件，每个小部件都有自己的布局行为，因此Container的布局行为有点复杂。 摘要：容器尝试按顺序：遵循对齐，将自身大小调整为子对象，以符合宽度，高度和约束，以扩展以适合父对象，尽可能小。 进一步来说： 如果窗口小部件没有子节点，没有高度，没有宽度，没有约束，并且父节点提供无限制约束，则Container尝试尽可能小。 如果窗口小部件没有子节点且没有对齐，但提供了高度，宽度或约束，则在给定这些约束和父节点约束的组合的情况下，Container会尽可能小。 如果窗口小部件没有子节点，没有高度，没有宽度，没有约束，没有对齐，但是父节点提供了有界约束，那么Container会扩展以适应父节点提供的约束。 如果窗口小部件具有对齐，并且父窗口提供无限制约束，则Container会尝试围绕子窗口调整自身大小。 如果窗口小部件具有对齐，并且父窗口提供有界约束，则Container会尝试展开以适合父窗口，然后根据对齐方式将子项置于其自身内部。 否则，窗口小部件具有子级但没有高度，没有宽度，没有约束，也没有对齐，并且Container将约束从父级传递给子级并调整其大小以匹配子级。 边距和填充属性也会影响布局，如这些属性的文档中所述。 （它们的效果仅仅增加了上述规则。）装饰可以隐含地增加填充（例如，BoxDecoration中的边界有助于填充）;请参阅Decoration.padding。 此示例显示一个48x48琥珀色方块（放置在中心小部件内，以防父小部件对容器应采用的大小有自己的意见），并留有一个空白，使其远离相邻小部件： 12345678Center( child: Container( margin: const EdgeInsets.all(10.0), color: Colors.amber[600], width: 48.0, height: 48.0, ),) 这个例子展示了如何同时使用容器的许多特性。这些约束被设置为适合字体大小加上足够的垂直净空，同时水平展开以适合父级。填充用于确保内容和文本之间有空间。这个颜色使盒子变成蓝色。对齐会使子项在框中居中。最后，变换对整个装置应用轻微的旋转以完成效果: 1234567891011121314Container( constraints: BoxConstraints.expand( height: Theme.of(context).textTheme.display1.fontSize * 1.1 + 200.0, ), padding: const EdgeInsets.all(8.0), color: Colors.blue[600], alignment: Alignment.center, child: Text('Hello World', style: Theme.of(context) .textTheme .display1 .copyWith(color: Colors.white)), transform: Matrix4.rotationZ(0.1),) 也可以看看： AnimatedContainer，一种在变化时平滑动画属性的变体。边框，其中包含大量使用Container的示例。墨水，在材质上绘制装饰，允许InkResponse和InkWell喷溅在它们上面绘画。布局小部件的目录。 构造方法（Constructors） 创建一个小部件, 结合了普通的绘画、定位和大小调整小部件。 123456789101112Container(&#123;Key key, AlignmentGeometry alignment, EdgeInsetsGeometry padding, Color color, Decoration decoration, Decoration foregroundDecoration, double width, double height, BoxConstraints constraints, EdgeInsetsGeometry margin, Matrix4 transform, Widget child &#125;) 属性（Properties） alignment → AlignmentGeometry 对齐内部的子级 child → Widget 容器内部的子级 constraints → BoxConstraints 要应用于子级的附加约束 decoration → Decoration 子级背后的装饰 可以设置边框、背景色、背景图片、圆角等属性 需要注意的是 deoration和 color 背景颜色不能共存，二者同时只能有一个123456789decoration: new BoxDecoration( border: new Border.all(width: 2.0, color: Colors.red), color: Colors.grey, borderRadius: new BorderRadius.all(new Radius.circular(20.0)), image: new DecorationImage( image: new NetworkImage('http://b-ssl.duitang.com/uploads/item/201609/26/20160926203611_HXQxk.jpeg'), centerSlice: new Rect.fromLTRB(270.0, 180.0, 1360.0, 730.0), ), ), ) 第一张图设置了背景色，未使用decoration；第二张图设置了decoration，未设置背景色 foregroundDecoration → Decoration 在子级前面的装饰 可以设置边框、背景色、背景图片、圆角等属性 foregroundDecoration和 color 背景颜色可以共存，但是color有可能被遮挡 会遮挡child margin → EdgeInsetsGeometry 我的理解就是外边距 padding → EdgeInsetsGeometry 我的理解就是内边距 transform → Matrix4 在绘制容器之前要应用的转换矩阵 hashCode → int 此对象的哈希代码 key → Key 控制一个小部件如何替换树中的另一个小部件 runtimeType → Type 对象的运行时类型 方法（Methods） build(BuildContext context) → Widget 描述此窗口小部件表示的用户界面部分 debugFillProperties(DiagnosticPropertiesBuilder properties) → void 添加与节点关联的其他属性 createElement() → StatelessElement 创建StatelessElement以管理此窗口小部件在树中的位置 debugDescribeChildren() → List 返回描述此节点的子节点的DiagnosticsNode对象列表。 noSuchMethod(Invocation invocation) → dynamic 访问不存在的方法或属性时调用 toDiagnosticsNode({String name, DiagnosticsTreeStyle style }) → DiagnosticsNode 返回调试工具和DiagnosticsNode.toStringDeep使用的对象的调试表示形式 toString({DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String 返回此对象的字符串表示形式 toStringDeep({String prefixLineOne: ‘’, String prefixOtherLines, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String 返回此节点及其后代的字符串表示形式 toStringShallow({String joiner: ‘, ‘, DiagnosticLevel minLevel: DiagnosticLevel.debug }) → String 返回对象的单行详细描述 toStringShort() → String 这个小部件的简短文字描述","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter Container","slug":"Flutter-Container","permalink":"https://ifeiyv666.github.io/tags/Flutter-Container/"}]},{"title":"Flutter开发之BottomNavigationBar底部导航栏","slug":"Flutter开发之BottomNavigationBar底部导航栏","date":"2019-08-14T07:11:47.000Z","updated":"2020-04-03T06:41:47.637Z","comments":true,"path":"2019/08/14/Flutter开发之BottomNavigationBar底部导航栏/","link":"","permalink":"https://ifeiyv666.github.io/2019/08/14/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BBottomNavigationBar%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F/","excerpt":"","text":"BottomNavigationBar 显示在应用程序的底部，用于在少量视图中进行选择，通常在三到五之间。 底部导航栏通常与Scaffold结合使用，它作为Scaffold.bottomNavigationBar参数提供。 底部导航栏的类型更改其项目的显示方式。如果未指定，则当少于四个项时它会自动设置为BottomNavigationBarType.fixed，否则为BottomNavigationBarType.shifting。 BottomNavigationBarType.fixed，当少于四个项目时的默认值。如果选中的项目为非null，则使用selectedItemColor渲染所选项目，否则使用主题的ThemeData.primaryColor。如果backgroundColor为null，则导航栏的背景颜色默认为Material背景颜色ThemeData.canvasColor（基本上是不透明的白色）。 BottomNavigationBarType.shifting，当有四个或更多项时的默认值。如果selectedItemColor为null，则所有项目都以白色呈现。导航栏的背景颜色与所选项目的BottomNavigationBarItem.backgroundColor相同。在这种情况下，假设每个项目将具有不同的背景颜色，并且背景颜色将与白色形成鲜明对比。 此示例显示BottomNavigationBar，因为它在Scaffold小部件中使用。 BottomNavigationBar有三个BottomNavigationBarItem小部件，currentIndex设置为索引0.所选项目为琥珀色。 _onItemTapped函数更改所选项的索引，并在Scaffold的中心显示相应的消息: 源码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253int _selectedIndex = 0;static const TextStyle optionStyle = TextStyle(fontSize: 30, fontWeight: FontWeight.bold);static const List&lt;Widget&gt; _widgetOptions = &lt;Widget&gt;[ Text( 'Index 0: Home', style: optionStyle, ), Text( 'Index 1: Business', style: optionStyle, ), Text( 'Index 2: School', style: optionStyle, ),];void _onItemTapped(int index) &#123; setState(() &#123; _selectedIndex = index; &#125;);&#125;@overrideWidget build(BuildContext context) &#123; return Scaffold( appBar: AppBar( title: const Text('BottomNavigationBar Sample'), ), body: Center( child: _widgetOptions.elementAt(_selectedIndex), ), bottomNavigationBar: BottomNavigationBar( items: const &lt;BottomNavigationBarItem&gt;[ BottomNavigationBarItem( icon: Icon(Icons.home), title: Text('Home'), ), BottomNavigationBarItem( icon: Icon(Icons.business), title: Text('Business'), ), BottomNavigationBarItem( icon: Icon(Icons.school), title: Text('School'), ), ], currentIndex: _selectedIndex, selectedItemColor: Colors.amber[800], onTap: _onItemTapped, ), );&#125; 构造方法（Constructors） 创建一个底部导航栏，通常用作Scaffold的Scaffold.bottomNavigationBar参数。 1234567891011121314151617BottomNavigationBar(&#123; Key key, @required List&lt;BottomNavigationBarItem&gt; items, ValueChanged&lt;int&gt; onTap, int currentIndex: 0, double elevation: 8.0, BottomNavigationBarType type, Color fixedColor, Color backgroundColor, double iconSize: 24.0, Color selectedItemColor, Color unselectedItemColor, double selectedFontSize: 14.0, double unselectedFontSize: 12.0, bool showSelectedLabels: true, bool showUnselectedLabels &#125;) 属性（Properties） backgroundColor → Color 背景颜色 currentIndex → int 当前活动BottomNavigationBarItem的项目索引(一般就是当前选中的那个项目索引) elevation → double 此底部导航栏的Z坐标 fixedColor → Color 选中项目颜色的值（只读） iconSize → double 所有BottomNavigationBarItem图标的大小 items → List&lt;BottomNavigationBarItem&gt; 定义在底部导航栏中排列的按钮项的外观 onTap → ValueChanged&lt;int&gt; 点击其中一个项目时响应事件 selectedFontSize → double 选中时BottomNavigationBarItem标签的字体大小 selectedItemColor → Color 选中时BottomNavigationBarItem.icon和BottomNavigationBarItem.label的颜色 showSelectedLabels → bool 是否为未选择的BottomNavigationBarItems显示标签 showUnselectedLabels → bool 是否为选定的BottomNavigationBarItem显示标签 type → BottomNavigationBarType 定义BottomNavigationBar的布局和行为 unselectedFontSize → double 未选中BottomNavigationBarItem标签的字体大小 unselectedItemColor → Color 未选中的BottomNavigationBarItem.icon和BottomNavigationBarItem.labels的颜色 hashCode → int 对象的哈希值（只读） key → Key 控制一个小部件如何替换树中的另一个小部件 runtimeType → Type 表示对象的运行时类型(只读)","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter BottomNavigationBar","slug":"Flutter-BottomNavigationBar","permalink":"https://ifeiyv666.github.io/tags/Flutter-BottomNavigationBar/"}]},{"title":"Flutter开发之AppBar Widget","slug":"Flutter开发之AppBar Widget","date":"2019-08-13T06:12:33.000Z","updated":"2020-04-03T06:41:29.739Z","comments":true,"path":"2019/08/13/Flutter开发之AppBar Widget/","link":"","permalink":"https://ifeiyv666.github.io/2019/08/13/Flutter%E5%BC%80%E5%8F%91%E4%B9%8BAppBar%20Widget/","excerpt":"","text":"AppBar应用栏通常用于Scaffold.appBar属性，该属性将应用栏放置在屏幕顶部的固定高度小部件中。对于可滚动的应用栏，请参阅SliverAppBar，它将一个AppBar嵌入到一个条子中，以便在CustomScrollView中使用。 AppBar在底部（如果有）上方显示工具栏小部件，前导，标题和操作。底部通常用于TabBar。如果指定了flexibleSpace窗口小部件，则它将堆叠在工具栏和底部窗口小部件后面。下图显示了当编写语言从左到右（例如英语）时，每个插槽在工具栏中的显示位置： 如果省略了前导小部件，但AppBar位于带有抽屉的脚手架中，则会插入一个按钮以打开抽屉。否则，如果最近的导航器具有任何先前的路径，则会插入BackButton。可以通过将automatedImplyLeading设置为false来关闭此行为。在这种情况下，空的前导小部件将导致中间/标题小部件拉伸开始。 构造方法（Constructors）1234567891011121314151617181920AppBar(&#123; Key key, Widget leading, bool automaticallyImplyLeading: true, Widget title, List&lt;Widget&gt; actions, Widget flexibleSpace, PreferredSizeWidget bottom, double elevation, ShapeBorder shape, Color backgroundColor, Brightness brightness, IconThemeData iconTheme, IconThemeData actionsIconTheme, TextTheme textTheme, bool primary: true, bool centerTitle, double titleSpacing: NavigationToolbar.kMiddleSpacing, double toolbarOpacity: 1.0, double bottomOpacity: 1.0 &#125;) eg: 1234567891011121314151617181920AppBar( title: Text('My Fancy Dress'), actions: &lt;Widget&gt;[ IconButton( icon: Icon(Icons.playlist_play), tooltip: 'Air it', onPressed: _airDress, ), IconButton( icon: Icon(Icons.playlist_add), tooltip: 'Restitch it', onPressed: _restitchDress, ), IconButton( icon: Icon(Icons.playlist_add_check), tooltip: 'Repair it', onPressed: _repairDress, ), ],) 属性（Properties） actions → List 要在标题小部件后显示的小部件 actionsIconTheme → IconThemeData 用于应用栏操作中显示的图标的颜色，不透明度和大小。仅当操作的主题不同于应用栏的主要小部件中显示的图标时，才应使用此选项 automaticallyImplyLeading → bool Controls whether we should try to imply the leading widget if null. […] backgroundColor → Color 用于应用栏材质的颜色。通常这应该与亮度，iconTheme，textTheme一起设置。 bottom → PreferredSizeWidget 此小组件显示在应用栏的底部 bottomOpacity → double 应用栏底部的不透明程度(0.0 - 1.0) brightness → Brightness 应用栏材质的亮度。通常，这与backgroundColor，iconTheme，textTheme一起设置 centerTitle → bool 标题是否居中 elevation → double 放置此应用程序栏相对于其父应用程序栏的Z坐标 flexibleSpace → Widget 此小组件堆叠在工具栏和选项卡栏后面。它的高度与应用栏的整体高度相同 iconTheme → IconThemeData 用于应用栏图标的颜色，不透明度和大小。通常，这与backgroundColor，brightness，textTheme一起设置 leading → Widget 要在标题之前显示的小部件 preferredSize → Size 高度为kToolbarHeight和底部窗口小部件首选高度之和的大小 primary → bool 此应用栏是否显示在屏幕顶部 shape → ShapeBorder 形状和阴影 textTheme → TextTheme 应用栏中用于文本的排版样式。通常，这与亮度backgroundColor，iconTheme一起设置 title → Widget appbar中显示的主要小部件 titleSpacing → double 横轴上标题内容周围的间距。即使没有前导内容或操作，也会应用此间距。如果希望title占用所有可用空间，请将此值设置为0.0 toolbarOpacity → double 应用栏的工具栏部分透明度(0.0-1.0)","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter AppBar","slug":"Flutter-AppBar","permalink":"https://ifeiyv666.github.io/tags/Flutter-AppBar/"}]},{"title":"Flutter开发之基础 Widgets","slug":"Flutter开发之基础 Widgets","date":"2019-08-12T01:32:34.000Z","updated":"2020-03-17T07:08:08.594Z","comments":true,"path":"2019/08/12/Flutter开发之基础 Widgets/","link":"","permalink":"https://ifeiyv666.github.io/2019/08/12/Flutter%E5%BC%80%E5%8F%91%E4%B9%8B%E5%9F%BA%E7%A1%80%20Widgets/","excerpt":"","text":"基础 Widgets Container 一个拥有绘制、定位、调整大小的 widget。 Row 在水平方向上排列子widget的列表。 Column 在垂直方向上排列子widget的列表。 Image 一个显示图片的widget。 Text 单一格式的文本。 Icon 图标。 RaisedButton Material Design中的button，一个凸起的材质矩形按钮 Scaffold Material Design布局结构的基本实现。此类提供了用于显示drawer、snackbar和底部sheet的API。 AppBar 一个Material Design应用程序栏，由工具栏和其他可能的widget（如TabBar和FlexibleSpaceBar）组成。 FlutterLogo Flutter logo,以widget形式,这个widget遵从IconTheme。 Placeholder 一个绘制了一个盒子的的widget，代表日后有widget将会被添加到该盒子中","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter Widgets","slug":"Flutter-Widgets","permalink":"https://ifeiyv666.github.io/tags/Flutter-Widgets/"}]},{"title":"Flutter-go运行报错（FIRAnalyticsConfiguration）","slug":"Flutter-go运行报错（FIRAnalyticsConfiguration）","date":"2019-07-19T13:48:12.000Z","updated":"2020-04-03T06:40:45.267Z","comments":true,"path":"2019/07/19/Flutter-go运行报错（FIRAnalyticsConfiguration）/","link":"","permalink":"https://ifeiyv666.github.io/2019/07/19/Flutter-go%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%EF%BC%88FIRAnalyticsConfiguration%EF%BC%89/","excerpt":"","text":"flutter go 项目下载后，运行报如下错误：123456789101112131415161718192021Launching lib/main.dart on iPhone Xʀ in debug mode...Running Xcode build... Xcode build done. 3.3sFailed to build iOS appError output from Xcode build:↳ ** BUILD FAILED **Xcode's output:↳ === BUILD TARGET firebase_analytics OF PROJECT Pods WITH CONFIGURATION Debug === /Users/l/Documents/flutter/.pub-cache/hosted/pub.dartlang.org/firebase_analytics-2.1.1+2/ios/Classes/FirebaseAnalyticsPlu gin.m:60:7: error: use of undeclared identifier 'FIRAnalyticsConfiguration' [[FIRAnalyticsConfiguration sharedInstance] setAnalyticsCollectionEnabled:[enabled boolValue]]; ^ 1 error generated.Could not build the application for the simulator.Error launching application on iPhone Xʀ. 解决方案： 将根目录下pubspec.yaml文件中 firebase_analytics: ^2.0.2+1 改为 firebase_analytics: ^3.0.1 之后运行flutter run 执行通过","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter的坑","slug":"Flutter的坑","permalink":"https://ifeiyv666.github.io/tags/Flutter%E7%9A%84%E5%9D%91/"},{"name":"Flutter-go","slug":"Flutter-go","permalink":"https://ifeiyv666.github.io/tags/Flutter-go/"}]},{"title":"Flutter Flutter.h file not found","slug":"Flutter Flutter.h file not found","date":"2019-07-05T03:34:54.000Z","updated":"2020-03-17T07:03:29.024Z","comments":true,"path":"2019/07/05/Flutter Flutter.h file not found/","link":"","permalink":"https://ifeiyv666.github.io/2019/07/05/Flutter%20Flutter.h%20file%20not%20found/","excerpt":"","text":"1. ‘Flutter/Flutter.h’ file not found解决方案1.点击这里前往下载对应版本文件,替换原来的文件ios/Podfile内容，删除ios/Podfile.lock,重新 pod install 即可 解决方案2.执行代码：flutter run -v 和 flutter doctor -v 检测配置是否成功 可能会出现以下情况： Mac os 10.15 无法打开“idevice_id”,因为无法验证开发者 Mac os 10.15 无法打开“ideviceinfo”,因为无法验证开发者 解决方法 打开终端（Terminal），输入以下命令后回车，如需要，请输入密码 sudo xattr -r -d com.apple.quarantine &lt;path&gt; 注：为应用程序路径，直接从文件夹目录拖拽即可自动填写 解决方案3. 找到 iOS/Flutter 文件夹，再找到以前备份的无报错代码替换掉文件夹内容，应该就不会报错了。 再执行下 flutter build ios --release 编译过程中会重新生成新的 iOS/Flutter 文件夹下内容，覆盖我们替换的文件。 以上解决方案有可能需要结合使用。","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter的坑","slug":"Flutter的坑","permalink":"https://ifeiyv666.github.io/tags/Flutter%E7%9A%84%E5%9D%91/"}]},{"title":"Flutter 编译成Swift","slug":"Flutter 编译成Swift","date":"2019-06-29T12:14:46.000Z","updated":"2020-03-17T07:06:07.833Z","comments":true,"path":"2019/06/29/Flutter 编译成Swift/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/29/Flutter%20%E7%BC%96%E8%AF%91%E6%88%90Swift/","excerpt":"","text":"flutter create -i swift -a kotlin swiftflutterflutter create --org com.yourcompany -i swift -a kotlin --description &#39;Your App Description&#39; your_app_nameflutter run -d 06157df6f3881f3e –flavor tencent","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter命令","slug":"Flutter命令","permalink":"https://ifeiyv666.github.io/tags/Flutter%E5%91%BD%E4%BB%A4/"}]},{"title":"Flutter  VSCode命令收集","slug":"Flutter  VSCode命令收集","date":"2019-06-27T02:22:43.000Z","updated":"2020-03-17T06:58:12.854Z","comments":true,"path":"2019/06/27/Flutter  VSCode命令收集/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/27/Flutter%20%20VSCode%E5%91%BD%E4%BB%A4%E6%94%B6%E9%9B%86/","excerpt":"","text":"open -a Simulator 打开模拟器 flutter run 编译执行flutter程序 flutter packages get 获取相同版本的软件包 flutter packages upgrade 如果要升级到软件包的新版本，例如使用该软件包中的新功能","categories":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/categories/Flutter/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/tags/Flutter/"},{"name":"VSCode","slug":"VSCode","permalink":"https://ifeiyv666.github.io/tags/VSCode/"}]},{"title":"androidx","slug":"androidx","date":"2019-06-25T08:33:55.000Z","updated":"2020-04-03T06:38:33.882Z","comments":true,"path":"2019/06/25/androidx/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/25/androidx/","excerpt":"","text":"1. ViewModelProviders在build.gradle 的 dependencies 中加入 1implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0' 在使用的地方导入： 1import androidx.lifecycle.ViewModelProviders; 即可使用： 1myViewModel = ViewModelProviders.of(this).get(MyViewModel.class); 该方法 2.1.0 已弃用 ViewModelProviders.of() ,改为 12345//导入 import androidx.lifecycle.ViewModelProvider;myViewModel = ViewModelProvider(this).get(MyViewModel.class);//或者myViewModel = ViewModelProvider(getActivity()).get(MyViewModel.class); 2. DataBinding在 build.gradle 的 defaultConfig中加入 123dataBinding&#123; enabled true&#125; Sync Now一下，把下面代码套在布局最外层，即可使用。 1234567891011121314&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" xmlns:tools=\"http://schemas.android.com/tools\"&gt; &lt;data&gt; &lt;/data&gt; //============ //这里写自己的布局 &lt;/layout&gt;","categories":[{"name":"Android","slug":"Android","permalink":"https://ifeiyv666.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://ifeiyv666.github.io/tags/Android/"}]},{"title":"Android Studio运行Flutter项目run不起来","slug":"Android Studio运行Flutter项目run不起来","date":"2019-06-19T06:46:56.000Z","updated":"2020-04-03T06:37:35.686Z","comments":true,"path":"2019/06/19/Android Studio运行Flutter项目run不起来/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/19/Android%20Studio%E8%BF%90%E8%A1%8CFlutter%E9%A1%B9%E7%9B%AErun%E4%B8%8D%E8%B5%B7%E6%9D%A5/","excerpt":"","text":"解决方案： 修改Flutter SDK中的flutter.gradle文件,通过 flutter&gt;packages&gt;flutter_tools&gt;gradle&gt;flutter.gradle(注意这是Flutter SDK安装位置不是Android Studio的)路径找到flutter.gradle，打开flutter.gradle文件，修改配置： 注释掉google()和jcenter(),加入阿里的配置项 123maven &#123;url 'https://maven.aliyun.com/repository/google'&#125;maven &#123;url 'https://maven.aliyun.com/repository/jcenter'&#125;maven &#123;url 'https://maven.aliyun.com/nexus/content/groups/public'&#125; 修改后： 12345678910111213buildscript &#123; repositories &#123; //注释掉 google()和jcenter() // google() // jcenter() maven &#123;url 'https://maven.aliyun.com/repository/google'&#125; maven &#123;url 'https://maven.aliyun.com/repository/jcenter'&#125; maven &#123;url 'https://maven.aliyun.com/nexus/content/groups/public'&#125; &#125; dependencies &#123; classpath 'com.android.tools.build:gradle:3.2.1' &#125;&#125; 手动下载gradle进行配置 找到创建的flutter项目： 通过路径flutterdemo001/android/gradle/wrapper/gradle-wrapper.properties找到对应文件打开后： 123456#Fri Jun 23 08:50:38 CEST 2017distributionBase=GRADLE_USER_HOMEdistributionPath=wrapper/distszipStoreBase=GRADLE_USER_HOMEzipStorePath=wrapper/distsdistributionUrl=https\\://services.gradle.org/distributions/gradle-4.10.2-all.zip ​ 找到distributionUrl对应的地址https://services.gradle.org/distributions/gradle-4.10.2-all.zip就是gradle的下载地址,注意文件中https后面有个\\,复制到浏览器记得要删掉 点击下载 gradle-4.10.2-all.zip 点击下载其他版本gradle 下载完成后，进行解压。 然后打开目录：Macintosh HD 》 用户 》当前登录用户名称》.gradle》wrapper》dists⁩, 可能有些电脑未打开隐藏文件可见，是看不到.gradle文件夹的,它是一个隐藏文件夹。 使用快捷键shift+command+.来切换隐藏文件可见还是隐藏。找到dists文件夹后，把解压后的gradle拷贝一份放到dists文件夹下即可。","categories":[{"name":"Android","slug":"Android","permalink":"https://ifeiyv666.github.io/categories/Android/"}],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"https://ifeiyv666.github.io/tags/Flutter/"},{"name":"Android","slug":"Android","permalink":"https://ifeiyv666.github.io/tags/Android/"}]},{"title":"Swift 简单链表实现","slug":"Swift简单链表实现","date":"2019-06-17T07:21:08.000Z","updated":"2020-04-03T06:47:00.335Z","comments":true,"path":"2019/06/17/Swift简单链表实现/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/17/Swift%E7%AE%80%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"Swift 简单链表实现 链表中的元素在内存中不是顺序存储的，查找慢，插入、删除只需要对元素指针重新赋值，效率高；数组元素在内存上连续存放，可以通过下标查找元素；插入、删除需要移动大量元素，比较适用于元素很少变化的情况 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114import UIKit//链表节点public class Node&#123; var value: T //节点存储数据 weak var next: Node? //节点链接到的下一个节点 weak var previous: Node?//节点链接到的上一个节点 init(value: T) &#123; self.value = value &#125;&#125;//自定义链表public class NodeList:CustomStringConvertible&#123; //链表起点节点 private var head:Node? //链表终点节点 private var tail:Node? //链表内数据是否为空 public var isEmpty:Bool&#123; return head == nil &#125; //返回第一个节点 public var first:Node?&#123; return head &#125; //返回最后一个节点 public var last:Node?&#123; return tail &#125; //添加一个链接节点数据 public func append(value:T)&#123; let newNode = Node(value: value) if let tailNode = tail&#123; newNode.previous = tailNode tailNode.next = newNode &#125;else&#123; head = newNode &#125; tail = newNode &#125; //删除节点 public func remove(node:Node) -&gt; T&#123; //保存要删除节点的上一个和下一个节点 let prev = node.previous let next = node.next //如果要删处节点的上一节点不为空 if let prev = prev &#123; //上一个节点链接到的下一个节点，修改为要删除的下一个节点 prev.next = next &#125; //如果要删处节点的上一节点为空，说明要删除的是链表起点节点 else &#123; //把下一个节点改为起点节点 head = next &#125; //要删出的上一个节点，链接到上一个节点 next?.previous = prev if next == nil &#123; //next为nil说明要删除的是最后一个，把倒数以前倒数第二个，置为最后一个 tail = prev &#125; node.previous = nil node.next = nil return node.value &#125; //删除所有节点数据 public func removeAll() &#123; head = nil tail = nil &#125; //取对应索引的节点 public func nodeAt(index: Int) -&gt; Node? &#123; if index &gt;= 0 &#123; var node = head var i = index while node != nil &#123; if i == 0 &#123; return node &#125; i -= 1 node = node!.next &#125; &#125; return nil &#125; //输出节点数据 public var description: String&#123; var text = \"\" var node = head while node != nil &#123; text += \"\\(node!.value)\" node = node!.next if node != nil &#123; text += \",\" &#125; &#125; return \"[\" + text + \"]\" &#125;&#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"链表","slug":"链表","permalink":"https://ifeiyv666.github.io/tags/%E9%93%BE%E8%A1%A8/"},{"name":"swift","slug":"swift","permalink":"https://ifeiyv666.github.io/tags/swift/"}]},{"title":"touch取消textfield的第一响应","slug":"touch取消textfield的第一响应","date":"2019-06-17T05:07:29.000Z","updated":"2020-04-03T06:47:27.721Z","comments":true,"path":"2019/06/17/touch取消textfield的第一响应/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/17/touch%E5%8F%96%E6%B6%88textfield%E7%9A%84%E7%AC%AC%E4%B8%80%E5%93%8D%E5%BA%94/","excerpt":"","text":"12345678910111213141516override func touchesEnded(_ touches: Set&lt;UITouch&gt;, with event: UIEvent?) &#123; for touch:AnyObject in touches &#123; let t:UITouch = touch as! UITouch //检测当前触摸的view是否是textField if t.view == pwdField || t.view == pwdField || t.view == phoneField&#123; t.view?.becomeFirstResponder() &#125;else&#123; phoneField.resignFirstResponder() pwdField.resignFirstResponder() verificationField.resignFirstResponder() self.resignFirstResponder() &#125; &#125; &#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"Responsder","slug":"Responsder","permalink":"https://ifeiyv666.github.io/tags/Responsder/"},{"name":"touch","slug":"touch","permalink":"https://ifeiyv666.github.io/tags/touch/"}]},{"title":"Swift Responsder","slug":"SwiftResponsder","date":"2019-06-17T04:57:24.000Z","updated":"2020-04-03T06:47:19.399Z","comments":true,"path":"2019/06/17/SwiftResponsder/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/17/SwiftResponsder/","excerpt":"","text":"通过响应者链获取对应的第一个符合条件的Responsder 传入响应检测的起点Responsder，一般用于UIView中查找响应者链中的控制器 1234567func nextResponder(currentView:UIView)-&gt;UIViewController&#123;var vc:UIResponder = currentViewwhile vc.isKind(of: UIViewController.self) != true &#123;vc = vc.next!&#125;return vc as! UIViewController&#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"Responsder","slug":"Responsder","permalink":"https://ifeiyv666.github.io/tags/Responsder/"}]},{"title":"Swift中String转类名Class","slug":"Swift中String转类名Class","date":"2019-06-17T03:24:32.000Z","updated":"2020-04-03T06:47:13.441Z","comments":true,"path":"2019/06/17/Swift中String转类名Class/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/17/Swift%E4%B8%ADString%E8%BD%AC%E7%B1%BB%E5%90%8DClass/","excerpt":"String-&gt;Class Swift中引入了命名空间的概念，转Class需要拼接命名空间 123456789101112131415161718//这是一个简单的通过字符串类名，转Class然后初始化后跳转的一个小例子@objc func OnClick()&#123; //控制器字符串名称 let vcNameString = \"OneViewController\" //获取命名空间也就是项目名称 let clsName = Bundle.main.infoDictionary![\"CFBundleExecutable\"] as? String //拼接 let className=clsName! + \".\" + vcNameString //字符串转Class 需要注意的是这里的`UIViewController`强转必须带上`.Type`,否则转换不成功 let classT = NSClassFromString(className)! as! UIViewController.Type URLRouter.shared.pushViewController(viewController:classT.init() , animated: true)&#125;//成功完成跳转","text":"String-&gt;Class Swift中引入了命名空间的概念，转Class需要拼接命名空间 123456789101112131415161718//这是一个简单的通过字符串类名，转Class然后初始化后跳转的一个小例子@objc func OnClick()&#123; //控制器字符串名称 let vcNameString = \"OneViewController\" //获取命名空间也就是项目名称 let clsName = Bundle.main.infoDictionary![\"CFBundleExecutable\"] as? String //拼接 let className=clsName! + \".\" + vcNameString //字符串转Class 需要注意的是这里的`UIViewController`强转必须带上`.Type`,否则转换不成功 let classT = NSClassFromString(className)! as! UIViewController.Type URLRouter.shared.pushViewController(viewController:classT.init() , animated: true)&#125;//成功完成跳转 注意 Swift中引入了命名空间的概念，转Class需要拼接命名空间 这里的UIViewController强转必须带上.Type,否则转换不成功","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/tags/Swift/"},{"name":"Class","slug":"Class","permalink":"https://ifeiyv666.github.io/tags/Class/"}]},{"title":"Android报错","slug":"Android 报错","date":"2019-06-17T02:30:22.000Z","updated":"2020-04-03T06:37:15.176Z","comments":true,"path":"2019/06/17/Android 报错/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/17/Android%20%E6%8A%A5%E9%94%99/","excerpt":"","text":"1.*MISSING ACCESSIBILITY LABEL: WHERE MINSDK &lt; 17, YOU SHOULD PROVIDE AN ‘ANDROID:HINT’ * 在布局文件（默认为main_activity.xml）添加 123xmlns:tools=\"http://schemas.android.com/tools\" tools:ignore=\"LabelFor\"","categories":[{"name":"Android","slug":"Android","permalink":"https://ifeiyv666.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://ifeiyv666.github.io/tags/Android/"},{"name":"android","slug":"android","permalink":"https://ifeiyv666.github.io/tags/android/"}]},{"title":"根目录下的build.gradle","slug":"『build.gradle』","date":"2019-06-16T04:11:32.000Z","updated":"2020-04-03T06:28:50.828Z","comments":true,"path":"2019/06/16/『build.gradle』/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/16/%E3%80%8Ebuild.gradle%E3%80%8F/","excerpt":"","text":"根目录下的build.gradle123456789101112131415161718192021222324252627282930313233// Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript &#123; repositories &#123; google() //代码托管库，设置后可以在项目中引用jcenter上的开源项目 jcenter() &#125; //引用anroid插件 dependencies &#123; //声明gradle插件，插件版本号 classpath 'com.android.tools.build:gradle:3.5.3' // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files &#125;&#125;allprojects &#123; repositories &#123; google() jcenter() &#125;&#125;task clean(type: Delete) &#123; delete rootProject.buildDir&#125; app目录下的build.gradle声明是Android应用程序还是库模块//com.android.appliccation 标识应用程序，可以直接运行//com.android.library 标识这是一个库模块，依附于别的应用程序运行apply plugin: 'com.android.application'//配置项目构建的各种属性android &#123; //程序在编译时会检查lint，有任何错误提示会停止build，我们可以关闭这个开关 lintOptions&#123; //即使报错也不会停止打包 abortOnError false //打包release版本的时候是否进行检测 checkReleaseBuilds false &#125; //编译SDK的版本，也就是API Level compileSdkVersion 28 //build tools的版本，其中包括了打包工具aapt 、 dx //这个目录工具位于 sdk目录/build-tools/ 下 buildToolsVersion '28.0.3' //关闭Android Studio的PNG合法性检查 aaptOptions.cruncherEnabled = false aaptOptions.useNewCruncher = false //默认配置 defaultConfig &#123; //应用程序的包名 applicationId \"com.ifeiyv.android001\" //最小的SDK版本，如果设置小于这个版本，或者大于maxSdkVersion将无法安装这个应用 minSdkVersion 19 //目标sdk版本，充分测试过的版本（建议版本） targetSdkVersion 28 //版本号 每次更新增减 versionCode 1 //版本号，用户看到的版本号 versionName \"1.0\" //指定打包成Jar文件时候的文件名称 archivesBaseName = \"demo-$versionName\" //Native Development Kit //原生开发工具包是一组可以让您在Android应用中利用C和c++代码的工具,可用以从您自己的源代码构建,或者利用现有的预构建库. ndk&#123; //设置（so）文件名称 moduleName \"testfeiyv\" ldLibs \"log\",\"z\",\"m\",\"jnigraphics\",\"android\" //显示指定支持的ABIs abiFilters \"armeabi\",\"x86\",\"armeabi-v7a\" //C++11 cFlags \"-sd=c++11 -fexceptions\" stl \"gnustl_static\" &#125; //当方法数超过65535的时候允许打包成多个dex文件，动态加载dex //(方法的索引使用的是一个short值，而short最大值是65535) multiDexEnabled true //Instrumentation单元测试 testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\" &#125; sourceSets&#123; main&#123; //指定清单文件 manifest.srcFile 'AndroidManifest.xml' //指定res资源目录 res.srcDirs = ['res'] //asset资源文件 assets.srcDir = ['assets'] //jni代码目录 jni.srcDirs 'src/main/jni' //jni库目录 jniLibs.srcDir 'src/main/jniLibs' //指定Java源代码目录 java.srcDirs = ['src'] //指定resource目录 resources.srcDirs = ['src'] //指定aidl目录 aidl.srcDirs = ['src'] //指定source目录 renderscript.srcDirs = ['src'] &#125; //指定debug模式的路径 debug.setRoot('build-types/debug') //指定release模式的路径 release.setRoot('build-types/release') &#125; //mltiDex的一些相关配置，这样配置可以使编译速度更快 dexOptions&#123; //让它不要对Lib做preDexing preDexLibraries = fasle //开启incremental dexing,优化编译效率。这个功能Android Studio默认是关闭的 incremental true //增加java堆内存大小 javaMaxHeapSize \"4g\" &#125; //签名配置 signingConfigs&#123; release&#123; //密钥文件路径 storeFile file(\"feiyv.keystore\") //密钥文件密码 storePassword \"feiyvpwd\" //key 别名 keyAlias \"fy\" //key密码 keyPassword \"fypwd\" &#125; debug&#123; //密钥文件路径 storeFile file(\"feiyv.keystore\") //密钥文件密码 storePassword \"feiyvpwd\" //key 别名 keyAlias \"fy\" //key密码 keyPassword \"fypwd\" &#125; &#125; //指定生成安装文件的配置，常有两个子包：release，debug，注：直接运行的都是debug安装文件 buildTypes &#123; //release版本的配置，即生成发布版文件的配置 release &#123; //是否支持zip zipAlignEnabled true //移除无用的resource文件 shrinkResources true //是否对代码进行混淆，true标识混淆 minifyEnabled false //指定混淆时使用的规则文件： //proguard-android.tex指所有项目通用的混淆规则，proguard-rules.pro当前项目特有的混淆规则 //release的Proguard默认为Module下的proguard-rules.pro文件 proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' //是否支持调试 debuggable false //ndk的一些配置 ndk &#123; // cFlags \"-std=c++11 -fexceptions -O3 -D__RELEASE__\" // C++11 // platformVersion = \"19\" moduleName \"hebbewifisafe\" // 设置库(so)文件名称 ldLibs \"log\", \"z\", \"m\", \"jnigraphics\", \"android\" // 引入库，比如要用到的__android_log_print abiFilters \"armeabi\", \"x86\", \"armeabi-v7a\"// \"x86\" cFlags \"-std=c++11 -fexceptions\" // C++11 stl \"gnustl_static\" &#125; // 采用动态替换字符串的方式生成不同的 release.apk （3.0之后版本的修改方式） applicationVariants.all &#123; variant -&gt; variant.outputs.all &#123; output -&gt; if (!variant.buildType.isDebuggable()) &#123; // 获取签名的名字 variant.signingConfig.name // 要被替换的源字符串 def sourceFile = \"app-release\"; // 替换的字符串 def replaceFile = \"Demo-V$&#123;variant.versionName&#125;.$&#123;releaseTime()&#125;\" outputFileName = output.outputFile.name.replace(sourceFile, replaceFile) &#125; &#125; &#125; jniDebuggable false // 关闭jni调试 &#125; debug &#123; // debug版本的配置 minifyEnabled false zipAlignEnabled true shrinkResources true // 移除无用的resource文件 proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' debuggable true // jniDebuggable true ndk &#123; cFlags \"-std=c++11 -fexceptions -g -D __DEBUG__\" // C++11 &#125; jniDebuggable true &#125; &#125; productFlavors&#123; //这里可以设置产品发布的一些东西 //比如一种软件要发布到不同的渠道 //且不同渠道中的包名不同，可以在此处 //甚至可以设置不同的AndroidManifest.xml tencent&#123; &#125; huanwei&#123; &#125; all&#123; &#125; &#125; // 所谓ProductFlavors其实就是可定义的产品特性， // 配合 manifest merger 使用的时候就可以达成在一次编译 // 过程中产生多个具有自己特性配置的版本。 // 这个配置的作用就是，为每个渠道包产生不同的 UMENG_CHANNEL_VALUE 的值。 productFlavors.all&#123; flavor -&gt; flavor.manifestPlaceholder = [UMENG_CHANNEL_VALUE:name] &#125; // 指定当前项目的所有依赖关系：本地依赖、库依赖、远程依赖 // 本地依赖：可以对本地 Jar 包或目录添加依赖关系 // 库依赖：可以对项目中的库模块添加依赖关系 // 远程依赖：可以对 jcenter 库上的开源项目添加依赖 // 标准的远程依赖格式是 域名:组织名:版本号 dependencies &#123; implementation fileTree(dir: 'libs', include: ['*.jar']) implementation 'com.android.support:recyclerview-v7:28.0.0'// implementation 'androidx.appcompat:appcompat:1.0.2'// implementation 'androidx.constraintlayout:constraintlayout:1.1.3' testImplementation 'junit:junit:4.12'// androidTestImplementation 'androidx.test.ext:junit:1.1.0'// androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'&#125; // 声明是要使用谷歌服务框架 apply plugin: 'com.google.gms.google-services' // 第三方依赖库的本地缓存路径 task showMeCache &lt;&lt; &#123; configurations.compile.each &#123; println it &#125; &#125; // 使用maven仓库。android有两个标准的library文件服务器，一个jcenter一个maven。两者毫无关系。// jcenter有的maven可能没有，反之亦然。// 如果要使用jcenter的话就把mavenCentral()替换成jcenter()repositories &#123; mavenCentral()&#125; def releaseTime() &#123; return new Date().format(\"MMdd.HHmm\")&#125;","categories":[{"name":"Android","slug":"Android","permalink":"https://ifeiyv666.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://ifeiyv666.github.io/tags/Android/"},{"name":"android","slug":"android","permalink":"https://ifeiyv666.github.io/tags/android/"},{"name":"flutter","slug":"flutter","permalink":"https://ifeiyv666.github.io/tags/flutter/"}]},{"title":"SWIFT 常用方法","slug":"SWIFT 常用方法","date":"2019-06-12T02:22:51.000Z","updated":"2020-04-03T07:01:58.128Z","comments":true,"path":"2019/06/12/SWIFT 常用方法/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/12/SWIFT%20%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445//// LayoutProperties.swift// IfeiyvSwift//// Created by l on 2019/6/12.// Copyright © 2019 ifeiyv. All rights reserved.//import UIKitimport CommonCrypto//Mark:------------Layoutstruct Screen&#123; //MARK:屏幕宽度 static var width:CGFloat&#123; return UIScreen.main.bounds.width &#125; //MARK:屏幕高度 static var height:CGFloat&#123; return UIScreen.main.bounds.height &#125; //MARK:分辨率 倍率 static var scale:CGFloat&#123; return Screen.width/375.0 &#125;&#125;extension UIView&#123; //MARK: 设置或者获取UIView的frame var fy_frame:CGRect&#123; set&#123; self.frame = fy_frame &#125; get&#123; return self.frame &#125; &#125; //MARK: 设置或者获取UIView的origin var fy_origin:CGPoint&#123; set&#123; self.frame = CGRect(x: fy_origin.x, y: fy_origin.y, width: self.fy_width, height: self.fy_height) &#125; get&#123; return self.frame.origin &#125; &#125; //MARK: 设置或者获取UIView的size var fy_size:CGSize&#123; set&#123; self.frame = CGRect(x: self.fy_origin.x, y: self.fy_origin.y, width: fy_size.width, height: fy_size.height) &#125; get&#123; return self.frame.size &#125; &#125; //MARK: 设置或者获取UIView的宽度 var fy_width:CGFloat&#123; set&#123; self.frame = CGRect(x: self.frame.origin.x, y: self.frame.origin.y, width: fy_width, height: self.frame.size.height) &#125; get&#123; return self.bounds.size.width &#125; &#125; //MARK: 设置或者获取UIView的宽度 var fy_height:CGFloat&#123; set&#123; self.frame = CGRect(x: self.frame.origin.x, y: self.frame.origin.y, width: self.frame.size.width, height: fy_height) &#125; get&#123; return self.bounds.size.height &#125; &#125; //MARK: 设置或者获取UIView的x坐标 var fy_x:CGFloat&#123; set&#123; self.frame = CGRect(x: fy_x, y: self.frame.origin.y, width: self.frame.size.width, height: self.frame.size.height) &#125; get&#123; return self.frame.origin.x &#125; &#125; //MARK: 设置或者获取UIView的y坐标 var fy_y:CGFloat&#123; set&#123; self.frame = CGRect(x: self.frame.origin.x, y: fy_y, width: self.frame.size.width, height:self.frame.size.height) &#125; get&#123; return self.frame.origin.y &#125; &#125; //MARK: 设置或者获取UIView的maxX坐标 var fy_maxX:CGFloat&#123; get&#123; return self.fy_x+self.fy_width &#125; &#125; //MARK: 设置或者获取UIView的maxY坐标 var fy_maxY:CGFloat&#123; get&#123; return self.fy_y+self.fy_height &#125; &#125; &#125;extension UIView&#123; //MARK: 切圆角 func corner(byRoundingCorners corners: UIRectCorner, radii: CGFloat) &#123; let maskPath = UIBezierPath(roundedRect: self.bounds, byRoundingCorners: corners, cornerRadii: CGSize(width: radii, height: radii)) let maskLayer = CAShapeLayer() maskLayer.frame = self.bounds maskLayer.path = maskPath.cgPath self.layer.mask = maskLayer &#125;&#125;enum FYError: Swift.Error &#123; case NOFINT&#125;extension UINib&#123; //MARK: 加载XIB public class func readNibView(str: String) throws -&gt; UIView &#123; let nib = UINib.init(nibName: str, bundle: nil) if let view = nib.instantiate(withOwner: nil, options: nil).first as? UIView &#123; return view &#125; throw FYError.NOFINT &#125;&#125;//Mark:------------UIColorextension UIColor&#123; func fy_RGB(red:CGFloat,green:CGFloat,blue:CGFloat) -&gt; UIColor &#123; return fy_RGBA(red: red, green: green, blue: blue, alpha: 1.0) &#125; func fy_RGBA(red:CGFloat,green:CGFloat,blue:CGFloat,alpha:CGFloat) -&gt; UIColor &#123; return UIColor.init(red: red/255.0, green: green/255.0, blue: blue/255.0, alpha: alpha) &#125; func fy_hexColor(hexColor:String,defaultStringColor:String = \"000000\",alpha:CGFloat = 1.0) -&gt; UIColor &#123; var cString: String = hexColor.trimmingCharacters(in: NSCharacterSet.whitespacesAndNewlines) if cString.count &lt; 6 &#123; cString = defaultStringColor &#125; if cString.hasPrefix(\"0X\") || cString.hasPrefix(\"0x\") &#123; cString = String(cString.suffix(from: cString.index(cString.startIndex, offsetBy: 2))) &#125; if cString.hasPrefix(\"#\") &#123; cString = String(cString.suffix(from: cString.index(cString.startIndex, offsetBy: 1))) &#125; if cString.count != 6 &#123; cString = defaultStringColor &#125; var range: NSRange = NSMakeRange(0, 2) let rString = (cString as NSString).substring(with: range) range.location = 2 let gString = (cString as NSString).substring(with: range) range.location = 4 let bString = (cString as NSString).substring(with: range) var r: UInt32 = 0x0 var g: UInt32 = 0x0 var b: UInt32 = 0x0 Scanner(string: rString).scanHexInt32(&amp;r) Scanner(string: gString).scanHexInt32(&amp;g) Scanner(string: bString).scanHexInt32(&amp;b) return fy_RGBA(red: CGFloat(r), green: CGFloat(g), blue: CGFloat(b), alpha: alpha) &#125; &#125;//Mark:------------Stringextension String&#123; static let EMPTY = \"\" /// String使用下标截取字符串 /// 例: \"示例字符串\"[0..&lt;2] 结果是 \"示例\" subscript (r: Range&lt;Int&gt;) -&gt; String &#123; get &#123; let startIndex = self.index(self.startIndex, offsetBy: r.lowerBound) let endIndex = self.index(self.startIndex, offsetBy: r.upperBound) return String(self[startIndex..&lt;endIndex]) &#125; &#125; //MARK: 返回一个字符串的前n位, 若字符串长不足n，则直接返回当前字符串 func fy_start(length n: Int) -&gt; String &#123; if self.count &lt; n &#123; return self &#125; if n &lt; 0 &#123; return self &#125; let index = self.index(self.startIndex, offsetBy: n) return String(self[..&lt;index]) &#125; //MARK: 返回一个字符串的后n位, 若字符串长不足n，则直接返回当前字符串 func fy_last(length n: Int) -&gt; String &#123; if self.count &lt; n &#123; return self &#125; let index = self.index((self.endIndex), offsetBy: -n) return String(self[index...]) &#125; //MARK: 删除所有的空格 func fy_trimAll() -&gt; String &#123; return self.replacingOccurrences(of: \" \", with: String.EMPTY) &#125; //MARK: 判断是否包含数字和字母 func fy_isPassWord() -&gt; Bool &#123; let numberRegex:NSPredicate = NSPredicate(format: \"SELF MATCHES %@\", \"^.*[0-9]+.*$\") let letterRegex:NSPredicate = NSPredicate(format: \"SELF MATCHES %@\", \"^.*[A-Za-z]+.*$\") if numberRegex.evaluate(with: self) &amp;&amp; letterRegex.evaluate(with: self)&#123; return true &#125; return false &#125; //MARK: md5加密 var fy_md5: String &#123; let cStr = self.cString(using: .utf8) let digestLen = Int(CC_MD5_DIGEST_LENGTH) let buffer = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: digestLen) CC_MD5(cStr!,(CC_LONG)(strlen(cStr!)), buffer) let md5String = NSMutableString() for i in 0 ..&lt; digestLen &#123; md5String.appendFormat(\"%02X\", buffer[i]) &#125; free(buffer) return md5String as String &#125; //MARK: base64编码 var fy_base64Encoding: String &#123; let data = self.data(using: String.Encoding.utf8) var base64String = data?.base64EncodedString(options: .lineLength76Characters) base64String = base64String?.replacingOccurrences(of: \"\\r\", with: \"\") return base64String ?? \"\" &#125; //MARK: base64解码 var fy_base64Decoded: String &#123; let decodedData = Data(base64Encoded: self, options: Data.Base64DecodingOptions(rawValue: 0)) return String(data: decodedData!, encoding: String.Encoding.utf8) ?? \"\" &#125; //MARK: 返回188****8888类型字符串 func fy_getSecretMobileNo() -&gt; String &#123; if self.isEmpty &#123; return self &#125; if self.count &gt; 7 &#123; return \"\\(self.fy_start(length: 3))****\\(self.fy_last(length:4))\" &#125;else&#123; return self; &#125; &#125; //MARK: 截取从start开始,长度为lenght的字符串 /// /// - Parameters: /// - start: 开始 /// - lenght: 长度 /// - Returns: 处理结果 func fy_startIndexToLenght(_ start: Int, lenght: Int) -&gt; String &#123; if start &gt; self.count &#123; return self &#125; let startIndex = self.index(self.startIndex, offsetBy: start) if self.count &lt; (start + lenght) &#123; return String(self.suffix(from: startIndex)) &#125; let endIndex = self.index(self.startIndex, offsetBy: start + lenght) return String(self[startIndex..&lt;endIndex]) &#125; //MARK: 判断链接中是否存在中文 func fy_isIncludeChineseIn() -&gt; Bool &#123; for(_, value) in self.enumerated() &#123; if value &gt;= \"\\u&#123;4E00&#125;\" &amp;&amp; value &lt;= \"\\u&#123;9FA5&#125;\" &#123; return true &#125; &#125; return false &#125; //MARK: 判断是否有效邮箱 /// /// - Returns: 结果 func fy_isPeriodEmail() -&gt; Bool &#123; let email = \"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]&#123;2,4&#125;\" let regextestEmails = NSPredicate(format: \"SELF MATCHES %@\", email) return regextestEmails.evaluate(with: self) &#125; //MARK: 判断是否有效身份证号 /// /// - Returns: Bool func fy_isPeriodIdCard() -&gt; Bool &#123; if self.count != 18 &#123; return false &#125; let regex2 = \"^(^[1-9]\\\\d&#123;7&#125;((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])\\\\d&#123;3&#125;$)|(^[1-9]\\\\d&#123;5&#125;[1-9]\\\\d&#123;3&#125;((0\\\\d)|(1[0-2]))(([0|1|2]\\\\d)|3[0-1])((\\\\d&#123;4&#125;)|\\\\d&#123;3&#125;[Xx])$)$\" let identityCardPredicate = NSPredicate(format: \"SELF MATCHES %@\", regex2) let flag = identityCardPredicate.evaluate(with: self) if !flag &#123; // 格式错误 return flag &#125; else &#123; // 格式正确，判断合法性 // 将前十七位加权因子保存在数组里 let idCardWiArray = [\"7\", \"9\", \"10\", \"5\", \"8\", \"4\", \"2\", \"1\", \"6\", \"3\", \"7\", \"9\", \"10\", \"5\", \"8\", \"4\", \"2\"] // 这是除以11后，可能产生的11位余数， 验证码，也保存在数组里 let idCardYArray = [\"1\", \"0\", \"10\", \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\"] var idCardArr = [Int]() var idCardWiSum = 0 for index in 0..&lt;17 &#123; let subStrIndex = fy_startIndexToLenght(index, lenght: 1) let idCardWiIndex = idCardWiArray[index] // 数组保存所有乘积 idCardArr.append(Int(subStrIndex)! * Int(idCardWiIndex)!) &#125; // 将所有乘积相加 for index in 0..&lt;idCardArr.count &#123; idCardWiSum += idCardArr[index] &#125; // 计算出校验码所在数组的位置 let idCardMod = idCardWiSum % 11 // 得到最后一位身份证号码 let idCardLast = fy_startIndexToLenght(17, lenght: 1) if idCardMod == 2 &#123; if idCardLast == \"X\" || idCardLast == \"x\" &#123; return true &#125; else &#123; return false &#125; &#125; else &#123; if idCardLast == idCardYArray[idCardMod] &#123; return true &#125; else &#123; return false &#125; &#125; &#125; &#125; //MARK: 正则匹配6-12位数字和大小写字母组合 /// /// - Returns: Bool func fy_checkPassword() -&gt; Bool &#123; let password = \"^(?![0-9]+$)(?![a-zA-Z]+$)[a-zA-Z0-9]&#123;6,12&#125;\" let regextestPassword = NSPredicate(format: \"SELF MATCHES %@\", password) return regextestPassword.evaluate(with:self) &#125; //MARK: 判断字符串是否包含其他字符串(必须全部一样) func fy_contains(find: String) -&gt; Bool&#123; return self.range(of: find) != nil &#125; //MARK: 字符串转换成整型 func fy_toInt() -&gt; Int? &#123; return Int(self) &#125; //MARK: 识别有效手机号 func fy_verifyPhoneNumber() -&gt; Bool &#123; let mobile = \"^1((3[0-9]|4[5-68-9]|5[0-35-9]|6[6]|7[0-9]|8[0-9]|9[89])\\\\d&#123;8&#125;$)\" let regextestmobile = NSPredicate(format: \"SELF MATCHES %@\",mobile) return regextestmobile.evaluate(with: self) &#125; //MARK: 识别是否有效座机号 eg: 021-8688995 func fy_landlineNumber() -&gt; Bool &#123; let strNum = \"^(0\\\\d&#123;2,3&#125;-?\\\\d&#123;7,8&#125;$)\" let checktest = NSPredicate.init(format: \"SELF MATCHES %@\", strNum) let isPhone = checktest.evaluate(with: self) let strNum1 = \"^(\\\\d&#123;7,8&#125;$)\" let checktest1 = NSPredicate.init(format: \"SELF MATCHES %@\", strNum1) let isPhone1 = checktest1.evaluate(with: self) if isPhone || isPhone1 &#123; return true &#125; else &#123; return false &#125; &#125; &#125;extension Array&#123; //MARK: 数组转JSON字符串 func arrayToString() -&gt; String? &#123; if let data = try? JSONSerialization.data(withJSONObject: self, options: JSONSerialization.WritingOptions.init(rawValue: 0)) &#123; if let jsonStr = String.init(data: data, encoding: String.Encoding.utf8) &#123; return jsonStr &#125; &#125; return nil &#125;&#125;","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"Swift Method","slug":"Swift-Method","permalink":"https://ifeiyv666.github.io/tags/Swift-Method/"}]},{"title":"SWIFT关键字","slug":"SWIFT关键字","date":"2019-06-06T05:39:18.000Z","updated":"2020-05-25T01:56:41.465Z","comments":true,"path":"2019/06/06/SWIFT关键字/","link":"","permalink":"https://ifeiyv666.github.io/2019/06/06/SWIFT%E5%85%B3%E9%94%AE%E5%AD%97/","excerpt":"","text":"@discardableResult 修饰的方法有返回值，调用时可以不接收返回值，并且不会出现警告⚠️ IBInspectable 属性声明的时候加上 IBInspectable 修饰，Xcode 会自动添加到 Storyboard 中 Attributes inspector 栏目中 typealias 定义了一个类型别名","categories":[{"name":"Swift","slug":"Swift","permalink":"https://ifeiyv666.github.io/categories/Swift/"}],"tags":[{"name":"Swift关键字","slug":"Swift关键字","permalink":"https://ifeiyv666.github.io/tags/Swift%E5%85%B3%E9%94%AE%E5%AD%97/"}]},{"title":"UITableBarController(Objc)","slug":"UITableBarController","date":"2017-04-10T11:23:45.000Z","updated":"2020-04-03T10:36:22.454Z","comments":true,"path":"2017/04/10/UITableBarController/","link":"","permalink":"https://ifeiyv666.github.io/2017/04/10/UITableBarController/","excerpt":"","text":"UITableBarController123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208#import \"AppDelegate.h\"#import \"RootViewController.h\"#import \"ViewController1.h\"#import \"ViewController2.h\"#import \"ViewController3.h\"#import \"ViewController4.h\"#import \"ViewController5.h\"#import \"ViewController6.h\"@interface AppDelegate ()&lt;UITabBarControllerDelegate&gt;@end/** 系统代理的使用： 1.遵守协议 2.设置代理 3.实现代理方法 */@implementation AppDelegate- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; self.window = [[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds]; [self.window setBackgroundColor:[UIColor whiteColor]]; [self createTabBarController]; [self.window makeKeyAndVisible]; return YES;&#125;//创建UITabBarController-(void)createTabBarController&#123;// 初始化UITabBarController UITabBarController *tabBarVc = [[UITabBarController alloc]init]; // 设置代理 tabBarVc.delegate = self; self.window.rootViewController = tabBarVc; // 设置tabBar的背景色// tabBarVc.tabBar.barTintColor = [UIColor yellowColor]; ViewController1 *vc1 = [[ViewController1 alloc]init]; ViewController2 *vc2 = [[ViewController2 alloc]init]; ViewController3 *vc3 = [[ViewController3 alloc]init]; ViewController4 *vc4 = [[ViewController4 alloc]init]; ViewController5 *vc5 = [[ViewController5 alloc]init]; ViewController6 *vc6 = [[ViewController6 alloc]init]; // 系统item样式// UITabBarSystemItemMore,// UITabBarSystemItemFavorites,// UITabBarSystemItemFeatured,// UITabBarSystemItemTopRated,// UITabBarSystemItemRecents,// UITabBarSystemItemContacts,// UITabBarSystemItemHistory,// UITabBarSystemItemBookmarks,// UITabBarSystemItemSearch,// UITabBarSystemItemDownloads,// UITabBarSystemItemMostRecent,// UITabBarSystemItemMostViewed, UITabBarItem *item1 = [[UITabBarItem alloc]initWithTabBarSystemItem:UITabBarSystemItemFavorites tag:11]; vc1.tabBarItem = item1; UITabBarItem *item2 = [[UITabBarItem alloc]initWithTabBarSystemItem:UITabBarSystemItemContacts tag:12]; vc2.tabBarItem = item2; UITabBarItem *item3 = [[UITabBarItem alloc]initWithTabBarSystemItem:UITabBarSystemItemDownloads tag:13]; vc3.tabBarItem = item3; UITabBarItem *item4 = [[UITabBarItem alloc]initWithTabBarSystemItem:UITabBarSystemItemFavorites tag:14]; vc4.tabBarItem = item4; UITabBarItem *item5 = [[UITabBarItem alloc]initWithTabBarSystemItem:UITabBarSystemItemFeatured tag:15]; vc5.tabBarItem = item5; UITabBarItem *item6 = [[UITabBarItem alloc]initWithTabBarSystemItem:UITabBarSystemItemHistory tag:16]; vc6.tabBarItem = item6; // 镂空处颜色 tabBarVc.tabBar.tintColor = [UIColor redColor]; // 透明度 tabBarVc.tabBar.translucent = NO; // 最多只显示5个，多出来的会自动生成一个More，它是一个导航控制器 tabBarVc.viewControllers = @[vc1,vc2,vc3,vc4,vc5,vc6]; // 设置选中哪一个控制器// tabBarVc.selectedIndex = 3; NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults]; NSUInteger index = [defaults integerForKey:@\"index\"]; NSLog(@\"%ld\",index);// 设置选中第index个控制器 tabBarVc.selectedIndex = index; // 排序 [self order];&#125;#pragma mark - #pragma mark UITabBarController delegate-(BOOL)tabBarController:(UITabBarController *)tabBarController shouldSelectViewController:(UIViewController *)viewController&#123; NSLog(@\"将要选中视图控制器\"); if (viewController.tabBarItem.tag == 13) &#123; return NO; &#125;// YES:可以选中// NO:不能选中 return YES;&#125;-(void)tabBarController:(UITabBarController *)tabBarController didSelectViewController:(UIViewController *)viewController&#123; NSLog(@\"已经选中指定的视图控制器\"); NSArray *array = tabBarController.viewControllers; NSLog(@\"array = %@\",array); NSUInteger index = [array indexOfObject:viewController]; // 初始化NSUserDefaults (单例) NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];// 设置index [defaults setInteger:index forKey:@\"index\"];// 同步 [defaults synchronize];&#125;-(void)tabBarController:(UITabBarController *)tabBarController willBeginCustomizingViewControllers:(NSArray *)viewControllers&#123; NSLog(@\"willBeginCustomizingViewControllers\");&#125;-(void)tabBarController:(UITabBarController *)tabBarController willEndCustomizingViewControllers:(NSArray *)viewControllers changed:(BOOL)changed&#123; NSLog(@\"willEndCustomizingViewControllers\");&#125;-(void)tabBarController:(UITabBarController *)tabBarController didEndCustomizingViewControllers:(NSArray *)viewControllers changed:(BOOL)changed&#123; NSLog(@\"didEndCustomizingViewControllers\"); NSMutableArray *array = [NSMutableArray array];// changed用来判断是否交换 if (changed == YES) &#123; for (UIViewController *vc in viewControllers) &#123; [array addObject:vc.title]; &#125; &#125; NSLog(@\"%@\",array); NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults]; [defaults setObject:array forKey:@\"order\"]; [defaults synchronize];&#125;-(void)order&#123; // 获取UITabBarController UITabBarController * tbc = (UITabBarController*)self.window.rootViewController; NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults]; // 取得之前排序的数组 NSMutableArray *titleArray = [defaults objectForKey:@\"order\"]; // 如果排序的数组是nil,返回 if (titleArray == nil) &#123; return; &#125; NSMutableArray *orderArray = [NSMutableArray array]; for (NSString *titler in titleArray) &#123; for (UIViewController *vc in tbc.viewControllers) &#123; if ([titler isEqualToString:vc.title]) &#123; [orderArray addObject:vc]; break; &#125; &#125; &#125; tbc.viewControllers = orderArray;&#125;@end#import \"BaseViewController.h\"@interface BaseViewController ()@end@implementation BaseViewController-(instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil&#123; self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]; if (self) &#123; self.title = NSStringFromClass([self class]); &#125; return self;&#125;- (void)viewDidLoad &#123; [super viewDidLoad];#define Random arc4random()%256/255.0 self.view.backgroundColor = [UIColor colorWithRed:Random green:Random blue:Random alpha:0.9f]; UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(100, 100, 200, 100)]; NSString *name = NSStringFromClass([self class]); label.text = name; [self.view addSubview:label];&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167#import \"AppDelegate.h\"#import \"ViewController1.h\"#import \"ViewController2.h\"#import \"ViewController3.h\"#import \"ViewController4.h\"#import \"ViewController4_1.h\"@interface AppDelegate ()@end@implementation AppDelegate- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; self.window = [[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds]; [self.window setBackgroundColor:[UIColor whiteColor]]; [self createUITabBarController]; [self customTabBar]; [self.window makeKeyAndVisible]; return YES;&#125;//创建UITabBarController-(void)createUITabBarController&#123;// 初始化UITabBarController UITabBarController *tabBarVc = [[UITabBarController alloc]init]; self.window.rootViewController = tabBarVc; ViewController1 *vc1 = [[ViewController1 alloc]init]; ViewController2 *vc2 = [[ViewController2 alloc]init]; ViewController3 *vc3 = [[ViewController3 alloc]init]; ViewController4 *vc4 = [[ViewController4 alloc]init]; UINavigationController *nav = [[UINavigationController alloc]initWithRootViewController:vc4];// 把导航控制器放到分栏控制器中// tabBarVc.viewControllers = @[vc1,vc2,vc3,nav]; // 初始化UITabBarItem// Title：名字// image：图片// tag:标识 UITabBarItem *item1 = [[UITabBarItem alloc]initWithTitle:@\"微信\" image:[UIImage imageNamed:@\"tabbar_mainframe\" ] tag:11]; vc1.tabBarItem = item1; UIImage *image2 = [UIImage imageNamed:@\"tabbar_contactsHL\"];// 对图片进行处理(显示原有尺寸) image2 = [image2 imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];////Title：名称//image：正常状态image//selectedImage:选中状态image(需要对图片进行处理，否则会不显示选中图片) UITabBarItem *item2 = [[UITabBarItem alloc]initWithTitle:@\"通讯录\" image:[UIImage imageNamed:@\"tabbar_contacts\"] selectedImage:image2]; vc2.tabBarItem = item2; UIImage *image3 = [UIImage imageNamed:@\"tabbar_discoverHL\"]; image3 = [image3 imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]; UITabBarItem *item3 = [[UITabBarItem alloc]initWithTitle:@\"朋友圈\" image:[UIImage imageNamed:@\"tabbar_discover\"] selectedImage:image3]; vc3.tabBarItem = item3; item3.badgeValue = @\"99+\"; UIImage *image4 = [UIImage imageNamed:@\"tabbar_meHL\"]; image4 = [image4 imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]; UITabBarItem *item4 = [[UITabBarItem alloc]initWithTitle:@\"我\" image:[UIImage imageNamed:@\"tabbar_me\"] selectedImage:image4]; vc4.tabBarItem = item4; tabBarVc.viewControllers = @[vc1,vc2,vc3,nav];&#125;//设置TabBar-(void)customTabBar&#123;// 获取UITabBarController UITabBarController *tabBarVc = (UITabBarController*)self.window.rootViewController; // 获取UITabBar UITabBar *tabBar = tabBarVc.tabBar; // 设置tabBar样式 tabBar.barStyle = UIBarStyleDefault;// UIBarStyleDefault// UIBarStyleBlack // 设置透明度 tabBar.translucent = YES; // 设置镂空颜色（字体颜色） [tabBar setTintColor:[UIColor colorWithRed:0/255.0 green:176/255.0 blue:15/255.0 alpha:1.0]]; // 设置tabBar背景色 [tabBar setBarTintColor:[UIColor redColor]]; // 设置背景图片（当设置背景图片时，会覆盖背景色） [tabBar setBackgroundImage:[UIImage imageNamed:@\"tabbar_bg\"]]; &#125;@end#import \"BaseViewController.h\"@interface BaseViewController ()@end@implementation BaseViewController-(instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil&#123; self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil]; if (self) &#123; self.title = NSStringFromClass([self class]); &#125; return self;&#125;- (void)viewDidLoad &#123; [super viewDidLoad];#define Random arc4random()%256/255.0 self.view.backgroundColor = [UIColor colorWithRed:Random green:Random blue:Random alpha:0.9f]; UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(100, 100, 200, 100)]; NSString *name = NSStringFromClass([self class]); label.text = name; [self.view addSubview:label];&#125;@end#import \"ViewController4.h\"#import \"ViewController4_1.h\"@interface ViewController4 ()@end@implementation ViewController4- (void)viewDidLoad &#123; [super viewDidLoad]; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(100, 100, 100, 100); button.backgroundColor = [UIColor lightGrayColor]; [button addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button];&#125;-(void)onClick&#123; ViewController4_1 *vc = [[ViewController4_1 alloc]init]; [self.navigationController pushViewController:vc animated:YES]; NSLog(@\"%f\",self.tabBarController.tabBar.frame.size.height);&#125;- (void)didReceiveMemoryWarning &#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UITableBarController","slug":"UITableBarController","permalink":"https://ifeiyv666.github.io/tags/UITableBarController/"}]},{"title":"vim常用命令(Objc)","slug":"vim常用命令","date":"2017-04-08T08:28:37.000Z","updated":"2020-04-03T10:45:32.023Z","comments":true,"path":"2017/04/08/vim常用命令/","link":"","permalink":"https://ifeiyv666.github.io/2017/04/08/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"","text":"vim常用命令12345678910111213141516171819打开语法高亮 :syntax on 关闭语法高亮 :syntax off显示行数 :set nu取消显示行数 :set nonu跳转到某一行 :123 跳转到第一行首 ESC+gg跳转到最后一行 ESC+G全部复制 ggyG 全部删除 ggdG代码对齐 gg=G自动补全 Ctrl + p (编辑模式下)vim 配置文件和自动对齐 .vimrcvim 设置显示文件自动显示颜色 .bash_profile","categories":[{"name":"vim","slug":"vim","permalink":"https://ifeiyv666.github.io/categories/vim/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://ifeiyv666.github.io/tags/vim/"}]},{"title":"UIWebView(Objc)","slug":"UIWebView","date":"2017-04-07T08:28:37.000Z","updated":"2020-04-03T10:43:13.084Z","comments":true,"path":"2017/04/07/UIWebView/","link":"","permalink":"https://ifeiyv666.github.io/2017/04/07/UIWebView/","excerpt":"","text":"UIWebView1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#import \"ViewController.h\"@interface ViewController ()&lt;UIWebViewDelegate&gt;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // 初始化 UIWebView *webView = [[UIWebView alloc]initWithFrame:self.view.bounds];// 设置背景色 webView.backgroundColor = [UIColor redColor]; // 设置代理 webView.delegate = self; // 添加到视图 [self.view addSubview:webView]; // 网址 NSString *path = @\"http://www.baidu.com\";// 封装url,统一资源定位符，将字符串封装成可以识别的网址 NSURL *url = [NSURL URLWithString:path];// 请求类 NSURLRequest *request = [NSURLRequest requestWithURL:url];// 加载请求 [webView loadRequest:request];&#125;#pragma mark - delegate//即将加载-(BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType&#123;// YES:加载网页信息// NO:不回网页信息 NSLog(@\"即将加载\"); return YES;&#125;//已经开始加载-(void)webViewDidStartLoad:(UIWebView *)webView&#123; NSLog(@\"已经开始加载\");&#125;//加载成功-(void)webViewDidFinishLoad:(UIWebView *)webView&#123; NSLog(@\"加载成功\");&#125;-(void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error&#123; NSLog(@\"加载失败\");&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#import \"ViewController.h\"@interface ViewController ()&lt;UITableViewDataSource,UITableViewDelegate&gt;&#123; UITableView *_tableView;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createUITableView];&#125;-(void)createUITableView&#123;// 初始化并设置样式和frame _tableView = [[UITableView alloc]initWithFrame:self.view.bounds style:UITableViewStylePlain];// 设置背景色 _tableView.backgroundColor = [UIColor orangeColor]; // 设置代理 _tableView.dataSource = self; _tableView.delegate = self; [self.view addSubview:_tableView]; // 设置tableView的头视图 UIImageView *headerImageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 200)]; headerImageView.image = [UIImage imageNamed:@\"1.jpg\"]; _tableView.tableHeaderView = headerImageView;// 设置tableView的脚视图 UIImageView *footerImageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 200)]; footerImageView.image = [UIImage imageNamed:@\"2.jpg\"]; _tableView.tableFooterView = footerImageView;&#125;#pragma mark - #pragma mark dataSource//返回多少个分组-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123; return 2;&#125;//返回每组有几行-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; if (section == 0) &#123; return 10; &#125; return 15;&#125;-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; // 1.标识 static NSString *identifier = @\"cellID\"; // 2.从tableView复用池中取cell UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];// 3.如果从复用池中取不到cell,就创建新的 if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier]; &#125; cell.textLabel.text = [NSString stringWithFormat:@\"第%ld组-第%ld行\",indexPath.section,indexPath.row]; return cell;&#125;#pragma mark -#pragma mark delegate////设置头标题-(NSString*)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组头标题\"; &#125; return @\"第二组头标题\";&#125;//设置头标题高度-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;// 默认22 return 40;&#125;//设置分组脚标题-(NSString*)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组脚标题\"; &#125; return @\"第二组脚标题\";&#125;//设置脚标题的高度-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section&#123; return 40;&#125;//返回自定义分组的头标和脚标，会把前面设置的标题覆盖//必须设置头标题或头标题高度，否则本方法不生效-(UIView*)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section&#123; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(0, 0, self.view.frame.size.width, 40); [button setTitle:@\"分组标题\" forState:UIControlStateNormal]; button.backgroundColor = [UIColor purpleColor]; [button addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; return button;&#125;-(void)onClick&#123; NSLog(@\"点点点点点\");&#125;//必须设置脚标题或脚标题高度，否则本方法不生效-(UIView*)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section&#123; UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 40)]; imageView.image = [UIImage imageNamed:@\"6.jpg\"]; return imageView;&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150#import \"ViewController.h\"@interface ViewController ()&lt;UITableViewDelegate,UITableViewDataSource&gt;&#123;// 表格视图 UITableView *_tableView;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createUITableView];// [_tableView performSelector:@selector(reloadData) withObject:nil afterDelay:5];&#125;//创建UITableView-(void)createUITableView&#123; // 初始化UITableView _tableView = [[UITableView alloc]initWithFrame:self.view.bounds style:UITableViewStylePlain];// UITableViewStylePlain, 平铺样式// UITableViewStyleGrouped 分组样式 // 背景色 _tableView.backgroundColor = [UIColor orangeColor]; // 设置数据源代理 _tableView.dataSource = self;// 设置代理 _tableView.delegate = self; [self.view addSubview:_tableView];&#125;#pragma mark -#pragma mark dataSource//返回多少个分组-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123; NSLog(@\"numberOfSectionsInTableView\"); return 2;&#125;//每组有多少行-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; NSLog(@\"numberOfRowsInSection\"); if (section == 0) &#123; return 10; &#125; return 20; &#125;-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;// NSLog(@\"cellForRowAtIndexPath\");// indexPath// 表示当cell在表格视图中的位置// indexPath.section 代表的是cell所在的分组// indexPath.row 代表的是cell所在分组的行的位置 // 1.表格的标识 static NSString *identifier = @\"cellID\"; // 2.按照标识从tableView复用池中取cell UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];// 3.如果在复用池中找不以Cell,就创建新的Cell if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];// UITableViewCellStyleDefault,// UITableViewCellStyleValue1,// UITableViewCellStyleValue2,// UITableViewCellStyleSubtitle &#125;// 设置展示标题 cell.textLabel.text = [NSString stringWithFormat:@\"第%ld组\",indexPath.section];// 设置展示详细标题 cell.detailTextLabel.text = [NSString stringWithFormat:@\"第%ld行\",indexPath.row];// 设置展示图片 cell.imageView.image = [UIImage imageNamed:@\"1\"]; // 附件按钮类型 cell.accessoryType = UITableViewCellAccessoryDetailButton; // UITableViewCellAccessoryNone, 无样式// UITableViewCellAccessoryDisclosureIndicator箭头//UITableViewCellAccessoryDetailDisclosureButton 箭头+信息按钮// UITableViewCellAccessoryCheckmark,对勾// UITableViewCellAccessoryDetailButton 信息按钮 //=============================================// UIView *accessView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 40, 40)];// accessView.backgroundColor = [UIColor blackColor];//// 设置自定义的附件视图// cell.accessoryView = accessView;//============================================= // 选中样式 cell.selectionStyle = UITableViewCellSelectionStyleDefault;// UITableViewCellSelectionStyleNone,// UITableViewCellSelectionStyleBlue,// UITableViewCellSelectionStyleGray,// UITableViewCellSelectionStyleDefault // 设置选中背景View UIView *BackgroundView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 50, 50)]; BackgroundView.backgroundColor = [UIColor clearColor]; cell.selectedBackgroundView = BackgroundView; // UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 44)];// imageView.image = [UIImage imageNamed:@\"1\"];// cell.selectedBackgroundView = imageView; return cell;&#125;#pragma mark -#pragma mark delegate-(void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath&#123; NSLog(@\"点击了附件按钮\");&#125;//设置行高-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;// 默认行高 44 return 80;&#125;//设置分组的头标题-(NSString*)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组组标题\"; &#125; return @\"第二组组标题\";&#125;//设置脚标题-(NSString*)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组脚标\"; &#125; return @\"第二组脚标\";&#125;//组头的高度-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;// 默认高度是22 return 40;&#125;//组尾的高度-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section&#123;// 默认高度是22 return 40;&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165#import \"ViewController.h\"@interface ViewController ()&lt;UITableViewDataSource,UITableViewDelegate&gt;&#123; UITableView *_tableView; NSMutableArray *_dataArray;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createUITableView]; [self createDataArray]; self.navigationItem.rightBarButtonItem = self.editButtonItem;&#125;//编辑按钮触发的方法-(void)setEditing:(BOOL)editing animated:(BOOL)animated&#123; NSLog(@\"%d\",editing);// 重新调用父类的方法，处于Done字样时，editing=YES,处于Edit样式时，editing = NO. [super setEditing:editing animated:YES]; // 设置tableView的可编辑性 [_tableView setEditing:editing animated:YES];&#125;-(void)createUITableView&#123;// 初始化UITableView 设置样式和frame _tableView = [[UITableView alloc]initWithFrame:self.view.bounds style:UITableViewStylePlain];// 设置背景色 _tableView.backgroundColor = [UIColor orangeColor];// 设置代理 _tableView.dataSource = self; _tableView.delegate = self;// 添加到视图 [self.view addSubview:_tableView];&#125;-(void)createDataArray&#123; _dataArray = [NSMutableArray array]; // 数据源中要添加两组数据：删除的、增加的 NSMutableArray *deleteArray = [NSMutableArray array]; for (int i = 0 ; i &lt; 10; i ++) &#123; NSString *deleteStr = [NSString stringWithFormat:@\"被删除的第%d行\",i]; [deleteArray addObject:deleteStr]; &#125; NSMutableArray *insertArray = [NSMutableArray array]; for (int i = 0 ; i &lt; 10; i ++) &#123; NSString *insertStr = [NSString stringWithFormat:@\"增加的第%d行\",i]; [insertArray addObject:insertStr]; &#125; [_dataArray addObject:deleteArray]; [_dataArray addObject:insertArray]; NSLog(@\"%@\",_dataArray);&#125;#pragma mark -#pragma mark dataSource//返回有多少组-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123; return _dataArray.count;&#125;//每组有多少行-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; NSMutableArray *array = [_dataArray objectAtIndex:section]; return array.count;&#125;-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;// 1.定义标识 static NSString *identifier = @\"cellID\";// 2.从tableView复用池中取cell UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];// 3.如果取不到cell,就创建新的cell if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier]; &#125; // cell.textLabel.text = _dataArray[indexPath.section][indexPath.row]; // 赋值 cell.textLabel.text = [[_dataArray objectAtIndex:indexPath.section]objectAtIndex:indexPath.row]; return cell;&#125;#pragma mark -#pragma mark delegate//选中了哪一行-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath&#123;// NSLog(@\"选中了哪一行\"); NSLog(@\"第%ld组-第%ld行\",indexPath.section,indexPath.row);&#125;//反选-(void)tableView:(UITableView *)tableView didDeselectRowAtIndexPath:(NSIndexPath *)indexPath&#123;// NSLog(@\"didDeselectRowAtIndexPath\"); NSLog(@\"----第%ld组-第%ld行\",indexPath.section,indexPath.row);&#125;//设置tableView 的编辑状态-(UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath&#123; // UITableViewCellEditingStyleNone,无效果// UITableViewCellEditingStyleDelete,删除// UITableViewCellEditingStyleInsert 增加 if (indexPath.section == 0) &#123; return UITableViewCellEditingStyleDelete; &#125;else&#123; return UITableViewCellEditingStyleInsert; &#125;&#125;-(void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath&#123; if (editingStyle == UITableViewCellEditingStyleDelete) &#123;// 删除当前对应行的数据源 [[_dataArray objectAtIndex:indexPath.section]removeObjectAtIndex:indexPath.row]; // [tableView reloadData];// 刷新表 [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone]; &#125;else&#123; NSString *insertStr = @\"我是新来的\";// 数据源添加新数据 [[_dataArray objectAtIndex:indexPath.section] insertObject:insertStr atIndex:indexPath.row];// 刷表// [tableView reloadData]; [tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone]; &#125;&#125;//是否允许某一行被编辑-(BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath&#123;// if (indexPath.row % 2 == 0) &#123;// return YES;// &#125;// return NO; return YES;&#125;//移动要实现的方法-(void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath&#123;// sourceIndexPath 将要移动的cell的位置信息// destinationIndexPath 目的位置信息 // 根据sourceIndexPath.section来获得第section组的数据 NSMutableArray *sourceArray = _dataArray[sourceIndexPath.section];// 取出要移动cell所在行的数据 NSString *sourceStr = sourceArray[sourceIndexPath.row];// 删除要移动cell所在行的数据 [sourceArray removeObjectAtIndex:sourceIndexPath.row]; // 根据destinationIndexPath.section来获取要插入的数组 NSMutableArray *destinationArray = _dataArray[destinationIndexPath.section]; [destinationArray insertObject:sourceStr atIndex:destinationIndexPath.row];&#125;//能否移动-(BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath&#123; if (indexPath.section == 0) &#123; return NO; &#125; return YES;&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIWebView","slug":"UIWebView","permalink":"https://ifeiyv666.github.io/tags/UIWebView/"}]},{"title":"UISwitch(Objc)","slug":"UISwitch","date":"2017-04-06T10:42:27.000Z","updated":"2020-04-03T10:34:41.928Z","comments":true,"path":"2017/04/06/UISwitch/","link":"","permalink":"https://ifeiyv666.github.io/2017/04/06/UISwitch/","excerpt":"","text":"UISwitch12345678910111213141516171819202122232425262728293031323334353637383940414243#import \"ViewController.h\"@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad];// 初始化并设置frame UIStepper *stepper = [[UIStepper alloc]initWithFrame:CGRectMake(100, 100, 100, 100)];// 最小值 stepper.minimumValue = 0; // 最大值 stepper.maximumValue = 10;// 设置当前值 stepper.value = 4;// 设置每次+2或-2，默认是1 stepper.stepValue = 2; // 设置颜色 [stepper setTintColor:[UIColor orangeColor]];// 添加事件 [stepper addTarget:self action:@selector(valueChange:) forControlEvents:UIControlEventValueChanged]; // 处理事件是否一直回调，默认是YES stepper.continuous = YES; // 设置能否重复操作，默认是YES stepper.autorepeat = YES; // 设置是否能循环，默认是NO stepper.wraps = YES; [self.view addSubview:stepper];&#125;-(void)valueChange:(UIStepper*)stepper&#123; NSLog(@\"%lf\",stepper.value);&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UISwitch","slug":"UISwitch","permalink":"https://ifeiyv666.github.io/tags/UISwitch/"}]},{"title":"UIView传统动画方式(Objc)","slug":"UIViewAnimation","date":"2017-04-05T07:28:37.000Z","updated":"2020-04-03T10:41:05.673Z","comments":true,"path":"2017/04/05/UIViewAnimation/","link":"","permalink":"https://ifeiyv666.github.io/2017/04/05/UIViewAnimation/","excerpt":"","text":"UIView传统动画方式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#import \"RootViewController.h\"@interface RootViewController ()@end@implementation RootViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // [self createUIView]; [self creatBlockAnimation];&#125;#pragma mark -#pragma mark UIView的Block动画-(void)creatBlockAnimation&#123; UIView *myView = [[UIView alloc]initWithFrame:CGRectMake(50, 50, 100, 100)]; myView.backgroundColor = [UIColor lightGrayColor]; myView.tag = 10; [self.view addSubview:myView]; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(200, 50, 100, 100); button.backgroundColor = [UIColor lightGrayColor]; [button setTitle:@\"开始\" forState:UIControlStateNormal]; [button addTarget:self action:@selector(blockAnimation) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button];&#125;-(void)blockAnimation&#123; UIView *myView = [self.view viewWithTag:10];// Duration：动画持续时间// block:你想要的操作// [UIView animateWithDuration:1 animations:^&#123;// myView.frame = CGRectMake(50, 200, 50, 50);// &#125;]; //Duration:动画持续时间//animations：你想要的操作//completion：动画结束后的操作 [UIView animateWithDuration:1 animations:^&#123; myView.frame = CGRectMake(50, 200, 50, 50); &#125; completion:^(BOOL finished) &#123; NSLog(@\"动画结束\"); &#125;]; &#125;#pragma mark - #pragma mark 传统的UIView动画-(void)createUIView&#123; UIView *myView = [[UIView alloc]initWithFrame:CGRectMake(50, 50, 100, 100)]; myView.backgroundColor = [UIColor yellowColor]; myView.tag = 10; [self.view addSubview:myView]; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(200, 50, 100, 100); button.backgroundColor = [UIColor lightGrayColor]; [button setTitle:@\"开始\" forState:UIControlStateNormal]; [button addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button];&#125;-(void)onClick&#123; UIView *myView = [self.view viewWithTag:10]; // 开始动画，第一个参数是动画名称，第二个传nil [UIView beginAnimations:@\"animation\" context:nil];// 设置动画代理 [UIView setAnimationDelegate:self];// 设置动画延迟时间 [UIView setAnimationDelay:1];// 设置动画持续时间 [UIView setAnimationDuration:2]; //设置动画的线性表现 /* UIViewAnimationCurveEaseInOut 在开头和结尾都减速处理 UIViewAnimationCurveEaseIn 在开头做减速处理 UIViewAnimationCurveEaseOut 在结尾做减速处理 UIViewAnimationCurveLinear 这个应该是均分的处理 */ [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];// 设置动画的重复次数 [UIView setAnimationRepeatCount:2]; [UIView setAnimationRepeatAutoreverses:YES];// 动画将要开始时调用的方法 [UIView setAnimationWillStartSelector:@selector(animationWillStart)];// 动画已经结束时调用的方法 [UIView setAnimationDidStopSelector:@selector(animationDidStop)]; myView.frame = CGRectMake(50, 200, 100, 100); // 提交动画 [UIView commitAnimations];&#125;-(void)animationWillStart&#123; NSLog(@\"动画将要开始\");&#125;-(void)animationDidStop&#123; NSLog(@\"动画已经结束\");&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#import \"ViewController.h\"@interface ViewController ()&lt;UITableViewDataSource,UITableViewDelegate&gt;&#123; UITableView *_tableView;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createUITableView];&#125;-(void)createUITableView&#123;// 初始化并设置样式和frame _tableView = [[UITableView alloc]initWithFrame:self.view.bounds style:UITableViewStylePlain];// 设置背景色 _tableView.backgroundColor = [UIColor orangeColor]; // 设置代理 _tableView.dataSource = self; _tableView.delegate = self; [self.view addSubview:_tableView]; // 设置tableView的头视图 UIImageView *headerImageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 200)]; headerImageView.image = [UIImage imageNamed:@\"1.jpg\"]; _tableView.tableHeaderView = headerImageView;// 设置tableView的脚视图 UIImageView *footerImageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 200)]; footerImageView.image = [UIImage imageNamed:@\"2.jpg\"]; _tableView.tableFooterView = footerImageView;&#125;#pragma mark - #pragma mark dataSource//返回多少个分组-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123; return 2;&#125;//返回每组有几行-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; if (section == 0) &#123; return 10; &#125; return 15;&#125;-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; // 1.标识 static NSString *identifier = @\"cellID\"; // 2.从tableView复用池中取cell UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];// 3.如果从复用池中取不到cell,就创建新的 if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier]; &#125; cell.textLabel.text = [NSString stringWithFormat:@\"第%ld组-第%ld行\",indexPath.section,indexPath.row]; return cell;&#125;#pragma mark -#pragma mark delegate////设置头标题-(NSString*)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组头标题\"; &#125; return @\"第二组头标题\";&#125;//设置头标题高度-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;// 默认22 return 40;&#125;//设置分组脚标题-(NSString*)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组脚标题\"; &#125; return @\"第二组脚标题\";&#125;//设置脚标题的高度-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section&#123; return 40;&#125;//返回自定义分组的头标和脚标，会把前面设置的标题覆盖//必须设置头标题或头标题高度，否则本方法不生效-(UIView*)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section&#123; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(0, 0, self.view.frame.size.width, 40); [button setTitle:@\"分组标题\" forState:UIControlStateNormal]; button.backgroundColor = [UIColor purpleColor]; [button addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; return button;&#125;-(void)onClick&#123; NSLog(@\"点点点点点\");&#125;//必须设置脚标题或脚标题高度，否则本方法不生效-(UIView*)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section&#123; UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 40)]; imageView.image = [UIImage imageNamed:@\"6.jpg\"]; return imageView;&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150#import \"ViewController.h\"@interface ViewController ()&lt;UITableViewDelegate,UITableViewDataSource&gt;&#123;// 表格视图 UITableView *_tableView;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createUITableView];// [_tableView performSelector:@selector(reloadData) withObject:nil afterDelay:5];&#125;//创建UITableView-(void)createUITableView&#123; // 初始化UITableView _tableView = [[UITableView alloc]initWithFrame:self.view.bounds style:UITableViewStylePlain];// UITableViewStylePlain, 平铺样式// UITableViewStyleGrouped 分组样式 // 背景色 _tableView.backgroundColor = [UIColor orangeColor]; // 设置数据源代理 _tableView.dataSource = self;// 设置代理 _tableView.delegate = self; [self.view addSubview:_tableView];&#125;#pragma mark -#pragma mark dataSource//返回多少个分组-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123; NSLog(@\"numberOfSectionsInTableView\"); return 2;&#125;//每组有多少行-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; NSLog(@\"numberOfRowsInSection\"); if (section == 0) &#123; return 10; &#125; return 20; &#125;-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;// NSLog(@\"cellForRowAtIndexPath\");// indexPath// 表示当cell在表格视图中的位置// indexPath.section 代表的是cell所在的分组// indexPath.row 代表的是cell所在分组的行的位置 // 1.表格的标识 static NSString *identifier = @\"cellID\"; // 2.按照标识从tableView复用池中取cell UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];// 3.如果在复用池中找不以Cell,就创建新的Cell if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];// UITableViewCellStyleDefault,// UITableViewCellStyleValue1,// UITableViewCellStyleValue2,// UITableViewCellStyleSubtitle &#125;// 设置展示标题 cell.textLabel.text = [NSString stringWithFormat:@\"第%ld组\",indexPath.section];// 设置展示详细标题 cell.detailTextLabel.text = [NSString stringWithFormat:@\"第%ld行\",indexPath.row];// 设置展示图片 cell.imageView.image = [UIImage imageNamed:@\"1\"]; // 附件按钮类型 cell.accessoryType = UITableViewCellAccessoryDetailButton; // UITableViewCellAccessoryNone, 无样式// UITableViewCellAccessoryDisclosureIndicator箭头//UITableViewCellAccessoryDetailDisclosureButton 箭头+信息按钮// UITableViewCellAccessoryCheckmark,对勾// UITableViewCellAccessoryDetailButton 信息按钮 //=============================================// UIView *accessView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 40, 40)];// accessView.backgroundColor = [UIColor blackColor];//// 设置自定义的附件视图// cell.accessoryView = accessView;//============================================= // 选中样式 cell.selectionStyle = UITableViewCellSelectionStyleDefault;// UITableViewCellSelectionStyleNone,// UITableViewCellSelectionStyleBlue,// UITableViewCellSelectionStyleGray,// UITableViewCellSelectionStyleDefault // 设置选中背景View UIView *BackgroundView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 50, 50)]; BackgroundView.backgroundColor = [UIColor clearColor]; cell.selectedBackgroundView = BackgroundView; // UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 44)];// imageView.image = [UIImage imageNamed:@\"1\"];// cell.selectedBackgroundView = imageView; return cell;&#125;#pragma mark -#pragma mark delegate-(void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath&#123; NSLog(@\"点击了附件按钮\");&#125;//设置行高-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;// 默认行高 44 return 80;&#125;//设置分组的头标题-(NSString*)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组组标题\"; &#125; return @\"第二组组标题\";&#125;//设置脚标题-(NSString*)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组脚标\"; &#125; return @\"第二组脚标\";&#125;//组头的高度-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;// 默认高度是22 return 40;&#125;//组尾的高度-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section&#123;// 默认高度是22 return 40;&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165#import \"ViewController.h\"@interface ViewController ()&lt;UITableViewDataSource,UITableViewDelegate&gt;&#123; UITableView *_tableView; NSMutableArray *_dataArray;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createUITableView]; [self createDataArray]; self.navigationItem.rightBarButtonItem = self.editButtonItem;&#125;//编辑按钮触发的方法-(void)setEditing:(BOOL)editing animated:(BOOL)animated&#123; NSLog(@\"%d\",editing);// 重新调用父类的方法，处于Done字样时，editing=YES,处于Edit样式时，editing = NO. [super setEditing:editing animated:YES]; // 设置tableView的可编辑性 [_tableView setEditing:editing animated:YES];&#125;-(void)createUITableView&#123;// 初始化UITableView 设置样式和frame _tableView = [[UITableView alloc]initWithFrame:self.view.bounds style:UITableViewStylePlain];// 设置背景色 _tableView.backgroundColor = [UIColor orangeColor];// 设置代理 _tableView.dataSource = self; _tableView.delegate = self;// 添加到视图 [self.view addSubview:_tableView];&#125;-(void)createDataArray&#123; _dataArray = [NSMutableArray array]; // 数据源中要添加两组数据：删除的、增加的 NSMutableArray *deleteArray = [NSMutableArray array]; for (int i = 0 ; i &lt; 10; i ++) &#123; NSString *deleteStr = [NSString stringWithFormat:@\"被删除的第%d行\",i]; [deleteArray addObject:deleteStr]; &#125; NSMutableArray *insertArray = [NSMutableArray array]; for (int i = 0 ; i &lt; 10; i ++) &#123; NSString *insertStr = [NSString stringWithFormat:@\"增加的第%d行\",i]; [insertArray addObject:insertStr]; &#125; [_dataArray addObject:deleteArray]; [_dataArray addObject:insertArray]; NSLog(@\"%@\",_dataArray);&#125;#pragma mark -#pragma mark dataSource//返回有多少组-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123; return _dataArray.count;&#125;//每组有多少行-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; NSMutableArray *array = [_dataArray objectAtIndex:section]; return array.count;&#125;-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;// 1.定义标识 static NSString *identifier = @\"cellID\";// 2.从tableView复用池中取cell UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];// 3.如果取不到cell,就创建新的cell if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier]; &#125; // cell.textLabel.text = _dataArray[indexPath.section][indexPath.row]; // 赋值 cell.textLabel.text = [[_dataArray objectAtIndex:indexPath.section]objectAtIndex:indexPath.row]; return cell;&#125;#pragma mark -#pragma mark delegate//选中了哪一行-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath&#123;// NSLog(@\"选中了哪一行\"); NSLog(@\"第%ld组-第%ld行\",indexPath.section,indexPath.row);&#125;//反选-(void)tableView:(UITableView *)tableView didDeselectRowAtIndexPath:(NSIndexPath *)indexPath&#123;// NSLog(@\"didDeselectRowAtIndexPath\"); NSLog(@\"----第%ld组-第%ld行\",indexPath.section,indexPath.row);&#125;//设置tableView 的编辑状态-(UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath&#123; // UITableViewCellEditingStyleNone,无效果// UITableViewCellEditingStyleDelete,删除// UITableViewCellEditingStyleInsert 增加 if (indexPath.section == 0) &#123; return UITableViewCellEditingStyleDelete; &#125;else&#123; return UITableViewCellEditingStyleInsert; &#125;&#125;-(void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath&#123; if (editingStyle == UITableViewCellEditingStyleDelete) &#123;// 删除当前对应行的数据源 [[_dataArray objectAtIndex:indexPath.section]removeObjectAtIndex:indexPath.row]; // [tableView reloadData];// 刷新表 [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone]; &#125;else&#123; NSString *insertStr = @\"我是新来的\";// 数据源添加新数据 [[_dataArray objectAtIndex:indexPath.section] insertObject:insertStr atIndex:indexPath.row];// 刷表// [tableView reloadData]; [tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone]; &#125;&#125;//是否允许某一行被编辑-(BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath&#123;// if (indexPath.row % 2 == 0) &#123;// return YES;// &#125;// return NO; return YES;&#125;//移动要实现的方法-(void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath&#123;// sourceIndexPath 将要移动的cell的位置信息// destinationIndexPath 目的位置信息 // 根据sourceIndexPath.section来获得第section组的数据 NSMutableArray *sourceArray = _dataArray[sourceIndexPath.section];// 取出要移动cell所在行的数据 NSString *sourceStr = sourceArray[sourceIndexPath.row];// 删除要移动cell所在行的数据 [sourceArray removeObjectAtIndex:sourceIndexPath.row]; // 根据destinationIndexPath.section来获取要插入的数组 NSMutableArray *destinationArray = _dataArray[destinationIndexPath.section]; [destinationArray insertObject:sourceStr atIndex:destinationIndexPath.row];&#125;//能否移动-(BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath&#123; if (indexPath.section == 0) &#123; return NO; &#125; return YES;&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIView Animation","slug":"UIView-Animation","permalink":"https://ifeiyv666.github.io/tags/UIView-Animation/"}]},{"title":"UITableView(Objc)","slug":"UITableView","date":"2017-04-01T04:22:22.000Z","updated":"2020-04-03T10:39:20.260Z","comments":true,"path":"2017/04/01/UITableView/","link":"","permalink":"https://ifeiyv666.github.io/2017/04/01/UITableView/","excerpt":"","text":"UITableView1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#import \"ViewController.h\"@interface ViewController ()&lt;UITableViewDataSource,UITableViewDelegate&gt;//遵守协议&#123;// 表格视图 UITableView *_tableView; &#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createUITableView];&#125;//创建UITableView-(void)createUITableView&#123; // UITableViewStylePlain,// UITableViewStyleGrouped _tableView = [[UITableView alloc]initWithFrame:self.view.bounds style:UITableViewStylePlain]; // dataSource处理数据源相关 _tableView.dataSource = self;// delegate处理移动、点击等 _tableView.delegate = self; // 设置背景色 _tableView.backgroundColor = [UIColor orangeColor]; // 设置分隔线颜色 _tableView.separatorColor = [UIColor blueColor]; [self.view addSubview:_tableView]; &#125;#pragma mark -#pragma mark dataSource delegate//返回有多少个分组//如果不实现该方法，就返回一组（默认是1）//这个不是必须要实现的-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123; return 1;&#125;//每组有多少行//必须实现-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; return 20;&#125;//表格视图的信息//必须实现-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; // 1.表格的标识 static NSString *identifier = @\"cellID\";// 2.按照标识在tableView的复用池中查找Cell UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier]; /* 复用池的作用： 当UITableViewCell滑出屏幕时，不会被销毁，而是放到tableView的复用池中。 当新的Cell要出现在屏幕上时，先在复用池中查看有没有相同标识的Cell，如果有，就直接刷新数据使用。如果没有，就创建新的 假如一个界面上有多个UITableView，每个tableView有自己的复用池 */// 3.如果复用池中找不到Cell，就自己创建 if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier]; static int a = 0; NSLog(@\"%d\",a++); &#125; // 给cell赋值 cell.textLabel.text = @\"cell\"; // 4.返回cell return cell;&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#import \"ViewController.h\"@interface ViewController ()&lt;UITableViewDataSource,UITableViewDelegate&gt;&#123; UITableView *_tableView;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createUITableView];&#125;-(void)createUITableView&#123;// 初始化并设置样式和frame _tableView = [[UITableView alloc]initWithFrame:self.view.bounds style:UITableViewStylePlain];// 设置背景色 _tableView.backgroundColor = [UIColor orangeColor]; // 设置代理 _tableView.dataSource = self; _tableView.delegate = self; [self.view addSubview:_tableView]; // 设置tableView的头视图 UIImageView *headerImageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 200)]; headerImageView.image = [UIImage imageNamed:@\"1.jpg\"]; _tableView.tableHeaderView = headerImageView;// 设置tableView的脚视图 UIImageView *footerImageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 200)]; footerImageView.image = [UIImage imageNamed:@\"2.jpg\"]; _tableView.tableFooterView = footerImageView;&#125;#pragma mark - #pragma mark dataSource//返回多少个分组-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123; return 2;&#125;//返回每组有几行-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; if (section == 0) &#123; return 10; &#125; return 15;&#125;-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123; // 1.标识 static NSString *identifier = @\"cellID\"; // 2.从tableView复用池中取cell UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];// 3.如果从复用池中取不到cell,就创建新的 if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier]; &#125; cell.textLabel.text = [NSString stringWithFormat:@\"第%ld组-第%ld行\",indexPath.section,indexPath.row]; return cell;&#125;#pragma mark -#pragma mark delegate////设置头标题-(NSString*)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组头标题\"; &#125; return @\"第二组头标题\";&#125;//设置头标题高度-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;// 默认22 return 40;&#125;//设置分组脚标题-(NSString*)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组脚标题\"; &#125; return @\"第二组脚标题\";&#125;//设置脚标题的高度-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section&#123; return 40;&#125;//返回自定义分组的头标和脚标，会把前面设置的标题覆盖//必须设置头标题或头标题高度，否则本方法不生效-(UIView*)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section&#123; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(0, 0, self.view.frame.size.width, 40); [button setTitle:@\"分组标题\" forState:UIControlStateNormal]; button.backgroundColor = [UIColor purpleColor]; [button addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; return button;&#125;-(void)onClick&#123; NSLog(@\"点点点点点\");&#125;//必须设置脚标题或脚标题高度，否则本方法不生效-(UIView*)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section&#123; UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 40)]; imageView.image = [UIImage imageNamed:@\"6.jpg\"]; return imageView;&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150#import \"ViewController.h\"@interface ViewController ()&lt;UITableViewDelegate,UITableViewDataSource&gt;&#123;// 表格视图 UITableView *_tableView;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createUITableView];// [_tableView performSelector:@selector(reloadData) withObject:nil afterDelay:5];&#125;//创建UITableView-(void)createUITableView&#123; // 初始化UITableView _tableView = [[UITableView alloc]initWithFrame:self.view.bounds style:UITableViewStylePlain];// UITableViewStylePlain, 平铺样式// UITableViewStyleGrouped 分组样式 // 背景色 _tableView.backgroundColor = [UIColor orangeColor]; // 设置数据源代理 _tableView.dataSource = self;// 设置代理 _tableView.delegate = self; [self.view addSubview:_tableView];&#125;#pragma mark -#pragma mark dataSource//返回多少个分组-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123; NSLog(@\"numberOfSectionsInTableView\"); return 2;&#125;//每组有多少行-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; NSLog(@\"numberOfRowsInSection\"); if (section == 0) &#123; return 10; &#125; return 20; &#125;-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;// NSLog(@\"cellForRowAtIndexPath\");// indexPath// 表示当cell在表格视图中的位置// indexPath.section 代表的是cell所在的分组// indexPath.row 代表的是cell所在分组的行的位置 // 1.表格的标识 static NSString *identifier = @\"cellID\"; // 2.按照标识从tableView复用池中取cell UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];// 3.如果在复用池中找不以Cell,就创建新的Cell if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier];// UITableViewCellStyleDefault,// UITableViewCellStyleValue1,// UITableViewCellStyleValue2,// UITableViewCellStyleSubtitle &#125;// 设置展示标题 cell.textLabel.text = [NSString stringWithFormat:@\"第%ld组\",indexPath.section];// 设置展示详细标题 cell.detailTextLabel.text = [NSString stringWithFormat:@\"第%ld行\",indexPath.row];// 设置展示图片 cell.imageView.image = [UIImage imageNamed:@\"1\"]; // 附件按钮类型 cell.accessoryType = UITableViewCellAccessoryDetailButton; // UITableViewCellAccessoryNone, 无样式// UITableViewCellAccessoryDisclosureIndicator箭头//UITableViewCellAccessoryDetailDisclosureButton 箭头+信息按钮// UITableViewCellAccessoryCheckmark,对勾// UITableViewCellAccessoryDetailButton 信息按钮 //=============================================// UIView *accessView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 40, 40)];// accessView.backgroundColor = [UIColor blackColor];//// 设置自定义的附件视图// cell.accessoryView = accessView;//============================================= // 选中样式 cell.selectionStyle = UITableViewCellSelectionStyleDefault;// UITableViewCellSelectionStyleNone,// UITableViewCellSelectionStyleBlue,// UITableViewCellSelectionStyleGray,// UITableViewCellSelectionStyleDefault // 设置选中背景View UIView *BackgroundView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 50, 50)]; BackgroundView.backgroundColor = [UIColor clearColor]; cell.selectedBackgroundView = BackgroundView; // UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 44)];// imageView.image = [UIImage imageNamed:@\"1\"];// cell.selectedBackgroundView = imageView; return cell;&#125;#pragma mark -#pragma mark delegate-(void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath&#123; NSLog(@\"点击了附件按钮\");&#125;//设置行高-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath&#123;// 默认行高 44 return 80;&#125;//设置分组的头标题-(NSString*)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组组标题\"; &#125; return @\"第二组组标题\";&#125;//设置脚标题-(NSString*)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section&#123; if (section == 0) &#123; return @\"第一组脚标\"; &#125; return @\"第二组脚标\";&#125;//组头的高度-(CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section&#123;// 默认高度是22 return 40;&#125;//组尾的高度-(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section&#123;// 默认高度是22 return 40;&#125;@end 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165#import \"ViewController.h\"@interface ViewController ()&lt;UITableViewDataSource,UITableViewDelegate&gt;&#123; UITableView *_tableView; NSMutableArray *_dataArray;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createUITableView]; [self createDataArray]; self.navigationItem.rightBarButtonItem = self.editButtonItem;&#125;//编辑按钮触发的方法-(void)setEditing:(BOOL)editing animated:(BOOL)animated&#123; NSLog(@\"%d\",editing);// 重新调用父类的方法，处于Done字样时，editing=YES,处于Edit样式时，editing = NO. [super setEditing:editing animated:YES]; // 设置tableView的可编辑性 [_tableView setEditing:editing animated:YES];&#125;-(void)createUITableView&#123;// 初始化UITableView 设置样式和frame _tableView = [[UITableView alloc]initWithFrame:self.view.bounds style:UITableViewStylePlain];// 设置背景色 _tableView.backgroundColor = [UIColor orangeColor];// 设置代理 _tableView.dataSource = self; _tableView.delegate = self;// 添加到视图 [self.view addSubview:_tableView];&#125;-(void)createDataArray&#123; _dataArray = [NSMutableArray array]; // 数据源中要添加两组数据：删除的、增加的 NSMutableArray *deleteArray = [NSMutableArray array]; for (int i = 0 ; i &lt; 10; i ++) &#123; NSString *deleteStr = [NSString stringWithFormat:@\"被删除的第%d行\",i]; [deleteArray addObject:deleteStr]; &#125; NSMutableArray *insertArray = [NSMutableArray array]; for (int i = 0 ; i &lt; 10; i ++) &#123; NSString *insertStr = [NSString stringWithFormat:@\"增加的第%d行\",i]; [insertArray addObject:insertStr]; &#125; [_dataArray addObject:deleteArray]; [_dataArray addObject:insertArray]; NSLog(@\"%@\",_dataArray);&#125;#pragma mark -#pragma mark dataSource//返回有多少组-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView&#123; return _dataArray.count;&#125;//每组有多少行-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section&#123; NSMutableArray *array = [_dataArray objectAtIndex:section]; return array.count;&#125;-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;// 1.定义标识 static NSString *identifier = @\"cellID\";// 2.从tableView复用池中取cell UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:identifier];// 3.如果取不到cell,就创建新的cell if (cell == nil) &#123; cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identifier]; &#125; // cell.textLabel.text = _dataArray[indexPath.section][indexPath.row]; // 赋值 cell.textLabel.text = [[_dataArray objectAtIndex:indexPath.section]objectAtIndex:indexPath.row]; return cell;&#125;#pragma mark -#pragma mark delegate//选中了哪一行-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath&#123;// NSLog(@\"选中了哪一行\"); NSLog(@\"第%ld组-第%ld行\",indexPath.section,indexPath.row);&#125;//反选-(void)tableView:(UITableView *)tableView didDeselectRowAtIndexPath:(NSIndexPath *)indexPath&#123;// NSLog(@\"didDeselectRowAtIndexPath\"); NSLog(@\"----第%ld组-第%ld行\",indexPath.section,indexPath.row);&#125;//设置tableView 的编辑状态-(UITableViewCellEditingStyle)tableView:(UITableView *)tableView editingStyleForRowAtIndexPath:(NSIndexPath *)indexPath&#123; // UITableViewCellEditingStyleNone,无效果// UITableViewCellEditingStyleDelete,删除// UITableViewCellEditingStyleInsert 增加 if (indexPath.section == 0) &#123; return UITableViewCellEditingStyleDelete; &#125;else&#123; return UITableViewCellEditingStyleInsert; &#125;&#125;-(void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath&#123; if (editingStyle == UITableViewCellEditingStyleDelete) &#123;// 删除当前对应行的数据源 [[_dataArray objectAtIndex:indexPath.section]removeObjectAtIndex:indexPath.row]; // [tableView reloadData];// 刷新表 [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone]; &#125;else&#123; NSString *insertStr = @\"我是新来的\";// 数据源添加新数据 [[_dataArray objectAtIndex:indexPath.section] insertObject:insertStr atIndex:indexPath.row];// 刷表// [tableView reloadData]; [tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone]; &#125;&#125;//是否允许某一行被编辑-(BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath&#123;// if (indexPath.row % 2 == 0) &#123;// return YES;// &#125;// return NO; return YES;&#125;//移动要实现的方法-(void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)sourceIndexPath toIndexPath:(NSIndexPath *)destinationIndexPath&#123;// sourceIndexPath 将要移动的cell的位置信息// destinationIndexPath 目的位置信息 // 根据sourceIndexPath.section来获得第section组的数据 NSMutableArray *sourceArray = _dataArray[sourceIndexPath.section];// 取出要移动cell所在行的数据 NSString *sourceStr = sourceArray[sourceIndexPath.row];// 删除要移动cell所在行的数据 [sourceArray removeObjectAtIndex:sourceIndexPath.row]; // 根据destinationIndexPath.section来获取要插入的数组 NSMutableArray *destinationArray = _dataArray[destinationIndexPath.section]; [destinationArray insertObject:sourceStr atIndex:destinationIndexPath.row];&#125;//能否移动-(BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath&#123; if (indexPath.section == 0) &#123; return NO; &#125; return YES;&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UITableView","slug":"UITableView","permalink":"https://ifeiyv666.github.io/tags/UITableView/"}]},{"title":"UIStepper(Objc)","slug":"UIStepper","date":"2017-03-27T10:42:27.000Z","updated":"2020-04-03T10:32:34.919Z","comments":true,"path":"2017/03/27/UIStepper/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/27/UIStepper/","excerpt":"","text":"UIStepper12345678910111213141516171819202122232425262728293031323334353637383940414243#import \"ViewController.h\"@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad];// 初始化并设置frame UIStepper *stepper = [[UIStepper alloc]initWithFrame:CGRectMake(100, 100, 100, 100)];// 最小值 stepper.minimumValue = 0; // 最大值 stepper.maximumValue = 10;// 设置当前值 stepper.value = 4;// 设置每次+2或-2，默认是1 stepper.stepValue = 2; // 设置颜色 [stepper setTintColor:[UIColor orangeColor]];// 添加事件 [stepper addTarget:self action:@selector(valueChange:) forControlEvents:UIControlEventValueChanged]; // 处理事件是否一直回调，默认是YES stepper.continuous = YES; // 设置能否重复操作，默认是YES stepper.autorepeat = YES; // 设置是否能循环，默认是NO stepper.wraps = YES; [self.view addSubview:stepper];&#125;-(void)valueChange:(UIStepper*)stepper&#123; NSLog(@\"%lf\",stepper.value);&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIStepper","slug":"UIStepper","permalink":"https://ifeiyv666.github.io/tags/UIStepper/"}]},{"title":"UISlider(Objc)","slug":"UISlider","date":"2017-03-25T07:21:56.000Z","updated":"2020-04-03T10:31:05.949Z","comments":true,"path":"2017/03/25/UISlider/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/25/UISlider/","excerpt":"","text":"UISlider1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#import \"ViewController.h\"@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // Do any additional setup after loading the view, typically from a nib.// slider高度是固定的 UISlider *slider = [[UISlider alloc]initWithFrame:CGRectMake(100, 100, 200, 30)]; slider.tag = 10;// 最小值 slider.minimumValue = 0;// 最大值 slider.maximumValue = 255;// 设置当前值 slider.value = 200; // 未滑动到的颜色 slider.maximumTrackTintColor = [UIColor greenColor];// 已经滑动过的颜色 slider.minimumTrackTintColor = [UIColor orangeColor];// 小球（滑块）颜色 slider.thumbTintColor = [UIColor blackColor];// 设置图片// 最左端图片 slider.minimumValueImage = [UIImage imageNamed:@\"blackHeart\"];// 最右端图片 slider.maximumValueImage = [UIImage imageNamed:@\"redHeart\"];// 设置滑块正常状态下的图片 [slider setThumbImage:[UIImage imageNamed:@\"blackHeart\"] forState:UIControlStateNormal];// 设置滑块高亮状态下的图片 [slider setThumbImage:[UIImage imageNamed:@\"redHeart\"] forState:UIControlStateHighlighted]; [slider addTarget:self action:@selector(valueChange:) forControlEvents:UIControlEventValueChanged]; [self.view addSubview:slider]; UISlider *greenSlider = [[UISlider alloc]initWithFrame:CGRectMake(100, 200, 200, 80)]; greenSlider.tag = 11; greenSlider.minimumValue = 0; greenSlider.maximumValue = 255; [greenSlider addTarget:self action:@selector(valueChange:) forControlEvents:UIControlEventValueChanged]; [self.view addSubview:greenSlider]; UISlider *blueSlider = [[UISlider alloc]initWithFrame:CGRectMake(100, 300, 200, 100)]; blueSlider.tag = 12; blueSlider.minimumValue = 0; blueSlider.maximumValue = 255; [blueSlider addTarget:self action:@selector(valueChange:) forControlEvents:UIControlEventValueChanged]; [self.view addSubview:blueSlider];&#125;-(void)valueChange:(UISlider*)slider&#123; NSLog(@\"---%lf\",slider.value); UISlider *redSlider = (UISlider *)[self.view viewWithTag:10]; UISlider *greenSlider = (UISlider *)[self.view viewWithTag:11]; UISlider *blueSlider = (UISlider *)[self.view viewWithTag:12]; [self.view setBackgroundColor:[UIColor colorWithRed:redSlider.value/255.0 green:greenSlider.value/255.0 blue:blueSlider.value/255.0 alpha:1.0]]; &#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UISlider","slug":"UISlider","permalink":"https://ifeiyv666.github.io/tags/UISlider/"}]},{"title":"UIsegementControl(Objc)","slug":"UISegementControl","date":"2017-03-21T05:34:29.000Z","updated":"2020-04-03T10:31:15.255Z","comments":true,"path":"2017/03/21/UISegementControl/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/21/UISegementControl/","excerpt":"","text":"UIsegementControl12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#import \"ViewController.h\"@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad];// 初始化UISegmentedControl UISegmentedControl *segmentControl = [[UISegmentedControl alloc]initWithFrame:CGRectMake(100, 100, 200, 50)];// 设置背景色 segmentControl.backgroundColor = [UIColor yellowColor];// 添加第一段 [segmentControl insertSegmentWithTitle:@\"第一段\" atIndex:0 animated:YES];// 添加第二段 [segmentControl insertSegmentWithTitle:@\"第二段\" atIndex:1 animated:YES];// 添加第三段// 设置文字和图片，谁在后面，显示谁 [segmentControl insertSegmentWithTitle:@\"第三段\" atIndex:2 animated:YES]; UIImage *image = [UIImage imageNamed:@\"qq\"];// 显示原始图片 image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];// [segmentControl insertSegmentWithImage: image atIndex:2 animated:YES]; [segmentControl setImage:image forSegmentAtIndex:2]; // 选中颜色 segmentControl.tintColor = [UIColor redColor];// 设置选中某一段 segmentControl.selectedSegmentIndex = 1; // 获取某一段的title NSString *title = [segmentControl titleForSegmentAtIndex:1]; NSLog(@\"title = %@\",title);// 添加响应事件 [segmentControl addTarget:self action:@selector(valueChange:) forControlEvents:UIControlEventValueChanged]; [self.view addSubview:segmentControl]; &#125;-(void)valueChange:(UISegmentedControl*)seg&#123; NSInteger index = seg.selectedSegmentIndex; switch (index) &#123; case 0:&#123; NSLog(@\"0\"); UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@\"提示\" message:@\"还钱\" delegate:self cancelButtonTitle:@\"确定\" otherButtonTitles:@\"不还\", nil]; [alert show]; &#125; break; case 1: NSLog(@\"1\"); break; case 2: NSLog(@\"2\"); break; default: break; &#125;&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIsegementControl","slug":"UIsegementControl","permalink":"https://ifeiyv666.github.io/tags/UIsegementControl/"}]},{"title":"Transform形变(Objc)","slug":"Transform形变","date":"2017-03-19T08:29:10.000Z","updated":"2020-04-03T10:15:24.925Z","comments":true,"path":"2017/03/19/Transform形变/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/19/Transform%E5%BD%A2%E5%8F%98/","excerpt":"","text":"Transform形变123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293#import \"RootViewController.h\"@interface RootViewController ()@end@implementation RootViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // [self transform]; [self lastTransform];&#125;#-(void)lastTransform&#123; UIView *changeView = [[UIView alloc]initWithFrame:CGRectMake(100, 100, 100, 100)]; changeView.tag = 20; changeView.backgroundColor = [UIColor yellowColor]; [self.view addSubview:changeView]; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(50, 50, 50, 50); button.backgroundColor = [UIColor blueColor]; [button addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button];&#125;-(void)onClick&#123; // 仿射变化// 通过center bounds transform来控制要显示的内容 UIView *changeView = [self.view viewWithTag:20];// 在上次形变的基础上，继续形变 changeView.transform = CGAffineTransformTranslate(changeView.transform, 10, 0); // 旋转 CGFloat angle = [self getAgreeFromDegree:10]; changeView.transform = CGAffineTransformRotate(changeView.transform, angle);// 缩放// changeView.transform = CGAffineTransformScale(changeView.transform, 0.9, 1.0); NSLog(@\"%@\",NSStringFromCGRect(changeView.frame)); NSLog(@\"%f\",changeView.bounds.size.width); NSLog(@\"%f\",changeView.bounds.size.height); NSLog(@\"%f\",changeView.center.x); NSLog(@\"%f\",changeView.center.y); &#125;#pragma mark -#pragma mark 形变//形变-(void)transform&#123; UIView *changeView = [[UIView alloc]initWithFrame:CGRectMake(100, 100, 100, 100)]; UIView *view1 = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 10, 10)]; [view1 setBackgroundColor:[UIColor blueColor]]; [changeView addSubview:view1]; changeView.backgroundColor = [UIColor yellowColor]; // 平移 changeView.transform = CGAffineTransformMakeTranslation(0, 100);// 缩放// changeView.transform = CGAffineTransformMakeScale(0.5, 1.0);// 旋转// 传入的值为正值时，顺时针转动 CGFloat angle = [self getAgreeFromDegree:20]; changeView.transform = CGAffineTransformMakeRotation(angle); [self.view addSubview:changeView];&#125;-(CGFloat)getAgreeFromDegree:(CGFloat)degree&#123; CGFloat agree = degree * M_PI / 180; return agree;&#125;//创建一个UIView-(void)createUIView&#123;// 初始化UIView UIView *orangeView = [[UIView alloc]init];// 设置背景色 orangeView.backgroundColor = [UIColor orangeColor];// 设置frame orangeView.frame = CGRectMake(0, 0, 100, 100);// 设置center orangeView.center = CGPointMake(0, 0); orangeView.center = self.view.center; // 添加到视图 [self.view addSubview:orangeView];&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"Transform","slug":"Transform","permalink":"https://ifeiyv666.github.io/tags/Transform/"}]},{"title":"UIActionSheet(Objc)","slug":"UIActionSheet","date":"2017-03-19T08:29:10.000Z","updated":"2020-04-03T10:17:06.577Z","comments":true,"path":"2017/03/19/UIActionSheet/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/19/UIActionSheet/","excerpt":"","text":"UIActionSheet1234567891011121314151617181920212223242526272829303132333435363738394041424344#import \"ViewController.h\"@interface ViewController ()&lt;UIActionSheetDelegate&gt;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // Do any additional setup after loading the view, typically from a nib.&#125;-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123;// 初始化 UIActionSheet *sheet = [[UIActionSheet alloc]initWithTitle:@\"分享\" delegate:self cancelButtonTitle:@\"取消\" destructiveButtonTitle:@\"删除\" otherButtonTitles:@\"微博分享\",@\"微信分享\",@\"QQ分享\", nil];// 显示在指定的view上 [sheet showInView:self.view];&#125;-(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex&#123;// 在这里做事件处理 switch (buttonIndex) &#123; case 0: NSLog(@\"%ld\",buttonIndex); break; case 1: NSLog(@\"%ld\",buttonIndex); break; case 2: NSLog(@\"%ld\",buttonIndex); break; case 3: NSLog(@\"%ld\",buttonIndex); break; case 4: NSLog(@\"%ld\",buttonIndex); break; default: break; &#125;&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIActionSheet","slug":"UIActionSheet","permalink":"https://ifeiyv666.github.io/tags/UIActionSheet/"}]},{"title":"Touch(Objc)","slug":"Touch","date":"2017-03-14T07:37:51.000Z","updated":"2020-04-03T10:12:00.577Z","comments":true,"path":"2017/03/14/Touch/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/14/Touch/","excerpt":"","text":"Touch123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#import \"ViewController.h\"@interface ViewController ()&#123; UIView *myview;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // 初始化myview myview = [[UIView alloc]initWithFrame:CGRectMake(100,100, 100, 100)];// 设置背景色 myview.backgroundColor = [UIColor lightGrayColor];// 添加到视图上 [self.view addSubview:myview]; &#125;//开始触摸，只调用一次-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; NSLog(@\"touch began\");&#125;//开始移动，会多次调用-(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event&#123; NSLog(@\"----\");// UITouch// 用来保存跟手指相关的信息，比如：触摸的位置// 当手指移动时，系统会更新同一个UIToch对象，使之能够一直保存该手指在的触摸位置// 当手指离开屏幕时，系统会销毁对应的UITouch对象//// 从touches中取出手指 UITouch *touch = [touches anyObject]; if (touch.view == myview) &#123; // 该方法记录了前一个触摸点的位置 CGPoint previousPoint = [touch previousLocationInView:self.view]; /* 返回值表示触摸在self.view上的位置 这里的位置是针对self.view的坐标系（以self.view的左上角为原点（0,0）） 如果传nil时，返回的触摸点在UIWindow的位置 */ // 该方法记录了当前点的位置 CGPoint currentPoint = [touch locationInView:self.view]; NSLog(@\"1------&gt;%@\",NSStringFromCGPoint(previousPoint)); NSLog(@\"2------&gt;%@\",NSStringFromCGPoint(currentPoint)); // 获取x偏移量 CGFloat x = currentPoint.x - previousPoint.x; // 获取y偏移量 CGFloat y = currentPoint.y - previousPoint.y; // 获取myview中心点 CGPoint center = myview.center; center.x += x; center.y += y; myview.center = center; &#125;&#125;//结束触摸，只调用一次-(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event&#123; NSLog(@\"touch end\");&#125;//触摸取消（例如来电打断）-(void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event&#123; &#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"Touch","slug":"Touch","permalink":"https://ifeiyv666.github.io/tags/Touch/"}]},{"title":"UIScrollView(Objc)","slug":"UIScrollView","date":"2017-03-09T10:45:26.000Z","updated":"2020-04-03T10:28:01.288Z","comments":true,"path":"2017/03/09/UIScrollView/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/09/UIScrollView/","excerpt":"","text":"UIScrollView123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155#import \"ViewController.h\"@interface ViewController ()&lt;UIScrollViewDelegate&gt;//遵守协议&#123;// 滚动视图 UIScrollView *_scrollView; &#125;@property (weak, nonatomic) IBOutlet UIButton *myButton;@end@implementation ViewController- (IBAction)onClick:(UIButton *)sender &#123; [_scrollView setContentOffset:CGPointMake(0, 0) animated:YES];&#125;- (void)viewDidLoad &#123; [super viewDidLoad]; [self createScrollView]; [self addSubView]; [self customScrollView]; [self.view bringSubviewToFront:self.myButton]; /*// [self.myButton addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; //-(void)onClick&#123; // NSLog(@\"onClick\"); //&#125; */ &#125;//创建ScrollView-(void)createScrollView&#123;// 初始化UIScrollView _scrollView = [[UIScrollView alloc]initWithFrame:self.view.bounds]; // _scrollView = [[UIScrollView alloc]initWithFrame:CGRectMake(100, 100, 200, 200)];// 设置背景色 _scrollView.backgroundColor = [UIColor orangeColor];// 设置代理 _scrollView.delegate = self; [self.view addSubview:_scrollView]; &#125;-(void)addSubView&#123;// 获取文件路径 NSString *path = [[NSBundle mainBundle]pathForResource:@\"海贼02\" ofType:@\"jpg\"];// 转换成NSData NSData *data = [NSData dataWithContentsOfFile:path];// 初始化图片 UIImage *image = [UIImage imageWithData:data];// 图片初始化后，会直接获得图片的width 和 height// NSLog(@\"width = %lf---height = %lf\",image.size.width,image.size.height);// 初始化UIImageView UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, image.size.width, image.size.height)]; imageView.image = image; // 设置滚动范围// 必须给出滚动范围，这样滚动视图才能知道滚动的范围 _scrollView.contentSize = CGSizeMake(image.size.width, image.size.height); [_scrollView addSubview:imageView];&#125;// 定制ScrollView-(void)customScrollView&#123; // 设置偏移量// [_scrollView setContentOffset:CGPointMake(200, 200)];// 设置距离边框的距离// [_scrollView setContentInset:UIEdgeInsetsMake(100, 100, 100, 100)]; #pragma mark 滚动相关 // 设置是否可以超出边界// 默认是YES，超出边界后，有回弹效果// 设置NO，没有回弹效果 _scrollView.bounces = YES; // 在这里，想测试下面两个属性时，使用《海贼03.jpg》// 当contentSize的宽度小于scrollView的宽度时，仍允许左右拖动，默认是NO _scrollView.alwaysBounceHorizontal = YES;// 当contentSize的高度小于scrollView的高度时，仍允许上下手动，默认是NO _scrollView.alwaysBounceVertical = YES; // 设置是否按页滚动，即每次滚动一个scrollView的宽度或高度，默认是NO// _scrollView.pagingEnabled = YES; // 设置是否允许滚动，默认是YES _scrollView.scrollEnabled = YES; // 设置是否显示滚动指示，默认是YES _scrollView.showsHorizontalScrollIndicator = YES; _scrollView.showsVerticalScrollIndicator = YES; // 设置滚动指示的样式 _scrollView.indicatorStyle = UIScrollViewIndicatorStyleWhite;// UIScrollViewIndicatorStyleDefault,// UIScrollViewIndicatorStyleBlack,// UIScrollViewIndicatorStyleWhite // 设置滚动条距离scrollView边框的距离 _scrollView.scrollIndicatorInsets = UIEdgeInsetsMake(0, 0, 30, 60); _scrollView.scrollsToTop = YES; &#125;#pragma mark scrollView delegate//将要拖拽//当开始滚动视图时，会执行该方法//一次有效的滑动执行一次（开始滑动到手指松开），-(void)scrollViewWillBeginDragging:(UIScrollView *)scrollView&#123; NSLog(@\"将要拖拽\");&#125;//scrollView滚动时，就会调用该方法//任何offset值的改变都会调用该方法。在滚动过程中，会调用多次-(void)scrollViewDidScroll:(UIScrollView *)scrollView&#123; // CGPoint point = scrollView.contentOffset;// NSLog(@\"偏移量%lf\",point.x);&#125;-(void)scrollViewWillEndDragging:(UIScrollView *)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint *)targetContentOffset&#123; NSLog(@\"将要结束拖拽\");&#125;//当手指离开屏幕的一瞬间，调用该方法，一次有效的滑动，只执行一次-(void)scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate&#123;// NSLog(@\"%lf\",scrollView.contentOffset.x); NSLog(@\"拖拽结束\");// [scrollView setContentOffset:CGPointMake(0, 0) animated:YES];&#125;//将要减速//该方法在scrollViewDidEndDragging 结束后执行-(void)scrollViewWillBeginDecelerating:(UIScrollView *)scrollView&#123; NSLog(@\"将要减速\");&#125;-(void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView&#123; NSLog(@\"减速结束\"); // [scrollView setContentOffset:CGPointMake(0, 0) animated:YES];&#125;@end 1234567891011121314151617181920212223242526272829303132#pragma mark 缩放 delegate//当将要开始缩放时，执行该方法。一次有效的缩放，执行一次-(void)scrollViewWillBeginZooming:(UIScrollView *)scrollView withView:(UIView *)view&#123; NSLog(@\"将要开始缩放\");&#125;//正在缩放-(void)scrollViewDidZoom:(UIScrollView *)scrollView&#123; NSLog(@\"正在缩放\"); CGFloat value = scrollView.zoomScale; NSLog(@\"%f\",value);&#125;//结束缩放-(void)scrollViewDidEndZooming:(UIScrollView *)scrollView withView:(UIView *)view atScale:(CGFloat)scale&#123; NSLog(@\"结束缩放\");&#125;//返回要缩放的UIView对象-(UIView*)viewForZoomingInScrollView:(UIScrollView *)scrollView&#123;// 不允许返回scrollView// 只能返回scrollView的子视图 return scrollView.subviews[0];&#125;//当用户点击状态栏后，滚动视图是否能够滚动到顶部-(BOOL)scrollViewShouldScrollToTop:(UIScrollView *)scrollView&#123;// 当设置scrollToTop 为YES时，这里设置YES才会生效 return NO;&#125;//当滚动视图滚动到最顶端的时候，会执行该方法-(void)scrollViewDidScrollToTop:(UIScrollView *)scrollView&#123; NSLog(@\"%s\",__func__);&#125;","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIScrollView","slug":"UIScrollView","permalink":"https://ifeiyv666.github.io/tags/UIScrollView/"}]},{"title":"NavgationController细化(Objc)","slug":"NavgationController细化","date":"2017-03-08T03:58:41.000Z","updated":"2020-04-03T10:10:50.865Z","comments":true,"path":"2017/03/08/NavgationController细化/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/08/NavgationController%E7%BB%86%E5%8C%96/","excerpt":"","text":"NavgationController细化123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344#import \"AppDelegate.h\"#import \"RootViewController.h\"@interface AppDelegate ()@end@implementation AppDelegate- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; //初始化window self.window = [[UIWindow alloc]initWithFrame:[UIScreen mainScreen].bounds]; //设置背景颜色 self.window.backgroundColor = [UIColor whiteColor]; //视图控制器 RootViewController *rootVC = [[RootViewController alloc]init];// 初始化导航控制器，并设置基栈 UINavigationController *nav = [[UINavigationController alloc]initWithRootViewController:rootVC]; nav.view.backgroundColor = [UIColor redColor]; //系统控制器设置为自创的 self.window.rootViewController = nav; //让self.window 显示 [self.window makeKeyAndVisible]; return YES;&#125;#import \"RootViewController.h\"#import \"SecondViewController.h\"@interface RootViewController ()@end@implementation RootViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self.view setBackgroundColor:[UIColor yellowColor]]; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(100, 100, 100, 50); [button setTitle:@\"下一级\" forState:UIControlStateNormal]; button.backgroundColor = [UIColor lightGrayColor]; [button addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button]; [self settingNavgationBar];&#125;-(void)settingNavgationBar&#123; UINavigationBar *bar = self.navigationController.navigationBar; // 设置navigationBar 的类型 self.navigationController.navigationBar.barStyle = UIBarStyleBlack;// UIBarStyleDefault// UIBarStyleBlack // 透明度(毛玻璃) bar.translucent = YES;// 设置yes，子视图的坐标原点是（0,0）// 设置no,子视图的坐标原点是(0,64) UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(0, 0, 100, 100)]; label.backgroundColor = [UIColor greenColor]; [self.view addSubview:label]; // 设置导航条颜色 [bar setBarTintColor:[UIColor redColor]]; // 设置标题// self.title = @\"root\"; self.navigationItem.title = @\"root\"; // 导航条按钮字体颜色 [bar setTintColor:[UIColor cyanColor]]; // 设置导航条字体颜色 [bar setTitleTextAttributes:@&#123; NSFontAttributeName:[UIFont systemFontOfSize:20], NSForegroundColorAttributeName:[UIColor purpleColor] &#125;]; // 设置隐藏导航条// self.navigationController.navigationBarHidden = YES; [bar setBackgroundImage:[UIImage imageNamed:@\"header_bg44\"] forBarMetrics:UIBarMetricsDefault];// UIBarMetricsDefault 横竖屏都显示// UIBarMetricsCompact 竖屏显示 // self.navigationItem.backBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"返回\" style:UIBarButtonItemStylePlain target:secondVc action:@selector(abc)]; UIImage *image = [UIImage imageNamed:@\"qq.png\"];// 对图片进处理 image = [image imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal]; // UIImageRenderingModeAutomatic,返回一个色块// UIImageRenderingModeAlwaysOriginal,返回图片本身 UIImageRenderingModeAlwaysTemplate,返回一个色块 // UIBarButtonItemStylePlain,// UIBarButtonItemStyleDone, // leftBarButtonItem 左按钮 self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc]initWithImage:image style:UIBarButtonItemStylePlain target:self action:@selector(leftClick)];// rightBarButtonItem 右按钮 self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc]initWithTitle:@\"right\" style:UIBarButtonItemStyleDone target:self action:@selector(rightClick)]; UIBarButtonItem *item1 = [[UIBarButtonItem alloc]initWithTitle:@\"item1\" style:UIBarButtonItemStylePlain target:self action:@selector(rightClick)]; UIBarButtonItem *item2 = [[UIBarButtonItem alloc]initWithTitle:@\"item2\" style:UIBarButtonItemStylePlain target:self action:@selector(rightClick)]; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(0, 0, 40, 40); [button setBackgroundColor:[UIColor redColor]]; [button setImage:image forState:UIControlStateNormal]; // 添加一个自定义的UIButton UIBarButtonItem * item3 = [[UIBarButtonItem alloc]initWithCustomView:button]; // 设置rightBarButtonItems时，会把rightBarButtonItem 覆盖 self.navigationItem.rightBarButtonItems = @[item1,item2,item3]; UILabel *label1 = [[UILabel alloc]initWithFrame:CGRectMake(0, 0, 100, 44)]; label1.backgroundColor = [UIColor redColor]; label1.text = @\"label\"; UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, 100, 40)]; imageView.image = image;// 设置titleView self.navigationItem.titleView = imageView; &#125;-(void)leftClick&#123; NSLog(@\"---\");&#125;-(void)rightClick&#123; NSLog(@\"%s\",__func__);&#125;-(void)onClick&#123; SecondViewController *secondVc = [[SecondViewController alloc]init];// 进入下一级（入栈） [self.navigationController pushViewController:secondVc animated:YES]; &#125;@end#import \"SecondViewController.h\"#import \"ThirdViewController.h\"@interface SecondViewController ()@end@implementation SecondViewController-(void)viewWillAppear:(BOOL)animated&#123; [super viewWillAppear:animated];// 视图将要出现的时候，隐藏navgationBar self.navigationController.navigationBarHidden = YES;&#125;-(void)viewWillDisappear:(BOOL)animated&#123; [super viewWillDisappear:animated];// 视图将要消失的时候，显示navgationBar self.navigationController.navigationBarHidden = NO;&#125;- (void)viewDidLoad &#123; [super viewDidLoad]; [self.view setBackgroundColor:[UIColor greenColor]]; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(100, 100, 100, 50); [button setTitle:@\"下一级\" forState:UIControlStateNormal]; button.backgroundColor = [UIColor lightGrayColor]; [button addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button]; UIButton *button1 = [UIButton buttonWithType:UIButtonTypeCustom]; button1.frame = CGRectMake(100, 200, 100, 50); [button1 setTitle:@\"上一级\" forState:UIControlStateNormal]; button1.backgroundColor = [UIColor lightGrayColor]; [button1 addTarget:self action:@selector(backClick) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button1];&#125;-(void)abc&#123; NSLog(@\"----\");&#125;-(void)backClick&#123;// 返回上一级 [self.navigationController popViewControllerAnimated:YES];&#125;-(void)onClick&#123; ThirdViewController *thirdVc = [[ThirdViewController alloc]init];// 进入下一级（入栈） [self.navigationController pushViewController:thirdVc animated:YES]; &#125;- (void)didReceiveMemoryWarning &#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;@end#import \"ThirdViewController.h\"#import \"ForthViewController.h\"@interface ThirdViewController ()@end@implementation ThirdViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self.view setBackgroundColor:[UIColor blueColor]]; for (int i = 0 ; i &lt; 3; i ++) &#123; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(100, 100 + i * 60, 100, 50); button.tag = i + 10; if (i == 0 ) &#123; [button setTitle:@\"下一级\" forState:UIControlStateNormal]; &#125;else if (i == 1)&#123; [button setTitle:@\"上一级\" forState:UIControlStateNormal]; &#125;else if (i == 2)&#123; [button setTitle:@\"返回root\" forState:UIControlStateNormal]; &#125; button.backgroundColor = [UIColor lightGrayColor]; [button addTarget:self action:@selector(onClick:) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button]; &#125; // self.navigationController.viewControllers NSLog(@\"%@\",self.navigationController.viewControllers); [self toolBarSetting];&#125;-(void)toolBarSetting&#123; self.navigationController.toolbarHidden = NO; UIBarButtonItem *item = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemSave target:nil action:nil]; UIBarButtonItem *item1 = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:nil action:nil]; UIBarButtonItem *item2 = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemEdit target:nil action:nil]; UIBarButtonItem *item3 = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil]; self.toolbarItems = @[item,item3,item1,item2]; &#125;-(void)onClick:(UIButton*)button&#123; if (button.tag == 10) &#123; ForthViewController *forthVc = [[ForthViewController alloc]init];// 把forthVc 入栈 [self.navigationController pushViewController:forthVc animated:YES]; &#125; if (button.tag == 11) &#123;// 返回上一级 [self.navigationController popViewControllerAnimated:YES]; &#125; if (button.tag == 12) &#123;// 返回root(基栈) [self.navigationController popToRootViewControllerAnimated:YES]; &#125;&#125;@end#import \"ForthViewController.h\"@interface ForthViewController ()@end@implementation ForthViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // Do any additional setup after loading the view.// 设置背景色 [self.view setBackgroundColor:[UIColor orangeColor]];// 初始化button for (int i = 0 ; i &lt; 3; i ++) &#123; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(100, 100 + i * 60, 100, 50); button.tag = i + 10; if (i == 0 ) &#123; [button setTitle:@\"返回第二级\" forState:UIControlStateNormal]; &#125;else if (i == 1)&#123; [button setTitle:@\"上一级\" forState:UIControlStateNormal]; &#125;else if (i == 2)&#123; [button setTitle:@\"返回root\" forState:UIControlStateNormal]; &#125; button.backgroundColor = [UIColor lightGrayColor]; [button addTarget:self action:@selector(onClick:) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button]; &#125; &#125;-(void)onClick:(UIButton*)button&#123; if (button.tag == 10) &#123;// 根据数组下标 获取要返回到的UIViewController UIViewController *VC = self.navigationController.viewControllers[1];// 返回到指定的UIViewController [self.navigationController popToViewController:VC animated:YES]; &#125; if (button.tag == 11) &#123;// 返回上一级 [self.navigationController popViewControllerAnimated:YES]; &#125; if (button.tag == 12) &#123;// 返回到root(基栈) [self.navigationController popToRootViewControllerAnimated:YES]; &#125;&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"NavgationController","slug":"NavgationController","permalink":"https://ifeiyv666.github.io/tags/NavgationController/"}]},{"title":"UIProgressView(Objc)","slug":"UIProgressView","date":"2017-03-06T07:24:55.000Z","updated":"2020-04-03T10:25:21.611Z","comments":true,"path":"2017/03/06/UIProgressView/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/06/UIProgressView/","excerpt":"","text":"UIProgressView12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#import \"ViewController.h\"@interface ViewController ()&#123; NSTimer *_timer;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad];// 初始化UIProgressView并设置frame// UIProgressView 高度是固定的 UIProgressView *progressView = [[UIProgressView alloc]initWithFrame:CGRectMake(100, 100, 200, 100)];// 设置进度// 0.0 .. 1.0, default is 0.0. progressView.progress = 0.25;// 已加载进度的颜色 progressView.progressTintColor = [UIColor redColor];// 未加载进度的颜色 progressView.trackTintColor = [UIColor greenColor];// 设置图片会覆盖上面设置的颜色// 已加载进度的图片 progressView.progressImage = [UIImage imageNamed:@\"1\"];// 未加载进度的图片 progressView.trackImage = [UIImage imageNamed:@\"2\"]; // 设置tag值 progressView.tag = 10; // 添加到视图 [self.view addSubview:progressView]; // 初始化timer _timer = [NSTimer scheduledTimerWithTimeInterval:0.1 target:self selector:@selector(timerRun) userInfo:nil repeats:YES]; &#125;-(void)timerRun&#123; UIProgressView *progressView = (UIProgressView *)[self.view viewWithTag:10]; if (progressView.progress &lt; 1.0) &#123; progressView.progress += 0.01; &#125;else&#123; NSLog(@\"下载完成\");// 使计时器失效 [_timer invalidate]; &#125; &#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIProgressView","slug":"UIProgressView","permalink":"https://ifeiyv666.github.io/tags/UIProgressView/"}]},{"title":"字符串函数(Objc)","slug":"字符串函数","date":"2017-03-05T10:47:43.000Z","updated":"2020-04-03T10:06:26.296Z","comments":true,"path":"2017/03/05/字符串函数/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/05/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/","excerpt":"","text":"字符串函数12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394//// myString.c// 字符串函数//// Created by 刘晓磊 on 15/12/16.// Copyright (c) 2015年 刘晓磊. All rights reserved.//#include \"myString.h\"size_t myStrlen(const char * s)&#123; size_t count = 0; //参数合法性判断 if (NULL == s) &#123; printf(\"Input Param is invalid!\\n\"); return -1; &#125; //因为字符串是以\\0结尾的特殊常量，那么\\0就可以作为一个结束标记 //通常对于字符串的操作都是采用while while (*s != '\\0') &#123; count++; s++; &#125; return count;&#125;char * myStrcpy(char * dst, const char * src)&#123; //需要一个指针变量，来保存dst的首地址 char * ptemp = NULL; //参数合法性判断 if (NULL == dst || NULL == src) &#123; printf(\"Input Param is invalid!\\n\"); return NULL; &#125; //保证传入的首地址变量里面的内容不要更改，始终保佑这个地址 ptemp = dst; while (*src != '\\0') &#123; *ptemp = *src; ptemp++; src++; &#125; *ptemp = '\\0'; return dst;&#125;char * myStrcat(char * dst, const char * src)&#123; char * ptemp = NULL; //参数合法性判断 if (NULL == dst || NULL == src) &#123; printf(\"Input Param is invalid!\\n\"); return NULL; &#125; ptemp = dst; //1.找到dst的\\0 while (*ptemp != '\\0') &#123; ptemp++; &#125; //找到之后，ptemp刚刚好停在'\\0'的位置 while (*src != '\\0') &#123; *ptemp = *src; ptemp++; src++; &#125; *ptemp = '\\0'; return dst;&#125;int myStrcmp(const char * s1, const char * s2)&#123; //参数合法性判断 if(NULL == s1 || NULL == s2) &#123; printf(\"Input param is invalid!\\n\"); exit(-1); &#125; //找两个字符串不同的位置，以及'\\0'的位置 //这里有一个条件不符合，我们都要跳出循环 while (*s1 == *s2 &amp;&amp; *s1 != '\\0' &amp;&amp; *s2 != '\\0') &#123; s1++; s2++; &#125; return *s1 - *s2;&#125;","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"字符串函数","slug":"字符串函数","permalink":"https://ifeiyv666.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/"}]},{"title":"文件操作(Objc)","slug":"文件操作","date":"2017-03-05T10:47:43.000Z","updated":"2020-04-03T10:02:34.515Z","comments":true,"path":"2017/03/05/文件操作/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/05/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/","excerpt":"","text":"文件操作123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145//【文件管理类 NSFileManager】 NSError * error = nil;//0 //ARC NSError __autorelease * error = nil; //1.查看指定目录里面的文件(浅度遍历) //第一个参数，要查看的文件夹路径 //第二个参数，错误信息 NSArray * fileContentsArray = [fm contentsOfDirectoryAtPath:PATH error:&amp;error]; //操作文件，一定要有错误信息的判断，如果文件操作失败，没有做处理，后面的程序100%挂掉 if (error) &#123; //perror 打印错误信息 perror(\"contentsOfDirectoryAtPath\"); &#125; //2.查看所有在这个文件夹下的文件(深度遍历) //第一个参数，要查看的文件夹路径 //第二个参数，错误信息 NSArray * allFileContentsArray = [fm subpathsOfDirectoryAtPath:PATH error:&amp;error]; //第一个参数:要创建文件夹的路径 这个路径是带有要创建的文件夹名的 //第二个参数:BOOL类型，控制，是否创建中间文件夹 //If YES, this method creates any non-existent parent directories as part of creating the directory in path. If NO, this method fails if any of the intermediate parent directories does not exist. This method also fails if any of the intermediate path elements corresponds to a file and not a directory. //如果要创建的文件夹，含有中间路径，那么YES，表示如果没有这个中间路径，我们就连带中间路径一起创 建，如果存在，不用管它 //第三个参数:属性，创建文件夹的属性 默认属性nil //第四个参数:错误信息 //返回值BOOL 判断创建是否成功 [fm createDirectoryAtPath:dstPath withIntermediateDirectories:YES attributes:nil error:&amp;error]; //创建一个普通文件 //第一个参数:路径,这个路径是带有所要创建的文件名 //第二个参数:文件的内容，NSData 是OC当中二进制文件格式 //第三个参数:属性，默认nil //利用他的返回值做出错判断 //NSString 转 NSData NSString * str = @\"今天赵雨铭同学，要给大家讲电子图书类!!!\"; NSData * data = [str dataUsingEncoding:NSUTF8StringEncoding]; BOOL ret = [fm createFileAtPath:[PATH stringByAppendingPathComponent:@\"1.txt\"]contents:data attributes:nil]; //删除文件夹 和 普通文件 是一个方法 //删除是不可逆的~~~ //第一个参数:路径是带有要删除的文件信息的 //第二个参数:错误信息 [fm removeItemAtPath:PATH error:&amp;error]; //copy文件 //第一个参数:要复制的原路径，带有文件名 或者 文件夹名 //第二个参数:目标路径 必须加上要复制过去的文件名,这个文件名可以重命名 //第三个参数:error信息 [fm copyItemAtPath:[PATH stringByAppendingPathComponent:@\"MID/test\"]toPath: [PATH stringByAppendingPathComponent:@\"test\"] error:&amp;error]; //移动文件 //第一个参数:要移动源文件路径 //第二个参数:目标路径，也要带上文件名 //第三个参数:error [fm moveItemAtPath:[PATH stringByAppendingPathComponent:@\"1副本.txt\"] toPath: [PATH stringByAppendingPathComponent:@\"1.txt\"] error:&amp;error]; //判断文件是否存在 //返回值BOOL YES 表示该文件存在，NO 表示该文件不存在 BOOL ret = [fm fileExistsAtPath:[PATH stringByAppendingPathComponent:@\"12.txt\"]]; if (ret) &#123; NSLog(@\"This file exist!\"); &#125; else &#123; NSLog(@\"This file No exist!\"); &#125; //判断这个文件是不是文件夹 //返回值BOOL YES 表示这个路径的文件存在 NO 不存在 //isDirectory 传入参数是一个BOOL * YES 表示是一个文件夹，如果NO 表示是一个普通文件 //- (BOOL)fileExistsAtPath:(NSString *)path isDirectory:(BOOL *)isDirectory; BOOL isDirectory = NO; ret = [fm fileExistsAtPath:[PATH stringByAppendingPathComponent:@\"MIDd\"] isDirectory:&amp;isDirectory]; if (ret) &#123; if (isDirectory) &#123; NSLog(@\"This is a directory!\"); &#125; else &#123; NSLog(@\"This is normal file!\"); &#125; &#125; else &#123; NSLog(@\"No such file or directory!\"); &#125; //获取文件的属性 NSDictionary * dic = [fm attributesOfItemAtPath:PATH error:&amp;error]; NSLog(@\"%@\",dic);// &#123;// NSFileCreationDate = \"2015-12-30 01:40:30 +0000\";// NSFileExtensionHidden = 0;// NSFileGroupOwnerAccountID = 20;// NSFileGroupOwnerAccountName = staff;// NSFileModificationDate = \"2015-12-30 03:27:14 +0000\";// NSFileOwnerAccountID = 501;// NSFileOwnerAccountName = LXL;// NSFilePosixPermissions = 493;// NSFileReferenceCount = 12;// NSFileSize = 408;// NSFileSystemFileNumber = 3450634;// NSFileSystemNumber = 16777220;// NSFileType = NSFileTypeDirectory;// &#125; 【文件句柄类 NSFileHandle】 //创建一个读取文件的句柄 NSFileHandle * fhForRead = [NSFileHandle fileHandleForReadingAtPath:PATH]; //创建一个用于写入文件的句柄 NSFileHandle * fhForWrite = [NSFileHandle fileHandleForWritingAtPath:PATH]; //创建一个读写句柄 NSFileHandle * fhForUpdating = [NSFileHandle fileHandleForUpdatingAtPath:PATH]; //读取数据，读取的数据是一个二进制数据 //这个读取文件的方式是要把文件全部读取到内存中去 //在iOS程序中，都是采用这样的读取文件方式 NSData * data = [fhForRead readDataToEndOfFile]; //EOF //读取指定长度的文件，字节数 [fhForUpdating readDataOfLength:9]; //写入数据是一个覆盖写 [fhForWrite writeData:dataForWrite]; //文件指示器到文件的末尾 [fhForWrite seekToEndOfFile]; //文件指示器，到文件的指定位置，这个位置是一个字节数 [fhForWrite seekToFileOffset:&lt;#(unsigned long long)#&gt;] //把文件截短成100 [fhForUpdating truncateFileAtOffset:10];//【plist文件】 Property List//在plist文件当中，只能保存一下几种数据NSString NSDate NSData NSNumber NSArray NSDictionary//plist是一个可视化轻量级文件，通常是保存一下数据量不是太大的文件，QQ登陆信息//XML文本//数据对象NSArray NSDictionary //1.创建一个plist文件 //第一个参数:代表要创建plist的路径，包括plist文件名 //第二个参数:表示是否要原子操作 [dict1 writeToFile:[PATH stringByAppendingPathComponent:@\"dict.plist\"] atomically:NO]; [array writeToFile:[PATH stringByAppendingPathComponent:@\"array.plist\"] atomically:NO];[file] - &gt; [new] - &gt;[file] - &gt; [OS X] - &gt; [Property List]//2.读取plist NSArray * plistArray = [[NSArray alloc] initWithContentsOfFile:PATH]; NSURL * url = [[NSURL alloc] initWithString:URL]; NSDictionary * dict = [[NSDictionary alloc] initWithContentsOfURL:url];","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"文件操作","slug":"文件操作","permalink":"https://ifeiyv666.github.io/tags/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"}]},{"title":"UILabel(Objc)","slug":"UILabel","date":"2017-03-03T10:53:19.000Z","updated":"2020-04-03T10:23:34.134Z","comments":true,"path":"2017/03/03/UILabel/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/03/UILabel/","excerpt":"","text":"UILabel12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; // Override point for customization after application launch. //初始化window，并设置fram self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds]; //[UIScreen mainScreen].bounds] 获取当前屏幕的大小 //设置背景颜色 [self.window setBackgroundColor:[UIColor purpleColor]]; //Xcode 7.0 之后，必须有rootViewController //Xcode 7.0 之前，可以不设置rootViewController RootViewController * rootVC = [[RootViewController alloc]init]; self.window.rootViewController = rootVC; //设置window为 keyWindow 并显示 [self.window makeKeyAndVisible]; return YES;&#125;@implementation RootViewController//视图已经加载- (void)viewDidLoad &#123; [super viewDidLoad]; // Do any additional setup after loading the view. //[self createUILabel]; //[self createNewLabel]; //UILabel * label =(UILabel *)[self.view viewWithTag:9]; // label.text = @\"123\"; &#125;-(void)createUILabel&#123; //红50绿100蓝30 //alpha 透明度，默认是1.0，取值范围0~1.0 //利用RGB生成一个颜色 //UIColor *color = [UIColor colorWithRed:50/255.0 green:100/255.0 blue:30/255.0 alpha:0.8]; //设置self.view的背景色 self.view.backgroundColor = [UIColor whiteColor]; //CGRect rect = CGRectMake(50, 50, 100, 100); //初始化UILbel 并设置fram //重新设置fram，会把之前设置的fram覆盖 UILabel * label = [[UILabel alloc] initWithFrame:CGRectMake(100, 100, 200, 200)]; //设置label的背景色 label.backgroundColor = [UIColor lightGrayColor]; label.text = @\"NSLineBreakByTruncatingTail, NSLineBreakByTruncatingMiddleNSLineBreakByTruncatingTail,NSLineBreakByTruncating ,MiddleNSLineBreakByTruncatingTail.NSLineBreakByTruncatingMiddleNSLineBreakByTruncatingTail,NSLineBreakByTruncatingMiddle\"; //设置字体的类型和大小 label.font = [UIFont systemFontOfSize:20]; //设置粗体 label.font = [UIFont boldSystemFontOfSize:20]; //设置斜体（不支持中文） label.font = [UIFont italicSystemFontOfSize:20]; //获取所有字体 NSLog(@\"%@\",[UIFont familyNames]); //设置字体，大小 label.font = [UIFont fontWithName:@\"Thonburi\" size:20]; //自适应宽度 //label.adjustsFontSizeToFitWidth = YES; //内容对其方式 label.textAlignment = NSTextAlignmentLeft; //label.textAlignment = NSTextAlignmentRight; //label.textAlignment = NSTextAlignmentCenter; //限制设置行数，如果文字不够，能显示多少行就显示多少行。 //如果行高不够，能显示多少行就显示多少行。 //默认值是0，表示行数最大 label.numberOfLines = 0; label.lineBreakMode = NSLineBreakByTruncatingMiddle;// NSLineBreakByWordWrapping = 0, 根据单词截断// NSLineBreakByCharWrapping, 根据字符截断// NSLineBreakByClipping, 简单截断// NSLineBreakByTruncatingHead, 省略号在前// NSLineBreakByTruncatingTail, 省略号在后// NSLineBreakByTruncatingMiddle 省略号在中 label.shadowColor = [UIColor blueColor]; label.shadowOffset = CGSizeMake(3, 3); //设置透明度 label.alpha = 0.8; //标识 label.tag = 10; [self.view addSubview:label]; &#125;","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UILabel","slug":"UILabel","permalink":"https://ifeiyv666.github.io/tags/UILabel/"}]},{"title":"算法题(Objc)","slug":"算法题","date":"2017-03-02T07:27:18.000Z","updated":"2020-04-03T09:57:58.720Z","comments":true,"path":"2017/03/02/算法题/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/02/%E7%AE%97%E6%B3%95%E9%A2%98/","excerpt":"","text":"算法题include &lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;ctype.h&gt;/* 1. 数字1、2、3、4，可以组成多个互不相同且无重复数字的三位数，请输出所有组合 (15分) */void numOfDiffNumber()&#123; int i , j , k; for(i = 1; i &lt;= 4 ;i ++)&#123; for(j = 1;j &lt;= 4; j++)&#123; for(k = 1; k &lt;= 4 ; k ++)&#123; if (i != j &amp;&amp; i != k &amp;&amp; j != k)&#123; printf(\"%d\\n\" , i * 100 + j * 10 + k); &#125; &#125; &#125; &#125;&#125;/* 2.求 a + aa + aaa ... + aaaa...aaa(n个a)之和(15分) 其中a和n代表相关参数 如a = 2，n = 4表示求2 + 22 + 222 + 2222之和 */int sumOfNumber(int a, int n)&#123; int num = 0; int sum = 0; int j = 0; while(j &lt;= n)&#123; num = num * 10 + a; sum +＝ num; j++; &#125; return sum;&#125;/* 2.传入数字n，求出1^1 + 2 ^ 2 + 3 ^ 3 + … + n ^ n的和(15分) */long sumOfFactorial(long n)&#123; long int i = 0, j = 0,sum = 0; for(i = 1; i &lt;= n; i++)&#123; long int pruct = 1; for(j = 1; j &lt;= i; j++)&#123; pruct *= i; &#125; sum += pruct; &#125; return sum;&#125; /*1.判断是否是一个合法的手机号，是返回1，不是返回0 （15分） 要求:手机号以1开头总共有11位 并且手机号中不能有除了数字以外的其他字符 比如: 13812345678 是手机号 188a1234567 不是手机号 01381234567 不是手机号 188123456789 不是手机号 18912345 不是手机号 */int isPhoneNumberOfString(const char * phoneNumber)&#123; int flag = 0; int i = 0; int l = strlen(phoneNumber); if(phoneNumber[0] != '1' || l != 11) &#123; flag = 0; &#125; else &#123; while(i &lt; 11) &#123; i = 1; if(phoneNumber[i] &gt;= '0' &amp;&amp; phoneNumber[i] &lt;= '9') &#123; flag = 1; &#125; else &#123; flag = 0; &#125; i++; &#125; &#125; return flag;&#125;/* 1.求整形数组中第二大元素的下标(15分) n表示数组长度 如数组中元素为81 12 42 67 9 88，返回0 */int secondMaxIndex(int *arr, int n)&#123; int i = 0, j = 0; int c[n]; int temp = 0; for(i = 0;i &lt; n;i++)&#123; c[i] = arr[i]; &#125; for(i = 0;i &lt; n - 1; i++)&#123; for(j = 0; j &lt; n - 1 - i; j++)&#123; if(c[j] &lt; c[j + 1])&#123;//升序 冒泡 temp = c[j]; c[j] = c[j + 1]; c[j + 1] = temp; &#125; &#125; &#125; for(i = 0; i &lt; n; i++)&#123; if(c[1] == arr[i])&#123; return i; &#125; &#125; return 0;&#125;/* 2. 打印文件的扩展名(后缀) (15分) 比如 : 传入字符串 \"/home/apple/oc.txt\" 打印:txt 传入字符串 \"/Users/apple/Desktop/ios.c\" 打印:c */const char *printExtensionOfFilePath(const char * path)&#123; while(*path++ != '.'); const char *p = path; return p;&#125;/* 4.字符串后移指定位数，实现首尾循环(20分) 如传入\"abcdefgh\" 和3，则输出fghabcde */void moveCharsToFront(char *c, int n)&#123; int count = 1, i = 0, j = 0; char a[256]; while(c[i] != '\\0')&#123; a[i] = c[i]; i++; count++; &#125; for(i = 0; i &lt; n; i++)&#123; c[i] = c[count - n - 1 + i]; &#125; for(i = n; i &lt; count - 1; i++)&#123; c[i] = a[j]; j++; &#125; printf(\"%s\\n\",c); &#125;/* //另一种方法 void moveCharsToFront(char *c, int n) &#123; char a[100]; int i,j,x; x=n-1; for(i=0;c[i]!='\\0';i++) &#123; &#125; for(j=i-1;j&gt;=0;j--) &#123; if(j+n&gt;i-1) &#123; a[x]=c[j]; x--; &#125; else&#123; c[j+n]=c[j]; &#125; &#125; for(j=0;j&lt;n;j++) &#123; c[j]=a[j]; &#125; printf(\"%s\\n\",c); &#125; *//* 3. 输入一段字符串，已知字符串只由字母和空格构成，每两个单词间有一个或多个空格，统计其中的单词个数 (15分) 比如：传入 \"welcome to qianfeng\" 返回:3 */int countOfWordInString(const char * str)&#123; int n = 1; int i = 0; //此处考虑字符串前有空格// while(str[i] == ' ')// i++; //不考虑串前空格和串后空格 while(str[i++] != '\\0') &#123; if(str[i - 1] != ' ') &#123; continue; &#125; if(str[i - 1] == ' ' &amp;&amp; str[i] != ' ' ) &#123; n++; &#125; &#125; //此处考虑串后空格 // if(str[i - 2] == ' ') // n--; return n;&#125;/* 3.已知英语单词可以使用空格、逗号、叹号、句号四个符号分割，统计一个英语字符串中单词的个数。(15分) 如 we are student,we are good student! 返回 7 */int numOfWordsInString(const char * str)&#123; int i ,count = 0; for(i = 0; str[i] != '\\0';i++) &#123; if(str[i] == ' ' || str[i] == ',' || str[i] == '!' )&#123; count++; &#125; &#125; return count;&#125;/*4.返回字符串s2在字符串s1中出现的次数。(20分)如s1为\"drink your drink\" s2为\"drink\"返回值是2 */int numOfStr(const char * s1, const char * s2)&#123; int count = 0; int l1 = strlen(s1); int l2 = strlen(s2); for(int i = 0;i &lt; l1; i++) &#123; int n = 0; for(int j = 0; j &lt; l2; j++) &#123; if(s1[i+j] == s2[j]) n++; &#125; if(l2 == n) count++; &#125; return count;&#125;/* 2.求字符串s2在字符串s1中出现的次数（20分） 比如： 输入：“abc123bc321bcde”， “bc” 输出：3 输入：“abc123bc321bcde”， “bcde” 输出：1 */int times(char *s1, char *s2)&#123; int l2 = strlen(s2); int i ,count = 0; for (i = 0;s1[i] != '\\0'; i++) &#123; int n = 0; for(int j = 0; j &lt; l2 ; j++) &#123; if (s1[i + j] == s2[j]) n++; else &#123; break; &#125; &#125; if(l2 == n) &#123; count++; &#125; &#125; return count ;&#125;/* 4.传入一段字符串，字符串中可能有任何字符，输出每种字符出现的次数，字符的顺序没有限制。(20分) 传入:\"hello!!\" 输出: h:1 e:1 l:2 o:1 !:2 */void printNumOfChar(const char * str)&#123; char c[256] = \"\";//存放字符 int num[256] = &#123;0&#125;;//存放字符出现的次数 int i = 0; while(*str != '\\0')&#123; for(i = 0;c[i];i++)&#123; if(c[i] == *str)&#123; num[i]++; break; &#125; &#125; //如果字符不存在，添加到字符数组c中 if(c[i] == '\\0')&#123; c[i] = *str; num[i]++; &#125; str++; &#125; for(int i = 0;i &lt;256; i++)&#123; if(num[i] &gt; 0)&#123; printf(\"%c:%d\\n\",c[i],num[i]); &#125; &#125;&#125;/* void printNumOfChar(const char * str) &#123; char a[256]; int i ,j ,x,n; strcpy(a,str); for(i=0;a[i]!='\\0';i++)&#123;&#125; for(j=0;j&lt;i;j++) &#123; if(a[j]!='\\0') &#123; x=1; for(n=j;n&lt;i;n++) &#123; if(j!= n &amp;&amp; a[n] == a[j]) &#123; x++; a[n]='\\0'; &#125; &#125; printf(\"%c:%d\\n\",a[j],x); &#125; &#125; &#125; *//* 1.统计字符串中的指定字符的个数 （20分） 传入:'a' \"ajeiuaHAAaakdhsda\" 结果:5 */int countOfChar(char c, char *str)&#123; int i = 0; int count = 1; int l = strlen(str);//调用函数计算字符数组长度 for( i = 0; i &lt; l ;i++)&#123; if(c == str[i])&#123; count++; &#125; &#125; return l; &#125;/* 3.将字符串中出现的单词的首字母改为大写，其余字母小写，并输出(15分) 其中传入字符串中，字母既可以大写也可以小写 如传入\"hEllO WOrld\",输出\"Hello World\" 传入\"wELCome TO heNan\",输出\"Welcome To Henan\" */void capitalWords(char *str)&#123; int i = 0;abc: if(str[i] &gt;= 'a' &amp;&amp; str[i] &lt;= 'z')&#123; str[i] = str[i] - 32; &#125; for(i = i+1; str[i] != '\\0'; i++)&#123; if(str[i] == ' ')&#123; i++; goto abc; &#125; if(str[i] &gt;= 'A' &amp;&amp; str[i] &lt;= 'Z')&#123; str[i] = str[i] + 32; &#125; &#125; printf(\"%s\\n\",str); &#125;/* 5.字符串解压缩，并输出(20分) src表示待解压的字符串 如传入a2bc3f4，解压为aabcccffff并输出 */void decompress(const char *src)&#123; int i = 0,count = 1; while(src[i] != '\\0')&#123; i++; count++; &#125; char c[256]; int k = 0; for(i = 0; i &lt; count; i++)&#123; if(src[i] &gt;= 'a' &amp;&amp; src[i] &lt;= 'z')&#123; c[k++] = src[i]; &#125; if(src[i] &gt;= '1' &amp;&amp; src[i] &lt;= '9')&#123; for(int j = 0; j &lt; (src[i] - '1'); j++)&#123; c[k++ ] = src[i-1]; &#125; &#125; &#125; printf(\"%s\\n\",c); &#125;//字符串压缩//如传入aabcccffff 压缩为a2bc3f4并输出//source表示待压缩字符串, destion 用于存放压缩后的字符串void compress(char *source, char *destion)&#123; int count = 1; int i; for(i = 0; source[i] != '\\0'; i++)&#123; if(source[i] == source[i + 1])&#123; count++; &#125;else&#123; *destion = source[i]; destion++; if(count != 1)&#123; //考虑超过10的情况 int j = 0; int num[4] = &#123;0&#125;; while(count &gt; 0)&#123; num[j] = count % 10; count = count / 10; j++; &#125; j--; while(j &gt;= 0)&#123; *destion++ = num[j] + '0'; j--; &#125; //不考虑10以上的数字 *destion++ = count + '0'; count = 1; &#125; &#125; &#125;&#125;/* 5.将字符中单词用空格隔开（20分） 已知传入的字符串中只有字母，各单词由全大写，全小写交替出现组成，试将每个单词隔开， 保留第一个单词首字母大写，其他单词全小写。 传入:\"HELLOmyDEARworld\" 打印:\"Hello my dear world\" 传入:\"welcomeTObeijing\" 打印:\"Welcome to beijing\" */void separateString(const char * str)&#123; int i = 0 ; char c[256] = \"\";//保存修改后的字符串 int flag = 0;// 0 表示小写 1表示大写 if(isupper(str[0]))&#123; flag = 1; &#125; else&#123; flag = 0; &#125; c[0] = toupper(str[0]); //处理首元素，转换成大写字母放入c中 int k=1; while(str[i++] != '\\0')&#123; int temp = 0; //临时标志位 if(isupper(str[i]))&#123; temp = 1; &#125; else&#123; temp = 0; &#125; //和原来的标志位进行比较 if(flag == temp&amp;&amp;flag==0)&#123; //相同 不拆分 c[k++] = str[i]; &#125;else if(flag == temp) &#123; c[k++] = tolower(str[i]); &#125; else &#123; //不同 表示大小写变了 既进入下一个单词 c[k++] = ' '; //先加空格 c[k++] = tolower(str[i]); //字母转换成小写 flag = temp; //记录新的字母状态 &#125; &#125; printf(\"%s\\n\",c); &#125;/* 5.剔除字符串中的全部空格并打印(15分) 传入:\" how are you? \" 打印:howareyou? */void stringWithoutSpaceInString(const char *str)&#123; //此方法直接打印非空格字符 char c[256] = \"\"; int i, j = 0; for(i = 0; str[i] != '\\0'; i++) &#123; if(str[i] != ' ') &#123; c[j] = str[i]; j++; &#125; &#125; printf(\"%s\\n\",c);&#125;void withoutSpaceInString(char * str)&#123; //此方法将将非空格字符赋值给另一个数组 int i = 0; int j = 0; char c[256] = \"\"; while(str[i] != '\\0') &#123; if(str[i] != ' ' ) c[j++] = str[i]; i++; &#125; c[j++] = '\\0'; strcpy(str, c); printf(\"%s\\n\",str);&#125;/* 2.定义一个函数把字符串中的大写转化为小写，把小写转化为大写，非字母不转化。（15分） 比如：Abc12aBC12转化成aBC12Abc12 说明：该题要求修改源字符串 */void converseString (char *str,int length)&#123; int i; for (i=0; i&lt;length; i++) &#123; if (str[i] &gt;= 'a' &amp;&amp; str[i] &lt;= 'z') &#123; str[i] = str[i] - 32; &#125; else if (str[i] &gt;= 'A' &amp;&amp; str[i] &lt;= 'Z') &#123; str[i]= str[i] + 32; &#125;else &#123; str[i] = str[i]; &#125; &#125; printf(\"%s\\n\",str);&#125;/* 6.根据传入的字符串，打印N字图形。(15分) 如传入\"helloworld\" 打印 h h ee e l l l l l l o o o w w w o o o r r r l ll d d */void printString(const char * str)&#123; int i ,j; for(i = 0 ;str[i] != '\\0';i++) &#123; for(j = 0; str[j] !='\\0'; j++) &#123; if(i == j) &#123; printf(\"%c\",str[i]); &#125; else if(j == 0 || str[j+1] =='\\0') &#123; printf(\"%c\",str[i]); &#125; else &#123; printf(\" \"); &#125; &#125; printf(\"\\n\"); &#125;&#125;/*6.传入字符串，打印对应图形。(20分)如传入 \"helloworld\"传入的字符串长度是偶数 打印 h e l l o w o r l d */void printString(const char * str)&#123; int l = strlen(str); for(int i = 0; i &lt; l / 2;i++) &#123; for(int j = 0; j &lt;= i; j++) if(i == j) &#123; printf(\"%c\",str[i]); &#125; else &#123; do&#123; printf(\" \"); &#125;while(i == j); &#125; printf(\"\\n\"); &#125; for(int m = 0; m &lt; l / 2;m++) &#123; for(int n = l / 2; n &lt; l; n++) if(m + n != (l - 1)) &#123; do&#123; printf(\" \"); &#125;while(m + n == (l -1)); &#125; else &#123; printf(\"%c\",str[l / 2 + m]); &#125; printf(\"\\n\"); &#125; &#125;/* 6.传入一个字母，打印图形（20分） 如传入:’A’，打印： A BBB CCCCC DDDDDDD EEEEEEEEE FFFFFFFFFFF GGGGGGGGGGGGG */void printGraph(char c)&#123; for (int i = 1; i &lt;= 7; i++) &#123; for (int j = 1;j &lt;= 2 * i - 1; j++) &#123; printf(\"%c\",c + i - 1); &#125; printf(\"\\n\"); &#125;&#125;/*输入G打印 A BBB CCCCC DDDDDDD EEEEEEEEE FFFFFFFFFFF GGGGGGGGGGGGG */void print(char c)&#123; int i, j; for(i = 1 ;i &lt;= c - 'A' + 1; i++)&#123; for(j = 1; j &lt;= 2 * i - 1; j++)&#123; printf(\"%c\",'A' + i - 1); &#125; printf(\"\\n\"); &#125;&#125;/* 6.传入一个字母，打印图形(15分) 传入:'e' 打印 abcde bcde cde de e ed edc edcb edcba */void printGraph(char c)&#123; int n = c - 'a' + 1; int i,j; for(i = 1;i &lt;= n;i++)&#123; for(j = i;j &lt; n + 1;j++)&#123; printf(\"%c\",'a' + j - 1 ); &#125; printf(\"\\n\"); &#125; for(i = 1;i &lt; n;i++)&#123; for(j =1 ;j &lt;= i+1;j++)&#123; printf(\"%c\",c - j + 1 ); &#125; printf(\"\\n\"); &#125;&#125;","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"算法题","slug":"算法题","permalink":"https://ifeiyv666.github.io/tags/%E7%AE%97%E6%B3%95%E9%A2%98/"}]},{"title":"UIImageView(Objc)","slug":"UIImageView","date":"2017-03-01T08:34:56.000Z","updated":"2020-04-03T10:22:18.887Z","comments":true,"path":"2017/03/01/UIImageView/","link":"","permalink":"https://ifeiyv666.github.io/2017/03/01/UIImageView/","excerpt":"","text":"UIImageView1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#import \"RootViewController.h\"@interface RootViewController ()@end@implementation RootViewController- (void)viewDidLoad &#123; [super viewDidLoad];// [self createUIImageView]; [self UIImageViewAnimation];&#125;-(void)UIImageViewAnimation&#123; UIImageView *bgView = [[UIImageView alloc]initWithFrame:self.view.bounds]; bgView.image = [UIImage imageNamed:@\"back2.jpg\"]; [self.view addSubview:bgView]; UIImageView *birdView = [[UIImageView alloc]initWithFrame:CGRectMake(100, 100, 121, 96)]; birdView.image = [UIImage imageNamed:@\"DOVE 1\"]; NSMutableArray *mArray = [NSMutableArray array]; for (int i = 1 ; i &lt;19; i ++) &#123; NSString *PicName = [NSString stringWithFormat:@\"DOVE %d\",i]; UIImage *image = [UIImage imageNamed:PicName]; [mArray addObject:image]; &#125; birdView.animationImages = mArray; birdView.animationDuration = 1; birdView.animationRepeatCount = 2; [birdView startAnimating]; [self.view addSubview:birdView]; &#125;//创建UIImageView-(void)createUIImageView&#123; /* UIImageView *imageView = [[UIImageView alloc]initWithImage:[UIImage imageNamed:@\"back2.jpg\"]]; [self.view addSubview:imageView]; */ UIImageView *imageView = [[UIImageView alloc]initWithFrame:CGRectMake(50, 50, 200, 200)]; imageView.backgroundColor = [UIColor lightGrayColor]; imageView.image = [UIImage imageNamed:@\"back2.jpg\"]; imageView.contentMode = UIViewContentModeScaleAspectFill;// UIViewContentModeScaleToFill// UIViewContentModeScaleAspectFit// UIViewContentModeScaleAspectFill [self.view addSubview:imageView]; //UIImage在初始化图片时，能获得图片的size UIImage *image = [UIImage imageNamed:@\"back2.jpg\"]; NSLog(@\"%f----%f\",image.size.width,image.size.height);&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIImageView","slug":"UIImageView","permalink":"https://ifeiyv666.github.io/tags/UIImageView/"}]},{"title":"UIAlertView(Objc)","slug":"UIAlertView","date":"2017-02-25T01:39:42.000Z","updated":"2020-04-03T10:20:51.793Z","comments":true,"path":"2017/02/25/UIAlertView/","link":"","permalink":"https://ifeiyv666.github.io/2017/02/25/UIAlertView/","excerpt":"","text":"UIAlertView12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#import \"ViewController.h\"@interface ViewController ()&lt;UIAlertViewDelegate&gt;&#123; int number;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; &#125;//点击屏幕就会触发此方法-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; number = arc4random()%2; NSLog(@\"number = %d\",number); if (number == 0) &#123; UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@\"提示\" message:@\"赶快还钱\" delegate:self cancelButtonTitle:@\"还钱\" otherButtonTitles:@\"不还\",@\"就不还\", nil]; [alert show]; &#125; if (number == 1) &#123; UIAlertView *alert = [[UIAlertView alloc]initWithTitle:@\"提示\" message:@\"还钱\" delegate:self cancelButtonTitle:@\"还钱\" otherButtonTitles:@\"不还\",@\"就不还\", nil]; alert.alertViewStyle = UIAlertViewStyleLoginAndPasswordInput; [alert show]; // UIAlertViewStyleDefault = 0,// UIAlertViewStyleSecureTextInput,// UIAlertViewStylePlainTextInput,// UIAlertViewStyleLoginAndPasswordInput &#125;&#125;#pragma mark -#pragma mark delegate-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex&#123; if (number == 0) &#123; switch (buttonIndex) &#123; case 0: NSLog(@\"%ld\",buttonIndex); break; case 1: NSLog(@\"%ld\",buttonIndex); break; case 2: NSLog(@\"%ld\",buttonIndex); break; default: break; &#125; &#125;else&#123; switch (buttonIndex) &#123; case 0: NSLog(@\"%ld\",buttonIndex); NSLog(@\"%@\",[[alertView textFieldAtIndex:0]text]); NSLog(@\"%@\",[[alertView textFieldAtIndex:1]text]); break; case 1: NSLog(@\"%ld\",buttonIndex); break; case 2: NSLog(@\"%ld\",buttonIndex); break; default: break; &#125; &#125; &#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIAlertView","slug":"UIAlertView","permalink":"https://ifeiyv666.github.io/tags/UIAlertView/"}]},{"title":"图片加载方式(Objc)","slug":"图片加载方式","date":"2017-02-24T04:32:42.000Z","updated":"2020-04-03T09:55:01.889Z","comments":true,"path":"2017/02/24/图片加载方式/","link":"","permalink":"https://ifeiyv666.github.io/2017/02/24/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%96%B9%E5%BC%8F/","excerpt":"","text":"路径解析1234567891011121314151617181920212223242526272829#import \"ViewController.h\"@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; UIImage *image = [UIImage imageNamed:@\"\"]; // 使用`imageNamed:`初始化的时候，会先检查缓存中是否存在要加载的照片，如不存在，图片首先会被缓存起来，然后才返回要加载的图片对象；如果存在，直接返回要加载的照片对象。 NSString *path = [[NSBundle mainBundle]pathForResource:@\"1.png\" ofType:nil]; NSLog(@\"%@\",path); UIImage *image2 = [UIImage imageWithContentsOfFile:path]; // 使用`imageWithContentsOfFile:`创建图片的时候，是直接从磁盘上加载。当收到内存警告时，图片对象会被释放，下一次绘图的时候，需要重新加载。 NSData *data; UIImage *image3 = [UIImage imageWithData:data]; // data 是照片数据，一般是请求返回的，然后通过`imageWithData:`创建图片。&#125;- (void)didReceiveMemoryWarning &#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"图片加载","slug":"图片加载","permalink":"https://ifeiyv666.github.io/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"}]},{"title":"沙盒路径(Objc)","slug":"沙盒路径","date":"2017-02-23T10:47:16.000Z","updated":"2020-04-03T09:58:18.179Z","comments":true,"path":"2017/02/23/沙盒路径/","link":"","permalink":"https://ifeiyv666.github.io/2017/02/23/%E6%B2%99%E7%9B%92%E8%B7%AF%E5%BE%84/","excerpt":"","text":"沙盒路径123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#import \"ViewController.h\"@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // 数据是写在Library-&gt;Preferences下 NSUserDefaults *defaults1 = [NSUserDefaults standardUserDefaults]; NSLog(@\"%p\",defaults1); NSUserDefaults *defaults2 = [NSUserDefaults standardUserDefaults]; NSLog(@\"%p\",defaults2); NSUserDefaults *defaults3 = [[NSUserDefaults alloc]init]; NSLog(@\"%p\",defaults3); NSArray *tempArray = @[@\"1\",@\"2\"]; [defaults1 setObject:tempArray forKey:@\"array\"]; // 1、获取程序的Home目录// NSString *homeDirectory = NSHomeDirectory();// NSLog(@\"path:%@\", homeDirectory); // 2、获取document目录// NSArray *documentPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);// NSString *documentPath = [documentPaths objectAtIndex:0];// NSLog(@\"path:%@\", documentPath); // 3、获取Cache目录 // NSArray *CachePaths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);// NSString *CachePath = [CachePaths objectAtIndex:0];// NSLog(@\"%@\", CachePath); // 4、获取Library目录// NSArray *LibraryPaths = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES);// NSString *LibraryPath = [LibraryPaths objectAtIndex:0];// NSLog(@\"%@\", LibraryPath); // 5、获取Tmp目录// NSString *tmpDir = NSTemporaryDirectory();// NSLog(@\"%@\", tmpDir); // 6、写入文件// NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);// NSString *docDir = [paths objectAtIndex:0];// NSLog(@\"%@\",docDir);// if (!docDir) &#123;// NSLog(@\"Documents 目录未找到\");// &#125;// NSArray *contentArray = [[NSArray alloc] initWithObjects:@\"内容\",@\"content\",nil];// NSString *filePath = [docDir stringByAppendingPathComponent:@\"testFile.txt\"];// [contentArray writeToFile:filePath atomically:YES]; // 7、读取文件 NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES); NSString *docDir = [paths objectAtIndex:0]; NSString *filePath = [docDir stringByAppendingPathComponent:@\"testFile.txt\"]; NSLog(@\"%@\",filePath); NSArray *array = [[NSArray alloc]initWithContentsOfFile:filePath]; NSLog(@\"%@\", array); // 8、判断一个文件是否存在,传入全路径(fileExistsAtPath)// // 创建文件管理器// NSFileManager * fileManager = [NSFileManager defaultManager];// // NSString * documents = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)lastObject];// NSString * filePath = [documents stringByAppendingPathComponent:@\"test\"];// // // 判断一个文件是否存在,传入全路径// if ([fileManager fileExistsAtPath:filePath]) &#123;// NSLog(@\"it is exit\");// &#125; // 9、在Documents里创建目录// NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);// NSString *documentsDirectory = [paths objectAtIndex:0];// NSLog(@\"documentsDirectory%@\",documentsDirectory);// NSFileManager *fileManager = [NSFileManager defaultManager];// NSString *testDirectory = [documentsDirectory stringByAppendingPathComponent:@\"test\"];// // 创建目录// [fileManager createDirectoryAtPath:testDirectory withIntermediateDirectories:YES attributes:nil error:nil]; // 10、在目录下创建文件// NSString *testPath = [testDirectory stringByAppendingPathComponent:@\"test00.txt\"];// NSString *testPath2 = [testDirectory stringByAppendingPathComponent:@\"test22.txt\"];// NSString *testPath3 = [testDirectory stringByAppendingPathComponent:@\"test33.txt\"];// NSString *string = @\"写入内容，write String\";// [fileManager createFileAtPath:testPath contents:[string dataUsingEncoding:NSUTF8StringEncoding] attributes:nil];// [fileManager createFileAtPath:testPath2 contents:[string dataUsingEncoding:NSUTF8StringEncoding] attributes:nil];// [fileManager createFileAtPath:testPath3 contents:[string dataUsingEncoding:NSUTF8StringEncoding] attributes:nil]; // 11、获取目录列里所有文件名// 两种方法获取：subpathsOfDirectoryAtPath 和subpathsAtPath// NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);// NSString *documentsDirectory = [paths objectAtIndex:0];// NSLog(@\"documentsDirectory%@\",documentsDirectory);// NSFileManager *fileManage = [NSFileManager defaultManager];// NSString *myDirectory = [documentsDirectory stringByAppendingPathComponent:@\"test\"];// NSArray *file = [fileManage subpathsOfDirectoryAtPath: myDirectory error:nil];// NSLog(@\"%@\",file);// NSArray *files = [fileManage subpathsAtPath: myDirectory ];// NSLog(@\"%@\",files); // 12、fileManager使用操作当前目录 // //创建文件管理器// NSFileManager *fileManager = [NSFileManager defaultManager];// NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);// NSString *documentsDirectory = [paths objectAtIndex:0];// //更改到待操作的目录下// [fileManager changeCurrentDirectoryPath:[documentsDirectory stringByExpandingTildeInPath]];// //创建文件fileName文件名称，contents文件的内容，如果开始没有内容可以设置为nil，attributes文件的属性，初始为nil// NSString * fileName = @\"testFileNSFileManager.txt\";// NSArray *array = [[NSArray alloc] initWithObjects:@\"hello world\",@\"hello world1\", @\"hello world2\",nil];// [fileManager createFileAtPath:fileName contents:array attributes:nil]; // 13、删除文件 // [fileManager removeItemAtPath:fileName error:nil]; &#125;- (void)didReceiveMemoryWarning &#123; [super didReceiveMemoryWarning]; // Dispose of any resources that can be recreated.&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"沙盒路径","slug":"沙盒路径","permalink":"https://ifeiyv666.github.io/tags/%E6%B2%99%E7%9B%92%E8%B7%AF%E5%BE%84/"}]},{"title":"UIAlertController(Objc)","slug":"UIAlertController","date":"2017-02-23T03:45:09.000Z","updated":"2020-04-03T10:19:41.391Z","comments":true,"path":"2017/02/23/UIAlertController/","link":"","permalink":"https://ifeiyv666.github.io/2017/02/23/UIAlertController/","excerpt":"","text":"UIAlertController123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#import \"ViewController.h\"@interface ViewController ()@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; for (int i = 0 ; i &lt; 2; i ++) &#123; UIButton *button =[UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(120 + i * 120, 120, 100, 50); button.backgroundColor = [UIColor lightGrayColor]; if (i == 0) &#123; [button setTitle:@\"alertView\" forState:UIControlStateNormal]; &#125;else&#123; [button setTitle:@\"actionSheet\" forState:UIControlStateNormal]; &#125; button.tag = 10 + i ; [button addTarget:self action:@selector(onClick:) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button]; &#125; &#125;-(void)onClick:(UIButton*)button&#123; if (button.tag == 10) &#123; NSLog(@\"alertView\"); [self alertView]; &#125;else&#123; NSLog(@\"actionSheet\"); [self actionSheet]; &#125;&#125;-(void)actionSheet&#123;// 初始化UIAlertCOntroller// Title:标题// message:信息// Style:样式 UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@\"提示\" message:@\"message\" preferredStyle:UIAlertControllerStyleActionSheet]; // 初始化UIAlertAction UIAlertAction *cancelBtn = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) &#123; NSLog(@\"取消\"); &#125;]; UIAlertAction *firstBtn = [UIAlertAction actionWithTitle:@\"first\" style:UIAlertActionStyleDefault handler:^(UIAlertAction * action) &#123; NSLog(@\"取消\"); &#125;]; [alertController addAction:cancelBtn]; [alertController addAction:firstBtn]; [self presentViewController:alertController animated:YES completion:nil]; &#125;-(void)alertView&#123;// 初始化UIAlertController// Title:标题// message:信息// Style:样式 UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@\"提示\" message:@\"message\" preferredStyle:UIAlertControllerStyleAlert];// UIAlertControllerStyleActionSheet// UIAlertControllerStyleAlert // 初始化按钮// Title：标题// style：样式// UIAlertController 上面只能有一个取消样式的按钮，否则会崩溃 UIAlertAction *cancelBtn = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleCancel handler:^(UIAlertAction * action) &#123; NSLog(@\"取消\"); &#125;];// UIAlertActionStyleDefault = 0,普通按钮// UIAlertActionStyleCancel,取消按钮// UIAlertActionStyleDestructive重置、销毁// 添加文本输入框 [alertController addTextFieldWithConfigurationHandler:^(UITextField * textField) &#123; textField.placeholder = @\"请输入\"; &#125;]; [alertController addTextFieldWithConfigurationHandler:^(UITextField * textField) &#123; textField.placeholder = @\"第二个文本输入框\"; &#125;]; UIAlertAction *resetBtn = [UIAlertAction actionWithTitle:@\"reset\" style:UIAlertActionStyleDestructive handler:^(UIAlertAction * action) &#123; UITextField *textField1 = alertController.textFields[0]; NSLog(@\"%@\",textField1.text); UITextField *textField2 = alertController.textFields[1]; NSLog(@\"%@\",textField2.text); &#125;]; // 添加动作 [alertController addAction:cancelBtn]; [alertController addAction:resetBtn]; // 模态 [self presentViewController:alertController animated:YES completion:nil];&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIAlertController","slug":"UIAlertController","permalink":"https://ifeiyv666.github.io/tags/UIAlertController/"}]},{"title":"UIActivityIndicatorView(Objc)","slug":"UIActivityIndicatorView","date":"2017-02-22T02:58:06.000Z","updated":"2020-04-03T10:18:36.517Z","comments":true,"path":"2017/02/22/UIActivityIndicatorView/","link":"","permalink":"https://ifeiyv666.github.io/2017/02/22/UIActivityIndicatorView/","excerpt":"","text":"UIActivityIndicatorView123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#import \"myButton.h\"@implementation myButton+(UIButton *)buttonWithFrame:(CGRect)frame BGColor:(UIColor *)color Title:(NSString *)title NormalImage:(UIImage *)normalImage Tag:(int)tag Method:(SEL)method Object:(id)object&#123; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = frame; button.backgroundColor = color; [button setTitle:title forState:UIControlStateNormal]; button.tag = tag; [button setBackgroundImage:normalImage forState:UIControlStateNormal]; [button addTarget:object action:method forControlEvents:UIControlEventTouchUpInside]; return button;&#125;@end#import \"ViewController.h\"#import \"myButton.h\"@interface ViewController ()&#123; UIActivityIndicatorView *act;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createBtn]; [self createActivityIndicatorView];&#125;-(void)onClick:(UIButton*)button&#123; if (act.isAnimating == YES) &#123; [act stopAnimating]; &#125;else if(act.isAnimating == NO)&#123; [act startAnimating]; &#125; &#125;-(void)createActivityIndicatorView&#123; // UIActivityIndicatorViewStyleWhiteLarge,大白// UIActivityIndicatorViewStyleWhite,白色// UIActivityIndicatorViewStyleGray 灰色// 初始化并设置样式 act = [[UIActivityIndicatorView alloc]initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray]; act.frame = CGRectMake(100, 300, 50, 50);// 设置中心点为屏幕中心点 act.center = self.view.center; [self.view addSubview:act]; act.backgroundColor = [UIColor redColor]; // 设置变大4倍 act.transform = CGAffineTransformMakeScale(4, 4); act.tag = 10;// 停止时是否隐藏，默认是YES act.hidesWhenStopped = YES;&#125;-(void)createBtn&#123; UIButton *startBtn = [myButton buttonWithFrame:CGRectMake(100, 100, 50, 50) BGColor:[UIColor lightGrayColor] Title:@\"开始\" NormalImage:nil Tag:10 Method:@selector(onClick:) Object:self]; [self.view addSubview:startBtn]; UIButton *endBtn = [myButton buttonWithFrame:CGRectMake(180, 100, 50, 50) BGColor:[UIColor lightGrayColor] Title:@\"停止\" NormalImage:nil Tag:11 Method:@selector(onClick:) Object:self]; [self.view addSubview:endBtn]; [self.view setBackgroundColor:[UIColor yellowColor]];&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UIActivityIndicatorView","slug":"UIActivityIndicatorView","permalink":"https://ifeiyv666.github.io/tags/UIActivityIndicatorView/"}]},{"title":"路径解析(Objc)","slug":"路径解析","date":"2017-02-18T08:19:59.000Z","updated":"2020-04-03T09:58:14.247Z","comments":true,"path":"2017/02/18/路径解析/","link":"","permalink":"https://ifeiyv666.github.io/2017/02/18/%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/","excerpt":"","text":"路径解析123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174#import \"FyQuestion.h\"@implementation FyQuestion// 判断是绝对路径: 以 /开头的就是绝对路径// --&gt;./ios/day1/// --&gt;/oc/day- (BOOL)isAbsolutePath:(NSString *)path &#123; //直接利用判断开头的这样的方法 harPrefix return [path hasPrefix:@\"/\"];&#125;// 取得路径path最后的部分 /home/xuanmac ---&gt; xuanmac, /home/xuanmac/1.txt---&gt;1.txt- (NSString *)lastPathComponent:(NSString *)path &#123; //第一步，判断是否末尾存在/ int flag = 0; NSString * subStr = nil; if ([path hasSuffix:@\"/\"]) &#123; //截取字符方法，subStringToIndex subStr = [path substringToIndex:[path length] - 1]; flag = 1; &#125; //利用查找字符串方法，option 是倒序查找 //查找方法，返回的是一个范围 NSRange range = &#123;0,0&#125;; if (flag) &#123; //NSBackwardsSearch 倒序查找的指令 range = [subStr rangeOfString:@\"/\" options:NSBackwardsSearch]; //substringFromIndex 从指定位置到字符串结尾，包括指定位置 return [subStr substringFromIndex:range.location + 1]; &#125; else &#123; range = [path rangeOfString:@\"/\" options:NSBackwardsSearch]; return [path substringFromIndex:range.location + 1]; &#125;&#125;// 删除路径path最后的部分 /home/xuanmac/ ---&gt; /home, /home/xuanmac/1.txt---&gt;/home/xuanmac- (NSString *)stringByDeletingLastPathComponent:(NSString *)path &#123; NSString * subStr = nil; //判断path末尾是不是以/结尾 if ([path hasSuffix:@\"/\"]) &#123; subStr = [path substringToIndex:path.length - 1]; &#125; else &#123; subStr = path; &#125; //倒序查找 NSRange range = [subStr rangeOfString:@\"/\" options:NSBackwardsSearch]; NSString * str = [subStr substringToIndex:range.location]; return [NSString stringWithString:str]; &#125;// 在路径上追加路径/home/xuanmac/ 和 demo/abc--&gt;/home/xuanmac/demo/abc- (NSString *)stringByAppendingPathComponent:(NSString *)path withPath:(NSString *)subPath &#123; NSMutableString * mStr = [NSMutableString stringWithString:path]; //判断是否是以/结尾 if ([mStr hasSuffix:@\"/\"]) &#123; if ([subPath hasPrefix:@\"/\"]) &#123; [mStr appendString:[subPath substringFromIndex:1]]; &#125; else &#123; [mStr appendString:subPath]; &#125; &#125; else &#123; if ([subPath hasPrefix:@\"/\"]) &#123; [mStr appendFormat:@\"/%@\",[subPath substringFromIndex:1]]; &#125; else &#123; [mStr appendFormat:@\"/%@\",subPath]; &#125; &#125; return [NSString stringWithString:mStr];&#125;// 取得文件的扩展名/home/xuanmac/1.txt --&gt; txt- (NSString *)pathExtension:(NSString *)path &#123;#if 1 //pathExtension 获取路径拓展名 NSString * str = path.pathExtension; return [NSString stringWithString:str];#else NSRange range = [path rangeOfString:@\".\" options:NSBackwardsSearch]; NSString * str = [path substringFromIndex:range.location + 1]; return [NSString stringWithString:str];#endif&#125;// 删除文件扩展名/home/xuanmac/1.txt --&gt; /home/xuanmac/1- (NSString *)stringByDeletingPathExtension:(NSString *)path &#123; NSRange range = [path rangeOfString:@\".\" options:NSBackwardsSearch]; NSString * str = [path substringToIndex:range.location]; return [NSString stringWithString:str];&#125;// 去除里面多余的 /路径 Duplicate重复 Slash表示斜线// path = @\"///home//xuanmac/ios/oc/day1/\"; 返回@\"/home/xuanmac/ios/oc/day1\"- (NSString *) removeDuplicateSlash:(NSString *)path &#123;#if 1 //看到//我们就要处理掉一个，知道在path没有// NSNotFound //path 转换成可变字符串 NSMutableString * mStr = [NSMutableString stringWithString:path]; while (1) &#123; NSRange range = [mStr rangeOfString:@\"//\"]; //判断是否还存在，如果不存在@\"//\",跳出循环 if (NSNotFound == range.location) &#123; break; &#125; //每次都删除//当中的一个 [mStr deleteCharactersInRange:NSMakeRange(range.location, 1)]; &#125; //处理完//之后，我们要处理路径末尾的/ if([mStr hasSuffix:@\"/\"]) &#123; [mStr deleteCharactersInRange:NSMakeRange(mStr.length - 1, 1)]; &#125; return [NSString stringWithString:mStr];#else NSArray * array = [path componentsSeparatedByString:@\"/\"]; NSMutableArray * mArray = [NSMutableArray arrayWithArray:array]; [mArray removeObject:@\"\"]; return [mArray componentsJoinedByString:@\"/\"];//?????#endif&#125;//-获取路径中的所有目录名----&gt;/home/xuanmac/ios/oc ---&gt;home xuanmac ios oc- (NSArray *)pathComponents:(NSString*)path &#123; return [path componentsSeparatedByString:@\"/\"];&#125;+ (void)test &#123; FyQuestion * test = [[FyQuestion alloc] init]; NSLog(@\"第一题\"); NSLog(@\"%hhd\",[test isAbsolutePath:@\"./ios/day1/\"]); NSLog(@\"%hhd\",[test isAbsolutePath:@\"/ios/day1/\"]); NSLog(@\"第二题\"); NSString * str1 = [test lastPathComponent:@\"/ios/day1/\"]; NSLog(@\"%@\",str1); NSString * str2 = [test lastPathComponent:@\"/ios/day1/1.txt\"]; NSLog(@\"%@\",str2); NSLog(@\"第三题\"); NSString * str3 = [test stringByDeletingLastPathComponent:@\"/ios/day1/\"]; NSLog(@\"%@\",str3); NSString * str4 = [test stringByDeletingLastPathComponent:@\"/ios/day1/1.txt\"]; NSLog(@\"%@\",str4); NSLog(@\"第四题\"); NSString * str5 = [test stringByAppendingPathComponent:@\"/ios/day1/\" withPath:@\"1.txt\"]; NSLog(@\"%@\",str5); NSString * str6 = [test stringByAppendingPathComponent:@\"/ios/day1\" withPath:@\"/test/1.txt\"]; NSLog(@\"%@\",str6); NSLog(@\"第五题\"); NSLog(@\"%@\",[test pathExtension:@\"/test/1.txt\"]); NSLog(@\"第六题\"); NSLog(@\"%@\",[test stringByDeletingPathExtension:@\"/test/1.txt\"]); NSLog(@\"第七题\"); NSLog(@\"%@\",[test removeDuplicateSlash:@\"/////////fdjkasj//fdhk///fdjsalfkjs///\"]); NSLog(@\"第八题\"); NSLog(@\"第备用题\");&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"路径解析","slug":"路径解析","permalink":"https://ifeiyv666.github.io/tags/%E8%B7%AF%E5%BE%84%E8%A7%A3%E6%9E%90/"}]},{"title":"UITextFieldDelegate","slug":"UITextFieldDelegate","date":"2017-02-13T00:25:47.000Z","updated":"2020-04-03T09:19:59.329Z","comments":true,"path":"2017/02/13/UITextFieldDelegate/","link":"","permalink":"https://ifeiyv666.github.io/2017/02/13/UITextFieldDelegate/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#import \"RootViewController.h\"@interface RootViewController ()&lt;UITextFieldDelegate&gt;@end@implementation RootViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createTextField];&#125;//创建UITextField-(void)createTextField&#123;// 初始化UITextField UITextField *textField = [[UITextField alloc]initWithFrame:CGRectMake(100, 400, 180, 50)];// 设置背景色 textField.backgroundColor = [UIColor yellowColor];// 设置边框样式 textField.borderStyle = UITextBorderStyleRoundedRect; // 一键清除butotn textField.clearButtonMode = UITextFieldViewModeWhileEditing; textField.delegate = self; // 添加到视图 [self.view addSubview:textField];&#125;#pragma mark - delegate//点击return键，执行的方法-(BOOL)textFieldShouldReturn:(UITextField *)textField&#123; NSLog(@\"点击了return\");// 注销第一响应 [textField resignFirstResponder]; return YES;&#125;//是否能进入编辑-(BOOL)textFieldShouldBeginEditing:(UITextField *)textField&#123; NSLog(@\"将要开始编辑\");// YES:可以进入编辑// NO:不能进入编辑 return YES;&#125;//当上面的方法返回YES的时候，才会调用此代理方法-(void)textFieldDidBeginEditing:(UITextField *)textField&#123; NSLog(@\"已经开始编辑\");&#125;//将要结束编辑-(BOOL)textFieldShouldEndEditing:(UITextField *)textField&#123; NSLog(@\"将要结束编辑\"); // YES:可以结束编辑 // NO:不能结束编辑 return YES;&#125;//当上面的方法返回YES的时候，才会调用此代理方法//已经结束编辑-(void)textFieldDidEndEditing:(UITextField *)textField&#123; NSLog(@\"已经结束编辑\");&#125;//点击clearButton时调用的方法-(BOOL)textFieldShouldClear:(UITextField *)textField&#123;// 当textField.text值是1的时候，不允许删除 if ([textField.text isEqualToString:@\"1\"]) &#123; return NO; &#125;// YES:允许删除// NO:不允许删除 return YES;&#125;//获得每一次输入的字符-(BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string&#123; // NSLog(@\"string = %@\",string); // 根据每次输入的字符，组成一个字符串 NSMutableString *mutableString = [[NSMutableString alloc]initWithString:textField.text]; [mutableString insertString:string atIndex:range.location]; NSLog(@\"%@\",mutableString); return YES;&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"UITextField","slug":"UITextField","permalink":"https://ifeiyv666.github.io/tags/UITextField/"},{"name":"UITextFieldDelegate","slug":"UITextFieldDelegate","permalink":"https://ifeiyv666.github.io/tags/UITextFieldDelegate/"}]},{"title":"View切换层级","slug":"View层级关系","date":"2017-02-12T01:47:21.000Z","updated":"2020-04-03T09:19:38.323Z","comments":true,"path":"2017/02/12/View层级关系/","link":"","permalink":"https://ifeiyv666.github.io/2017/02/12/View%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB/","excerpt":"","text":"View切换层级12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#import \"RootViewController.h\"@interface RootViewController ()@end@implementation RootViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createSubViews]; &#125;-(void)createSubViews&#123; UILabel *redLabel = [[UILabel alloc]initWithFrame:CGRectMake(10, 10, 100, 100)]; redLabel.backgroundColor = [UIColor redColor]; redLabel.text = @\"红色\"; [self.view addSubview:redLabel]; UILabel *greenLabel = [[UILabel alloc]initWithFrame:CGRectMake(50, 50, 100, 100)]; greenLabel.backgroundColor = [UIColor greenColor]; greenLabel.text = @\"绿色\"; [self.view addSubview:greenLabel]; UILabel *blueLabel = [[UILabel alloc]initWithFrame:CGRectMake(80, 80, 100, 100)]; blueLabel.backgroundColor = [UIColor blueColor]; blueLabel.text = @\"蓝色\"; [self.view addSubview:blueLabel]; // 把子视图提到最前面// [self.view bringSubviewToFront:redLabel]; // 把子视图放到最底层// [self.view sendSubviewToBack:blueLabel]; // 把某一个子视图放到第0层// [self.view insertSubview:blueLabel atIndex:0]; // 把blueLabel 放到greenLabel 下面// [self.view insertSubview:blueLabel belowSubview:greenLabel]; // 把blueLabel放置到redLabel 上面// [self.view insertSubview:redLabel aboveSubview:blueLabel]; NSLog(@\"subViews = %@\",self.view.subviews);&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/tags/Objective-C/"},{"name":"View层级","slug":"View层级","permalink":"https://ifeiyv666.github.io/tags/View%E5%B1%82%E7%BA%A7/"}]},{"title":"键盘状态监听(Objc)","slug":"键盘状态监听","date":"2017-02-10T07:26:57.000Z","updated":"2020-04-03T09:58:40.772Z","comments":true,"path":"2017/02/10/键盘状态监听/","link":"","permalink":"https://ifeiyv666.github.io/2017/02/10/%E9%94%AE%E7%9B%98%E7%8A%B6%E6%80%81%E7%9B%91%E5%90%AC/","excerpt":"","text":"键盘状态监听1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#import \"RootViewController.h\"@interface RootViewController ()&lt;UITextFieldDelegate&gt;@end@implementation RootViewController- (void)viewDidLoad &#123; [super viewDidLoad]; UIView *myView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, 200, 200)]; myView.backgroundColor = [UIColor blackColor]; [self.view addSubview:myView]; [self.view setBackgroundColor:[UIColor redColor]]; [self createTextField];&#125;-(void)createTextField&#123;// 初始化UITextField并设置frame UITextField *textField = [[UITextField alloc]initWithFrame:CGRectMake(100, 400, 100, 50)];// 设置背景色 textField.backgroundColor = [UIColor yellowColor]; textField.delegate = self; // 添加到视图 [self.view addSubview:textField]; // 键盘状态改变的时候，会发出以下通知 // UIKeyboardWillShowNotification; 键盘即将显示 // UIKeyboardDidShowNotification; 键盘显示完毕 // UIKeyboardWillHideNotification; 键盘即将消失 // UIKeyboardDidHideNotification;键盘消失完毕 // UIKeyboardWillChangeFrameNotification 键盘即将改变frame // UIKeyboardDidChangeFrameNotification 键盘已经改变frame // 获取通知中心 NSNotificationCenter*center = [NSNotificationCenter defaultCenter]; // 监听键盘弹出通知 [center addObserver:self selector:@selector(KeyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];// 监听键盘收起通知 [center addObserver:self selector:@selector(KeyboardWillHide:) name:UIKeyboardWillHideNotification object:nil]; // 成为第一响应者// [textField becomeFirstResponder];&#125;//键盘将要消失时-(void)KeyboardWillHide:(NSNotification*)noti&#123; NSLog(@\"%@\",noti.userInfo);// UIKeyboardAnimationDurationUserInfoKey = \"0.25\";// UIKeyboardBoundsUserInfoKey = \"NSRect: &#123;&#123;0, 0&#125;, &#123;375, 258&#125;&#125;\";// UIKeyboardFrameBeginUserInfoKey = \"NSRect: &#123;&#123;0, 409&#125;, &#123;375, 258&#125;&#125;\";// UIKeyboardFrameEndUserInfoKey = \"NSRect: &#123;&#123;0,667&#125;, &#123;375, 258&#125;&#125;\"; self.view.frame = CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height);&#125;//键盘将要出现-(void)KeyboardWillShow:(NSNotification*)noti&#123; NSLog(@\"%@\",noti.userInfo);// UIKeyboardAnimationDurationUserInfoKey = \"0.25\";// UIKeyboardBoundsUserInfoKey = \"NSRect: &#123;&#123;0, 0&#125;, &#123;375, 258&#125;&#125;\";// UIKeyboardFrameBeginUserInfoKey = \"NSRect: &#123;&#123;0, 667&#125;, &#123;375, 258&#125;&#125;\";// UIKeyboardFrameEndUserInfoKey = \"NSRect: &#123;&#123;0, 409&#125;, &#123;375, 258&#125;&#125;\";// UIKeyboardIsLocalUserInfoKey = 1; CGRect rect = [noti.userInfo[UIKeyboardFrameEndUserInfoKey]CGRectValue]; NSLog(@\"rect = %@\",NSStringFromCGRect(rect)); self.view.frame = CGRectMake(0, -rect.size.height, self.view.frame.size.width, self.view.frame.size.height);&#125;#pragma mark - textField delegate-(BOOL)textFieldShouldReturn:(UITextField *)textField&#123;// 取消第一响应者 [textField resignFirstResponder]; return YES;&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"键盘监听","slug":"键盘监听","permalink":"https://ifeiyv666.github.io/tags/%E9%94%AE%E7%9B%98%E7%9B%91%E5%90%AC/"}]},{"title":"手机晃动事件(Objc)","slug":"手机晃动事件OC","date":"2017-01-29T06:55:34.000Z","updated":"2020-04-03T09:58:25.778Z","comments":true,"path":"2017/01/29/手机晃动事件OC/","link":"","permalink":"https://ifeiyv666.github.io/2017/01/29/%E6%89%8B%E6%9C%BA%E6%99%83%E5%8A%A8%E4%BA%8B%E4%BB%B6OC/","excerpt":"","text":"手机晃动事件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#define screenWidth self.view.frame.size.width#define screenHeight self.view.frame.size.height#import \"ViewController.h\"@interface ViewController ()&#123; UIImageView *_topImageView; UIImageView *_bottomImageView; UIImageView *_showImageView;&#125;@end@implementation ViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createImageViews];&#125;//检测到手机晃动-(void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event&#123;// 显示中间的图片 [self showImageView]; NSLog(@\"晃动开始\");&#125;//晃动结束-(void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event&#123;// 隐藏中间的图片 [self hideImageView]; NSLog(@\"晃动结束\");&#125;-(void)hideImageView&#123; [UIView animateWithDuration:2 animations:^&#123; // 设置返回原始位置 _topImageView.frame = CGRectMake(0, 0, screenWidth, screenHeight/2); _bottomImageView.frame = CGRectMake(0, screenHeight/2, screenWidth, screenHeight/2); &#125;];&#125;-(void)showImageView&#123;// 使用动画为了更美观 [UIView animateWithDuration:1 animations:^&#123; _topImageView.frame = CGRectMake(0, -100, screenWidth, screenHeight/2); _bottomImageView.frame = CGRectMake(0, screenHeight/2 + 100, screenWidth, screenHeight/2); &#125;];&#125;#pragma mark 创建UI-(void)createImageViews&#123; _showImageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, 150, 150)]; _showImageView.center = self.view.center; _showImageView.image = [UIImage imageNamed:@\"ShakeHideImg_women\"]; [self.view addSubview:_showImageView]; _topImageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, self.view.frame.size.height/2)]; _topImageView.image = [UIImage imageNamed:@\"Shake_Logo_Up\"]; [self.view addSubview:_topImageView]; _bottomImageView = [[UIImageView alloc]initWithFrame:CGRectMake(0, self.view.frame.size.height/2, self.view.frame.size.width, self.view.frame.size.height/2)]; _bottomImageView.image = [UIImage imageNamed:@\"Shake_Logo_Down\"]; [self.view addSubview:_bottomImageView];&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"手机晃动事件","slug":"手机晃动事件","permalink":"https://ifeiyv666.github.io/tags/%E6%89%8B%E6%9C%BA%E6%99%83%E5%8A%A8%E4%BA%8B%E4%BB%B6/"}]},{"title":"OC画图","slug":"OC画图","date":"2017-01-27T12:54:31.000Z","updated":"2020-04-03T09:32:12.300Z","comments":true,"path":"2017/01/27/OC画图/","link":"","permalink":"https://ifeiyv666.github.io/2017/01/27/OC%E7%94%BB%E5%9B%BE/","excerpt":"","text":"OC画图123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#import \"Customview.h\"@implementation Customview&#123; NSMutableArray *lineArray;&#125;- (id)initWithFrame:(CGRect)frame&#123; self = [super initWithFrame:frame]; if (self) &#123; [self setBackgroundColor:[UIColor whiteColor]]; UIButton *button=[UIButton buttonWithType:UIButtonTypeRoundedRect]; [button setTitle:@\"撤销\" forState:UIControlStateNormal]; [button addTarget:self action:@selector(doButton:) forControlEvents:UIControlEventTouchDown]; button.frame=CGRectMake(110, 380, 100, 40); [button setBackgroundColor:[UIColor redColor]]; [self addSubview:button]; UIButton *button2=[UIButton buttonWithType:UIButtonTypeRoundedRect]; [button2 setTitle:@\"橡皮擦\" forState:UIControlStateNormal]; [button2 addTarget:self action:@selector(doButton:) forControlEvents:UIControlEventTouchDown]; button2.frame=CGRectMake(110, 430, 100, 40); [button2 setBackgroundColor:[UIColor redColor]]; [self addSubview:button2]; //实例化数组（用来存放移动点的数组） lineArray =[[NSMutableArray alloc]init]; &#125; return self;&#125;-(void)doButton:(id)button&#123; [lineArray removeLastObject]; [self setNeedsDisplay];&#125;-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event&#123; //创建触摸事件对象 UITouch *touch = [touches anyObject]; //拿到初始点 CGPoint firstPoint = [touch locationInView:self]; //转换成value对象 NSValue *value = [NSValue valueWithCGPoint:firstPoint]; //创建存放每个点的内层数组（一条线） NSMutableArray *pointArray = [[NSMutableArray alloc]init]; [pointArray addObject:value]; //把每一笔画对应 的数组放入外层数组 [lineArray addObject:pointArray];&#125;-(void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event&#123; UITouch *touch = [touches anyObject]; //拿到移动 时的每一个点 CGPoint currentPoint = [touch locationInView:self]; //拿到最后笔画对应的数组 NSMutableArray *pointAaary = [lineArray lastObject]; NSValue *value = [NSValue valueWithCGPoint:currentPoint]; //把移动 的每一个点放入对应的数组 [pointAaary addObject:value]; //让视图重绘（调用该方法后self的drawrect方法会被调用） [self setNeedsDisplay];&#125;-(void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event&#123; &#125;//iOS的绘图操作是在UIView类的drawRect方法中完成的，所以如果我们要想在一个UIView中绘图，需要写一个扩展UIView 的类，并重写drawRect方法，在这里进行绘图操作，程序会自动调用此方法进行绘图。- (void)drawRect:(CGRect)rect&#123; //拿到当前绘图上下文环境 CGContextRef currentText = UIGraphicsGetCurrentContext(); //设置画笔线条的宽度 CGContextSetLineWidth(currentText, 2); //将画笔设置为红色 CGColorRef cf = [UIColor redColor].CGColor; CGContextSetStrokeColorWithColor(currentText, cf); for (int i = 0; i &lt; [lineArray count]; i++) &#123; //拿到每一个笔画对应的数组 NSMutableArray *pArray = [lineArray objectAtIndex:i]; for (int j = 0; j &lt; [pArray count]-1; j++) &#123; NSValue *previousValue = [pArray objectAtIndex:j]; NSValue *currentValue = [pArray objectAtIndex:j+1]; CGPoint previousPoint = [previousValue CGPointValue]; CGPoint currentValuePoint = [currentValue CGPointValue]; //设置画笔的起点 CGContextMoveToPoint(currentText, previousPoint.x, previousPoint.y); //设置两点确定一条直线的另一点 CGContextAddLineToPoint(currentText, currentValuePoint.x, currentValuePoint.y); &#125; //提交描绘的轨迹，这才是真正画线的地方 CGContextStrokePath(currentText); &#125; &#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"OC画图","slug":"OC画图","permalink":"https://ifeiyv666.github.io/tags/OC%E7%94%BB%E5%9B%BE/"}]},{"title":"delegate反向传值","slug":"delegate反向传值","date":"2017-01-27T04:17:29.000Z","updated":"2020-04-03T09:19:27.331Z","comments":true,"path":"2017/01/27/delegate反向传值/","link":"","permalink":"https://ifeiyv666.github.io/2017/01/27/delegate%E5%8F%8D%E5%90%91%E4%BC%A0%E5%80%BC/","excerpt":"","text":"delegate反向传值12345678910111213141516171819202122232425262728293031#import \"RootViewController.h\"#import \"SecondViewController.h\"@interface RootViewController ()&lt;SecondViewControllerDelegate&gt;@end@implementation RootViewController- (void)viewDidLoad &#123; [super viewDidLoad]; [self createButton];&#125;-(void)createButton&#123; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(100, 100, 100, 100); button.backgroundColor = [UIColor lightGrayColor]; [button setTitle:@\"下一页\" forState:UIControlStateNormal]; [button addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button];&#125;-(void)onClick&#123; SecondViewController *secondVc = [[SecondViewController alloc]init]; secondVc.delegate = self; [self.navigationController pushViewController:secondVc animated:YES];&#125;-(void)changeColor:(UIColor *)color&#123; [self.view setBackgroundColor:color];&#125;@end 123456789101112131415161718192021222324252627282930#import \"SecondViewController.h\"@interface SecondViewController ()@end@implementation SecondViewController- (void)viewDidLoad &#123; [super viewDidLoad]; // Do any additional setup after loading the view. [self createButton]; [self.view setBackgroundColor:[UIColor lightGrayColor]];&#125;-(void)createButton&#123; UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom]; button.frame = CGRectMake(100, 100, 100, 100); button.backgroundColor = [UIColor lightGrayColor]; [button setTitle:@\"上一页\" forState:UIControlStateNormal]; [button addTarget:self action:@selector(onClick) forControlEvents:UIControlEventTouchUpInside]; [self.view addSubview:button];&#125;-(void)onClick&#123; if (self.delegate &amp;&amp; [self.delegate respondsToSelector:@selector(changeColor:)]) &#123; [self.delegate changeColor:[UIColor yellowColor]]; &#125; [self.navigationController popViewControllerAnimated:YES];&#125;@end","categories":[{"name":"Objective-C","slug":"Objective-C","permalink":"https://ifeiyv666.github.io/categories/Objective-C/"}],"tags":[{"name":"delegate","slug":"delegate","permalink":"https://ifeiyv666.github.io/tags/delegate/"},{"name":"delegate反向传值","slug":"delegate反向传值","permalink":"https://ifeiyv666.github.io/tags/delegate%E5%8F%8D%E5%90%91%E4%BC%A0%E5%80%BC/"}]}]}